<?xml version="1.0" encoding="utf-8" ?>
<project name="fhh-ear-installer" default="upgrade" basedir="." >
	<description>
		TBD
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="project.properties"/>
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	
	<!-- Generic properties -->
	<property name="log.dir" value="${basedir}/logs" />
	<property name="working.dir" value="${basedir}/working" />
	<property name="temp.dir" value="${working.dir}/temp" />

	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" value="bda-utils" />
	<property name="tools.dir" value="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
	<property name="common.dir.dest" value="${working.dir}/${common.dist.relative.dir}" />
	<property name="jboss-conf.dir.dest" value="${working.dir}/${jboss-conf.dist.relative.dir}" />
	<property name="db.dir.src" value="${basedir}/${db.dist.relative.dir}" />
	<property name="db.dir.dest" value="${working.dir}/${db.dist.relative.dir}" />
	<property name="db-install.dir.dest" value="${working.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dir.dest" value="${working.dir}/${db-upgrade.dist.relative.dir}" />

	<!-- Jboss configurtion related properties -->
	<property name="jboss.binding.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/bindings.xml"/>
	<property name="jboss.service.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/jboss-service.xml"/>

	<!-- *-ds.xml and WAR -->
	<property name="fhh-ear.dir.dist" value="${basedir}/${fhh-ear.dist.relative.dir}" />
	<property name="fhh-ear.ds.file" value="fhh-ds.xml" />
	<property name="fhh-ear.app-sec-conf.file" value="ApplicationSecurityConfig.xml" />
	<property name="fhh-ear.hibernate.file" value="hibernate.cfg.xml" />
	<property name="fhh-ear.ear.file" value="fhh.ear" />

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
		<classpath>
			<pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
		</classpath>
	</taskdef>
	<taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
			<pathelement location="${bda-utils.dir}/bcel-5.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-httpclient-3.0.1.jar"/>
			<pathelement location="${bda-utils.dir}/commons-logging-1.0.4.jar"/>
			<pathelement location="${bda-utils.dir}/ivy-1.3.1.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>


	<!-- Conditionals -->
	<available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
	<!-- fhh-ear can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
	<switch value="${database.type}">
		<case value="oracle">
			<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.3.0.jar"/>
			<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.oracle.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.oracle.conf.file}"/>
		</case>
		<case value="mysql">
			<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
			<property name="database.driver.file" value="${common.dir.src}/libs/mysql-connector-java-5.1.6.jar"/>
			<property name="database.driver" value="com.mysql.jdbc.Driver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.mysql.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.mysql.conf.file}"/>
		</case>
		<case value="postgresql">
			<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
			<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
			<property name="database.driver" value="org.postgresql.Driver"/>
			<property name="db-upgrade.list.file" value="${db-upgrade.postgresql.list.file}"/>
			<property name="db-upgrade.conf.file" value="${db-upgrade.postgresql.conf.file}"/>
		</case>
		<default>
			<fail message="Invalid database type ${database.type}"/>
		</default>
	</switch>

	<!-- figure out whether to use install-properties.template or upgrade-proprties.template based on the name of the properties file -->
	<propertyregex property="properties.file.type"
		input="${properties.file}"
		regexp=".*(install|upgrade).*"
		select="\1"
		/>
	<echo message="Properties file type = ${properties.file.type}"/>
	<switch value="${properties.file.type}">
		<case value="install">
			<property name="properties.template.file" value="install-properties.template" />
		</case>
		<case value="upgrade">
			<property name="properties.template.file" value="upgrade-properties.template" />
		</case>
		<default>
			<fail message="Property file name must include 'install' or 'upgrade' so it can be determined which properties template should be used. If you are not certain include 'upgrade' in the name of your proeprties file."/>
		</default>
	</switch>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />


	<!-- Read db configs from existing ds.xml if it exists for use in upgrade installs, if already set in properties file values from properties file will be used -->
	<available file="${jboss.home}/server/${jboss.server.name}/deploy/${fhh-ear.ds.file}" property="ds.exists"/>
	<if>
		<isset property="ds.exists"/>
		<then>
			<jboss-read-dbconfig
				jboss.ds-xml.file="${fhh-ear.ds.file}"
				/>
		</then>
		<else>
			<echo message="Warning- could not find ${jboss.home}/server/${jboss.server.name}/deploy/${fhh-ear.ds.file}"/>
		</else>
	</if>

	<!-- There is any issue with copying files with a filtersfile, any properties with a value of
		another property do not get expanded (xx=${yy} @xx@ will be replaced with ${yy} not the
		value).  I have defined a filter set below for these properties, I then two two copies
		one to the resource.dir.temp using the filterset and then one to the desired directory 
		with the filter file.  If you add new properties that refer to other properties in the
		properties file please add them to the filterset-pre below.
	     Also you should include properties that are declared in this file, like database info below.
	-->
	<property name="resource.dir.temp" value="${working.dir}/tmp" />
	<filterset id="filterset.pre">
		<filter token="application.base.path" value="${application.base.path}"/>
		<filter token="application.url" value="${application.url}"/>
		<filter token="database.url" value="${database.url}"/>
		<filter token="database.system.url" value="${database.system.url}"/>
		<filter token="jboss.home" value="${jboss.home}"/>
		<!-- added internal properties that may be used in a filtered copy -->
		<filter token="database.driver" value="${database.driver}"/>
		<filter token="database.dialect" value="${database.dialect}"/>
		<filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
	</filterset>
	

	<!-- Start logging --> 
	<mkdir dir="${log.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${log.dir}/install-${install.time}.log" action="start"/>


	<!-- Installer section -->
	<target name="diag">
		<echoproperties/>
	</target>

	<!-- Clean up destination directory -->
	<target name="install:clean" description="Removes all files from the local filesystem">
		<sleep seconds="5" />
		<delete dir="${jboss.home}" quiet="false" />
		<delete dir="${tomcat.home}" quiet="false" />
	</target>

	<!-- Does directory management and copy some files with filtering to ensure token expansion -->
	<target name="install:init" description="Does directory management to initialize install">
		<mkdir dir="${working.dir}" />
		<delete dir="${working.dir}"/>
		<mkdir dir="${working.dir}" />
		<mkdir dir="${resource.dir.temp}"/>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in filterset.pre and then copy with filter files -->
		<copy todir="${resource.dir.temp}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="filterset.pre"/>
		</copy> 
		<copy todir="${common.dir.dest}" filtering="true">
			<fileset dir="${resource.dir.temp}">
				<include name="**/*"/>
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy> 
		<delete dir="${resource.dir.temp}"/>
	</target>

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="install:init">
		<echoproperties prefix="database"/>
		<property name="db.dir.temp" value="${working.dir}/tmp"/>
		<mkdir dir="${db.dir.temp}"/>
		<copy todir="${db.dir.temp}" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="filterset.pre"/>
		</copy> 
		<copy todir="${db.dir.dest}" filtering="true">
			<fileset dir="${db.dir.temp}">
				<include name="**/*"/>
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		<if>
			<and>
				<equals arg1="${database.re-create}" arg2="true"/>
				<equals arg1="${database.drop-schema}" arg2="true"/>
			</and>
			<then>
				<fail message="You cannot set both database.re-create and database.drop-schema at the same time.  database.re-create is used in local installs.  database.drop-schema is used in remote installs.  Either one can be set for external (Cancer Center) installs."/>
			</then>
		</if>

	</target>
	

	<target name="install:database" description="Re-creates database and users from baseline and applys incremental database changes." unless="exclude.database"
		depends="
		install:init,
		install:database:prep
		">
        <!-- Drop all schema objects or re-create the db -->
        <database-clean/>
        <!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
        <switch value="${database.type}">
            <case value="mysql">
                <database-install
                    db.install.create.file.list="${db.install.create.mysql.file.list}"
                    />
            	<!-- changing to defaults
                <database-install
                    db.install.create.file.list="${db.install.create.mysql.file.list}"
                    sql.delimiter="/"
                    sql.delimitertype="row"
                    />
                    -->
            </case>
        </switch>
	</target>

	<target name="install:jboss:binaries" description="Unzip JBoss binary" unless="exclude.jboss">
		<!--
		<unzip dest="${application.base.path}" src="${tools.dir}/${jboss.binaries.file}" />
		<java jar="${tools.dir}/${jboss.binaries.file}" fork="true">
			<arg value="${jboss-conf.dir.dest}/InstallConfigRecord.xml"/>
		</java>
		-->
		<java jar="${tools.dir}/${jboss.binaries.file}" fork="true">
			<arg line="-installGroup ejb3 installpath=${jboss.home}"/>
		</java>
		<if>    
			<os family="unix"/>
			<then>  
				<chmod dir="${jboss.home}/bin" perm="ugo+rx" 
					includes="**/*.sh"/>
			</then>
		</if>
	</target>

	<target name="install:jboss:fhh-ear" description="Deploy fhh-ear fhh-ear.ear, fhh-ear-api.war and common libraries" unless="exclude.jboss">
		<!-- added to ensure working.dirs are fresh for our install -->
		<delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
		<delete dir="${jboss.home}/server/${jboss.server.name}/work"/>

		<copy file="${fhh-ear.dir.dist}/${fhh-ear.ear.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		<copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		<copy file="${common.dir.src}/libs/ehcache-1.2.4.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
		
	</target>

	<target name="install:jboss:fhh-ear:configure" description="Configure fhh-ear application" unless="exclude.jboss">
		<!-- Not needed being done inside of ear
		<copy file="${jboss-conf.dir.dest}/${fhh-ear.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
		-->
	</target>

	<!-- Wrapper target to configure jboss container, not deployed application -->
	<target name="install:jboss:configure" description="Configure fhh-ear" unless="exclude.jboss"
		depends="install:jboss:binaries,
		-install:jboss:configure:ports,
		-install:jboss:configure:log4j,
		-install:jboss:configure:update-shutdown
		"/>

	<!-- Configure ports used by JBOSS (either bindings or editing jboss config.files) -->
	<target name="-install:jboss:configure:ports" description="Configure fhh-ear" unless="exclude.jboss">
		<jboss-bindings
			jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindings.xml"
			jboss.server.binding.template.location="${jboss.binding.template.location}"
			jboss.server.service.template.location="${jboss.service.template.location}"
			/>
	</target>

	<!-- Configure log4j settings based on contents of fhh-ear/ant-build/resources/jboss-conf/log4j.block.xml -->
	<target name="-install:jboss:configure:log4j" unless="exclude.jboss">
		<!-- Handled inside ear -->
	</target>

	<!-- Calls to bda macros for basic functionality -->
	<target name="install:jboss:stop" if="jboss.exists" unless="exclude.jboss">
		<jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
		<jboss-stop-jboss />
	</target>
	<target name="install:jboss:start"  unless="exclude.jboss">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<jboss-start-jboss />
				<sleep seconds="15"/>
			</then>
		</if>
	</target>
	<target name="install:validation:pre-install">
		<validate-pre-install
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			database.version="${mysql.minimum.version}"
			/>
	</target>
	<target name="install:validation:pre-install:ports">
		<validate-ports-preinstall />
	</target>
	<target name="install:validation:post-install">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-install />
			</then>
		</if>
	</target>
	<target name="-install:jboss:configure:update-shutdown" unless="exclude.jboss">
		<jboss-update-shutdown />
	</target>

	<!-- Wrapper target to deploy JBOSS container -->
	<target name="install:jboss" unless="exclude.jboss"
		depends="
		install:check,
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:jboss:binaries,
		install:jboss:fhh-ear:re-configure,
		install:jboss:fhh-ear,
		install:jboss:fhh-ear:configure,
		install:jboss:configure,
		install:jboss:start
		" />

	<!-- Wrapper target to deploy all containers to one server -->
	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		install:check,
		install:validation:pre-install,
		install:jboss:stop,
		install:validation:pre-install:ports,
		install:clean,
		install:init,
		install:database,
		install:jboss,
		install:jboss:start,
		install:validation:post-install
		"/>

	<!-- Fixes hibernate dialect and other configurations in code generated at build time.  This is requred because the properties/options selected at build time can be different than those used at install time. -->
	<target name="install:jboss:fhh-ear:re-configure" unless="exclude.jboss">
		<mkdir dir="${temp.dir}/fhh-ear"/>
		<delete dir="${temp.dir}/fhh-ear"/>
		<mkdir dir="${temp.dir}/fhh-ear"/>
		<unzip src="${fhh-ear.dir.dist}/${fhh-ear.ear.file}" dest="${temp.dir}/fhh-ear"/>
		<unzip src="${temp.dir}/fhh-ear/fhh-web.war" dest="${temp.dir}/fhh-web"/>
		<unzip src="${temp.dir}/fhh-ear/fhh-services.jar" dest="${temp.dir}/fhh-services"/>
		<!-- Filter contents of the files below to be based on install time properties. Paths below are paths witin the ear. -->
		<property name="file.list" value="fhh-ear/fhh-ds.xml,fhh-ear/fhh-log4j.xml,fhh-web/WEB-INF/classes/jndi.properties,fhh-ear/jboss-service.xml"/>

		<for list="${file.list}" param="file.relative.name">
			<sequential>
				<propertyregex property="file.name"
					input="@{file.relative.name}"
					regexp="^.*\/(.*)"
					select="\1"
					override="true"
					/>
				<propertyregex property="relative.dir"
					input="@{file.relative.name}"
					regexp="^(.*)\/.*"
					select="\1"
					override="true"
					/>
				<echo message="relative.dir=${relative.dir} file.name=${file.name}"/>
				<replace file="${temp.dir}/${relative.dir}/${file.name}" token="%%" value="@"/>
				<copy todir="${temp.dir}" file="${temp.dir}/${relative.dir}/${file.name}" filtering="true" overwrite="true">
					<filterset>
						<filter token="database.server" value="${database.server}"/>
						<filter token="database.port" value="${database.port}"/>
						<filter token="database.name" value="${database.name}"/>
						<filter token="database.user" value="${database.user}"/>
						<filter token="database.password" value="${database.password}"/>
						<filter token="database.driver" value="${database.driver}"/>
						<!-- not needed for now
						<filter token="ldap.url" value="${ldap.url}"/>
						<filter token="ldap.base.dn" value="${ldap.base.dn}"/>
						<filter token="ldap.user.field" value="userid"/>
						-->
						<filter token="app.log.level" value="${app.log.level}"/>
						<filter token="app.log.level.default" value="${app.log.level.default}"/>
						<filter token="jboss.server.jndi.port" value="${jboss.server.jndi.port}"/>
					</filterset>
				</copy>
				<copy todir="${temp.dir}/${relative.dir}" file="${temp.dir}/${file.name}" overwrite="true"/>
			</sequential>
		</for>

		<move file="${fhh-ear.dir.dist}/${fhh-ear.ear.file}" tofile="${fhh-ear.dir.dist}/${fhh-ear.ear.file}.orig"/>

		<jar destfile="${temp.dir}/fhh-ear/fhh-services.jar" basedir="${temp.dir}/fhh-services">
		</jar>
		
		<war destfile="${temp.dir}/fhh-ear/fhh-web.war"
			compress="true" 
			webxml="${temp.dir}/fhh-web/WEB-INF/web.xml" duplicate="preserve">

			<lib dir="${temp.dir}/fhh-web/WEB-INF/lib"/>
			<classes dir="${temp.dir}/fhh-web/WEB-INF/classes"/>
			<webinf dir="${temp.dir}/fhh-web/WEB-INF" excludes="web.xml"/>
			<fileset dir="${temp.dir}/fhh-web"/>
		</war>

		<ear destfile="${fhh-ear.dir.dist}/${fhh-ear.ear.file}" 
			basedir="${temp.dir}/fhh-ear" 
			compress="false" 
			appxml="${temp.dir}/fhh-ear/META-INF/application.xml"
			/>
	</target>

	<!-- Wrapper target to upgrade jboss container. Does not install or configure binaries -->
	<target name="upgrade:jboss" unless="exclude.jboss"
		depends="
		upgrade:check,
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		install:jboss:fhh-ear:re-configure,
		install:jboss:fhh-ear,
		install:jboss:fhh-ear:configure,
		install:jboss:start
		" />

	<!-- Wrapper target to upgrade all container. Does not install or configure binaries -->
	<target name="upgrade" description="Deploys application and runs incremental database build" 
		depends="
		upgrade:check,
		upgrade:init,
		install:validation:pre-install,
		install:jboss:stop,
		install:init,
		upgrade:jboss,
		install:validation:post-install
		"/>
	<!-- temporary target to install a fresh db all DDL and DML -->
	<target name="upgrade:install:db" description="Deploys application and runs full database install build" 
		depends="
		upgrade:check,
		upgrade:init,
		install:validation:pre-install,
		install:jboss:stop,
		install:init, 
		install:database,
		upgrade:jboss,
		install:validation:post-install
		"/>		
		
	<target name="upgrade:init">
		<echo  message="Checking if database properties exist.  If they do not on an upgrade install then ${jboss.home}/server/${jboss.server.name}/deploy/${fhh-ear.ds.file} may not exist."/>
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<properties-exist properties.list="${db.prop.list}"/>
	</target>
	<target name="install:check">
		<if>
			<not>   
				<contains string="${properties.file}" substring="install"/>
			</not>  
			<then>  
				<fail message="When calling install targets the properties.file property, '${properties.file}', must contain 'install' in the name."/>
			</then> 
		</if>   
	</target>
	<target name="upgrade:check">
		<if>
			<not>   
				<contains string="${properties.file}" substring="upgrade"/>
			</not>  
			<then>  
				<fail message="When calling install targets the properties.file property, '${properties.file}', must contain 'upgrade' in the name."/>
			</then> 
		</if>   
	</target>
</project>

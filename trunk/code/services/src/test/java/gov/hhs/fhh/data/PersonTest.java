/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import gov.hhs.fhh.data.util.HL7ConversionUtils;
import gov.hhs.fhh.test.util.RelativeBranchTestUtil;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;
import com.fiveamsolutions.hl7.model.mfhp.Gender;
import com.fiveamsolutions.hl7.model.mfhp.Height;
import com.fiveamsolutions.hl7.model.mfhp.TwinStatus;
import com.fiveamsolutions.hl7.model.mfhp.Weight;
import com.fiveamsolutions.hl7.model.mfhp.WeightUnit;

/**
 * @author bpickeral
 *
 */
public class PersonTest {
    private final boolean TRUE = true;
    private final String TRUE_STRING = "true";
    private final Weight DUMMY_WEIGHT = new Weight();
    private final Height DUMMY_HEIGHT = new Height();
    private final String DUMMY_NAME = "Name";
    private final UUID DUMMY_ID = UUID.randomUUID();
    private final Gender DUMMY_GENDER = Gender.MALE;
    private final Ethnicity DUMMY_ETHNICITY = new Ethnicity();
    private final Race DUMMY_RACE = new Race();
    private final ClinicalObservation DUMMY_OBS =  new ClinicalObservation();
    private final Person p = new Person();
    private final Date date = new Date();
    private final DiseaseBean DUMMY_DISEASE = new DiseaseBean();

    @Before
    public void before() {
        p.setName(DUMMY_NAME);
        p.setDateOfBirth(date);
        p.setUuid(DUMMY_ID);
        p.setGender(DUMMY_GENDER);
        DUMMY_OBS.setDisease(DUMMY_DISEASE);
        DUMMY_OBS.setAgeRange(AgeRangeEnum.THIRTIES);
        DUMMY_WEIGHT.setValue(180);
        DUMMY_WEIGHT.setUnit(WeightUnit.US);
        DUMMY_HEIGHT.setValue(60);
        p.setWeight(DUMMY_WEIGHT);
        p.setHeight(DUMMY_HEIGHT);
        final List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(DUMMY_OBS);
        p.setObservations(observations);
        p.setEthnicities(new ArrayList<Ethnicity>());
        p.getEthnicities().add(DUMMY_ETHNICITY);
        p.setRaces(new ArrayList<Race>());
        p.getRaces().add(DUMMY_RACE);
        p.setAdopted(TRUE);
    }
    
    @Test
    public void testCreatePerson() {
        assertEquals(DUMMY_ID, p.getUuid());
        assertEquals(DUMMY_NAME, p.getName());
        assertEquals(date.toString(), p.getDateOfBirth().toString());
        assertEquals(DUMMY_WEIGHT, p.getWeight());
        assertEquals(DUMMY_HEIGHT, p.getHeight());
        assertEquals(DUMMY_GENDER, p.getGender());
        assertEquals(DUMMY_DISEASE, p.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, p.getObservations().get(0).getAgeRange());
        assertEquals(DUMMY_ETHNICITY, p.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, p.getRaces().get(0));
        assertTrue(p.isAdopted());
        
        final ClinicalObservation obs = new ClinicalObservation(DUMMY_OBS);
        assertEquals(DUMMY_DISEASE, obs.getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, obs.getAgeRange());
    }
    
    @Test
    public void testGetBmi() {
        final DecimalFormat bmiDecimalFormat = new DecimalFormat("0.0");
        
        p.setWeight(DUMMY_WEIGHT);
        double bmi = DUMMY_WEIGHT.getValue() * 703.0 / (DUMMY_HEIGHT.getValue() * DUMMY_HEIGHT.getValue());
        assertEquals(bmiDecimalFormat.format(bmi), p.getBmi());
        
        p.getWeight().setUnit(WeightUnit.METRIC);
        bmi = DUMMY_WEIGHT.getValue() * 1.0/(DUMMY_HEIGHT.getValue()*DUMMY_HEIGHT.getValue());
        assertEquals(bmiDecimalFormat.format(bmi), p.getBmi());
        
        p.setWeight(new Weight());
        assertNull(p.getBmi());
    }
    
    @Test
    public void testCopyPerson() {
        final Person copiedPerson = new Person(p);
        
        assertEquals(DUMMY_ID, copiedPerson.getUuid());
        assertEquals(DUMMY_NAME, copiedPerson.getName());
        assertEquals(date.toString(), copiedPerson.getDateOfBirth().toString());
        assertEquals(DUMMY_WEIGHT.getValue(), copiedPerson.getWeight().getValue());
        assertEquals(DUMMY_WEIGHT.getUnit(), copiedPerson.getWeight().getUnit());
        assertEquals(DUMMY_GENDER, copiedPerson.getGender());
        assertEquals(DUMMY_DISEASE, copiedPerson.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, copiedPerson.getObservations().get(0).getAgeRange());
        assertEquals(DUMMY_ETHNICITY, copiedPerson.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, copiedPerson.getRaces().get(0));
    }
    
    @Test
    public void testGetAndSetRelatives() {
        final Relative r = new Relative(p);
        p.setRelatives(new ArrayList<Relative>());
        p.getRelatives().add(r);
        
        assertSame(r, p.getRelatives().get(0));
    }
    
    @Test
    public void testRelationshipGraph() {
        p.getRelatives().addAll(RelativeBranchTestUtil.createNuclearRelatives());
        p.setMother(p.getRelativeOfType(RelativeCode.NMTH));
        p.setFather(p.getRelativeOfType(RelativeCode.NFTH));
        
        final Person centeredOnMother = p.recenterOn(p.getRelatives().get(0).getUuid());
        assertEquals(3, centeredOnMother.getRelatives().size());
        final List<Relative> motherSons = centeredOnMother.getRelativesOfType(RelativeCode.SON);
        assertEquals(2, motherSons.size());
        final Relative motherDaughter = centeredOnMother.getRelativeOfType(RelativeCode.DAU);
        assertNotNull(motherDaughter);
        assertEquals("sister", motherDaughter.getName());
        // more mother testing
        final Person centeredOnFather = p.recenterOn(p.getRelatives().get(1).getUuid());
        assertEquals(3, centeredOnFather.getRelatives().size());
        // more father testing
        final Person centeredOnSister = p.recenterOn(p.getRelatives().get(2).getUuid());
        assertEquals(4, centeredOnSister.getRelatives().size());
        assertEquals("mother", centeredOnSister.getRelativeOfType(RelativeCode.NMTH).getName());
        assertEquals("father", centeredOnSister.getRelativeOfType(RelativeCode.NFTH).getName());                
        final Person centeredOnBrother = p.recenterOn(p.getRelatives().get(3).getUuid());
        assertEquals(4, centeredOnBrother.getRelatives().size());
        assertEquals("mother", centeredOnBrother.getRelativeOfType(RelativeCode.NMTH).getName());
        assertEquals("father", centeredOnBrother.getRelativeOfType(RelativeCode.NFTH).getName());
        assertEquals("Name", centeredOnBrother.getRelativeOfType(RelativeCode.NBRO).getName());
        assertEquals("sister", centeredOnBrother.getRelativeOfType(RelativeCode.NSIS).getName());
    }
    
    @Test
    public void testRelationshipGraph2() {
        p.getRelatives().addAll(RelativeBranchTestUtil.createSiblingsAndHalfSiblingsAndKids());        
        p.getRelatives().addAll(RelativeBranchTestUtil.createAuntsUnclesCousins());
        p.getRelatives().addAll(RelativeBranchTestUtil.createGrandsDeadGramps());
        p.getRelatives().addAll(RelativeBranchTestUtil.createChildrenAndGrandkids());
        p.setMother(p.getRelativeOfType(RelativeCode.NMTH));
        p.setFather(p.getRelativeOfType(RelativeCode.NFTH));
        
        final Person centeredOnMother = p.recenterOn(p.getRelatives().get(0).getUuid());
        assertRelativesMatch(centeredOnMother, Arrays.asList(createRelative("mgrmth", RelativeCode.NMTH), 
                createRelative("mgrfth", RelativeCode.NFTH),
                createRelative("maunt1", RelativeCode.NSIS),
                createRelative("maunt2", RelativeCode.NSIS),
                createRelative("muncle1", RelativeCode.NBRO),
                createRelative("muncle2", RelativeCode.NBRO),
                createRelative("m2-kid1", RelativeCode.NEPHEW),
                createRelative("m2-kid2", RelativeCode.NEPHEW),
                createRelative("Name", RelativeCode.SON),
                createRelative("sister", RelativeCode.DAU),
                createRelative("hsis1", RelativeCode.DAU),
                createRelative("hsis1-kid1", RelativeCode.GRNSON),
                createRelative("s1-kid1", RelativeCode.GRNDAU),
                createRelative("s1-kid2", RelativeCode.GRNDAU),
                createRelative("s1-kid3", RelativeCode.GRNSON),
                createRelative("b1-kid", RelativeCode.GRNSON),
                createRelative("brother", RelativeCode.SON),
                createRelative("hbro1", RelativeCode.SON),
                createRelative("son", RelativeCode.GRNSON),
                createRelative("dau1", RelativeCode.GRNDAU),
                createRelative("dau2", RelativeCode.GRNDAU)));
        assertEquals(centeredOnMother.getRelativeByName("mgrmth"), centeredOnMother.getMother());
        assertEquals(centeredOnMother.getRelativeByName("mgrfth"), centeredOnMother.getFather());
        // test that grandfather is dead
        final Relative mg = centeredOnMother.getRelativeByName("mgrfth");
        assertEquals(mg.getLivingStatus(), "NO");

        assertEquals(centeredOnMother.getRelativeByName("muncle2"), centeredOnMother.getRelativeByName("m2-kid1")
                .getFather());
        assertEquals(centeredOnMother.getRelativeByName("muncle2"), centeredOnMother.getRelativeByName("m2-kid2")
                .getFather());
        assertEquals(centeredOnMother.getRelativeByName("hsis1"), centeredOnMother.getRelativeByName("hsis1-kid1")
                .getMother());
        assertEquals(centeredOnMother.getRelativeByName("sister"), centeredOnMother.getRelativeByName("s1-kid1")
                .getMother());
        assertEquals(centeredOnMother.getRelativeByName("sister"), centeredOnMother.getRelativeByName("s1-kid2")
                .getMother());
        assertEquals(centeredOnMother.getRelativeByName("sister"), centeredOnMother.getRelativeByName("s1-kid3")
                .getMother());
        assertEquals(centeredOnMother.getRelativeByName("brother"), centeredOnMother.getRelativeByName("b1-kid")
                .getFather());
        
        final Person centeredOnSister = p.recenterOn(p.getRelatives().get(2).getUuid());
        assertRelativesMatch(centeredOnSister, Arrays.asList(createRelative("mgrmth", RelativeCode.MGRMTH), 
                createRelative("mgrfth", RelativeCode.MGRFTH),
                createRelative("pgrfth", RelativeCode.PGRFTH),
                createRelative("pgrmth", RelativeCode.PGRMTH),
                createRelative("father", RelativeCode.NFTH),
                createRelative("mother", RelativeCode.NMTH),
                createRelative("maunt1", RelativeCode.MAUNT),
                createRelative("maunt2", RelativeCode.MAUNT),
                createRelative("muncle1", RelativeCode.MUNCLE),
                createRelative("muncle2", RelativeCode.MUNCLE),
                createRelative("m2-kid1", RelativeCode.MCOUSN),
                createRelative("m2-kid2", RelativeCode.MCOUSN),
                createRelative("paunt1", RelativeCode.PAUNT),
                createRelative("paunt2", RelativeCode.PAUNT),
                createRelative("paunt3", RelativeCode.PAUNT),
                createRelative("puncle1", RelativeCode.PUNCLE),
                createRelative("puncle2", RelativeCode.PUNCLE),
                createRelative("puncle3", RelativeCode.PUNCLE),
                createRelative("p1-kid1", RelativeCode.PCOUSN),
                createRelative("p1-kid2", RelativeCode.PCOUSN),
                createRelative("p2-kid1", RelativeCode.PCOUSN),
                createRelative("p2-kid2", RelativeCode.PCOUSN),
                createRelative("p2-kid3", RelativeCode.PCOUSN),
                createRelative("p3-kid1", RelativeCode.PCOUSN),
                createRelative("Name", RelativeCode.NBRO),
                createRelative("hsis1", RelativeCode.HSIS),
                createRelative("hsis1-kid1", RelativeCode.NEPHEW),
                createRelative("hsis2", RelativeCode.HSIS),
                createRelative("hbro2", RelativeCode.HBRO),
                createRelative("hbro2-kid1", RelativeCode.NEPHEW),
                createRelative("s1-kid1", RelativeCode.DAU),
                createRelative("s1-kid2", RelativeCode.DAU),
                createRelative("s1-kid3", RelativeCode.SON),
                createRelative("b1-kid", RelativeCode.NEPHEW),
                createRelative("brother", RelativeCode.NBRO),
                createRelative("hbro1", RelativeCode.HBRO),
                createRelative("son", RelativeCode.NEPHEW),
                createRelative("dau1", RelativeCode.NIECE),
                createRelative("dau2", RelativeCode.NIECE)));        
        assertEquals(centeredOnSister.getRelativeByName("mother"), centeredOnSister.getMother());
        assertEquals(centeredOnSister.getRelativeByName("father"), centeredOnSister.getFather());
        assertEquals(centeredOnSister.getRelativeByName("muncle2"), centeredOnSister.getRelativeByName("m2-kid1")
                .getFather());
        assertEquals(centeredOnSister.getRelativeByName("muncle2"), centeredOnSister.getRelativeByName("m2-kid2")
                .getFather());
        assertEquals(centeredOnSister.getRelativeByName("paunt1"), centeredOnSister.getRelativeByName("p1-kid1")
                .getMother());
        assertEquals(centeredOnSister.getRelativeByName("paunt1"), centeredOnSister.getRelativeByName("p1-kid2")
                .getMother());
        assertEquals(centeredOnSister.getRelativeByName("paunt2"), centeredOnSister.getRelativeByName("p2-kid1")
                .getMother());
        assertEquals(centeredOnSister.getRelativeByName("paunt2"), centeredOnSister.getRelativeByName("p2-kid2")
                .getMother());
        assertEquals(centeredOnSister.getRelativeByName("paunt2"), centeredOnSister.getRelativeByName("p2-kid3")
                .getMother());
        assertEquals(centeredOnSister.getRelativeByName("paunt3"), centeredOnSister.getRelativeByName("p3-kid1")
                .getMother());
        assertEquals(centeredOnSister.getRelativeByName("hsis1"), centeredOnSister.getRelativeByName("hsis1-kid1")
                .getMother());
        assertEquals(centeredOnSister.getRelativeByName("hbro2"), centeredOnSister.getRelativeByName("hbro2-kid1")
                .getFather());
        assertEquals(centeredOnSister.getRelativeByName("brother"), centeredOnSister.getRelativeByName("b1-kid")
                .getFather());
        assertEquals(centeredOnSister.getRelativeByName("mother"), centeredOnSister.getRelativeByName("hsis1")
                .getMother());
        assertEquals(centeredOnSister.getRelativeByName("father"), centeredOnSister.getRelativeByName("hsis2")
                .getFather());
        assertEquals(centeredOnSister.getRelativeByName("mother"), centeredOnSister.getRelativeByName("hbro1")
                .getMother());
        assertEquals(centeredOnSister.getRelativeByName("father"), centeredOnSister.getRelativeByName("hbro2")
                .getFather());
        assertEquals(centeredOnSister.getRelativeByName("Name"), centeredOnSister.getRelativeByName("son")
                .getFather());
        assertEquals(centeredOnSister.getRelativeByName("Name"), centeredOnSister.getRelativeByName("dau1")
                .getFather());
        assertEquals(centeredOnSister.getRelativeByName("Name"), centeredOnSister.getRelativeByName("dau2")
                .getFather());
        
        final Person centeredOnPaunt = p.recenterOn(p.getRelatives().get(14).getUuid());
        assertRelativesMatch(centeredOnPaunt, Arrays.asList(createRelative("pgrmth", RelativeCode.NMTH), 
                createRelative("pgrfth", RelativeCode.NFTH),
                createRelative("father", RelativeCode.NBRO),
                createRelative("paunt2", RelativeCode.NSIS),
                createRelative("paunt3", RelativeCode.NSIS),
                createRelative("puncle1", RelativeCode.NBRO),
                createRelative("puncle2", RelativeCode.NBRO),
                createRelative("puncle3", RelativeCode.NBRO),
                createRelative("p1-kid1", RelativeCode.DAU),
                createRelative("p1-kid2", RelativeCode.SON),
                createRelative("p2-kid1", RelativeCode.NIECE),
                createRelative("p2-kid2", RelativeCode.NEPHEW),
                createRelative("p2-kid3", RelativeCode.NIECE),
                createRelative("p3-kid1", RelativeCode.NIECE),
                createRelative("Name", RelativeCode.NEPHEW),
                createRelative("hsis2", RelativeCode.NIECE),
                createRelative("hbro2", RelativeCode.NEPHEW),
                createRelative("sister", RelativeCode.NIECE),
                createRelative("brother", RelativeCode.NEPHEW)));     
        assertEquals(centeredOnPaunt.getRelativeByName("pgrmth"), centeredOnPaunt.getMother());
        assertEquals(centeredOnPaunt.getRelativeByName("pgrfth"), centeredOnPaunt.getFather());
        assertEquals(null, centeredOnPaunt.getRelativeByName("p1-kid1")
                .getMother());
        assertEquals(null, centeredOnPaunt.getRelativeByName("p1-kid2")
                .getMother());
        assertEquals(centeredOnPaunt.getRelativeByName("paunt2"), centeredOnPaunt.getRelativeByName("p2-kid1")
                .getMother());
        assertEquals(centeredOnPaunt.getRelativeByName("paunt2"), centeredOnPaunt.getRelativeByName("p2-kid2")
                .getMother());
        assertEquals(centeredOnPaunt.getRelativeByName("paunt2"), centeredOnPaunt.getRelativeByName("p2-kid3")
                .getMother());
        assertEquals(centeredOnPaunt.getRelativeByName("paunt3"), centeredOnPaunt.getRelativeByName("p3-kid1")
                .getMother());
        assertEquals(centeredOnPaunt.getRelativeByName("father"), centeredOnPaunt.getRelativeByName("hsis2")
                .getFather());
        assertEquals(centeredOnPaunt.getRelativeByName("father"), centeredOnPaunt.getRelativeByName("hbro2")
                .getFather());
        assertEquals(centeredOnPaunt.getRelativeByName("father"), centeredOnPaunt.getRelativeByName("sister")
                .getFather());
        assertEquals(centeredOnPaunt.getRelativeByName("father"), centeredOnPaunt.getRelativeByName("brother")
                .getFather());
        
        final Person centeredOnPgrandpa = p.recenterOn(p.getRelatives().get(35).getUuid());
        assertRelativesMatch(centeredOnPgrandpa, Arrays.asList(
                createRelative("father", RelativeCode.SON),
                createRelative("paunt1", RelativeCode.DAU),
                createRelative("paunt2", RelativeCode.DAU),
                createRelative("paunt3", RelativeCode.DAU),
                createRelative("puncle1", RelativeCode.SON),
                createRelative("puncle2", RelativeCode.SON),
                createRelative("puncle3", RelativeCode.SON),
                createRelative("p1-kid1", RelativeCode.GRNDAU),
                createRelative("p1-kid2", RelativeCode.GRNSON),
                createRelative("p2-kid1", RelativeCode.GRNDAU),
                createRelative("p2-kid2", RelativeCode.GRNSON),
                createRelative("p2-kid3", RelativeCode.GRNDAU),
                createRelative("p3-kid1", RelativeCode.GRNDAU),
                createRelative("Name", RelativeCode.GRNSON),
                createRelative("hsis2", RelativeCode.GRNDAU),
                createRelative("hbro2", RelativeCode.GRNSON),
                createRelative("sister", RelativeCode.GRNDAU),
                createRelative("brother", RelativeCode.GRNSON)));                
        assertEquals(centeredOnPgrandpa.getRelativeByName("paunt1"), centeredOnPgrandpa.getRelativeByName("p1-kid1")
                .getMother());
        assertEquals(centeredOnPgrandpa.getRelativeByName("paunt1"), centeredOnPgrandpa.getRelativeByName("p1-kid2")
                .getMother());
        assertEquals(centeredOnPgrandpa.getRelativeByName("paunt2"), centeredOnPgrandpa.getRelativeByName("p2-kid1")
                .getMother());
        assertEquals(centeredOnPgrandpa.getRelativeByName("paunt2"), centeredOnPgrandpa.getRelativeByName("p2-kid2")
                .getMother());
        assertEquals(centeredOnPgrandpa.getRelativeByName("paunt2"), centeredOnPgrandpa.getRelativeByName("p2-kid3")
                .getMother());
        assertEquals(centeredOnPgrandpa.getRelativeByName("paunt3"), centeredOnPgrandpa.getRelativeByName("p3-kid1")
                .getMother());
        assertEquals(centeredOnPgrandpa.getRelativeByName("father"), centeredOnPgrandpa.getRelativeByName("hsis2")
                .getFather());
        assertEquals(centeredOnPgrandpa.getRelativeByName("father"), centeredOnPgrandpa.getRelativeByName("hbro2")
                .getFather());
        assertEquals(centeredOnPgrandpa.getRelativeByName("father"), centeredOnPgrandpa.getRelativeByName("sister")
                .getFather());
        assertEquals(centeredOnPgrandpa.getRelativeByName("father"), centeredOnPgrandpa.getRelativeByName("brother")
                .getFather());
        assertEquals(centeredOnPgrandpa.getRelativeByName("father"), centeredOnPgrandpa.getRelativeByName("Name")
                .getFather());
        
        
        final Person centeredOnPcuz = p.recenterOn(p.getRelatives().get(15).getUuid());
        assertRelativesMatch(centeredOnPcuz, Arrays.asList(createRelative("pgrmth", RelativeCode.MGRMTH), 
                createRelative("pgrfth", RelativeCode.MGRFTH),
                createRelative("father", RelativeCode.MUNCLE),
                createRelative("paunt1", RelativeCode.NMTH),
                createRelative("paunt2", RelativeCode.MAUNT),
                createRelative("paunt3", RelativeCode.MAUNT),
                createRelative("puncle1", RelativeCode.MUNCLE),
                createRelative("puncle2", RelativeCode.MUNCLE),
                createRelative("puncle3", RelativeCode.MUNCLE),
                createRelative("p1-kid2", RelativeCode.NBRO),
                createRelative("p2-kid1", RelativeCode.MCOUSN),
                createRelative("p2-kid2", RelativeCode.MCOUSN),
                createRelative("p2-kid3", RelativeCode.MCOUSN),
                createRelative("p3-kid1", RelativeCode.MCOUSN),
                createRelative("Name", RelativeCode.MCOUSN),
                createRelative("hsis2", RelativeCode.MCOUSN),
                createRelative("hbro2", RelativeCode.MCOUSN),
                createRelative("sister", RelativeCode.MCOUSN),
                createRelative("brother", RelativeCode.MCOUSN)));     
        assertEquals(centeredOnPcuz.getRelativeByName("paunt1"), centeredOnPcuz.getMother());
        assertEquals(centeredOnPcuz.getRelativeByName("paunt2"), centeredOnPcuz.getRelativeByName("p2-kid1")
                .getMother());
        assertEquals(centeredOnPcuz.getRelativeByName("paunt2"), centeredOnPcuz.getRelativeByName("p2-kid2")
                .getMother());
        assertEquals(centeredOnPcuz.getRelativeByName("paunt2"), centeredOnPcuz.getRelativeByName("p2-kid3")
                .getMother());
        assertEquals(centeredOnPcuz.getRelativeByName("paunt3"), centeredOnPcuz.getRelativeByName("p3-kid1")
                .getMother());
        assertEquals(centeredOnPcuz.getRelativeByName("father"), centeredOnPcuz.getRelativeByName("hsis2")
                .getFather());
        assertEquals(centeredOnPcuz.getRelativeByName("father"), centeredOnPcuz.getRelativeByName("hbro2")
                .getFather());
        assertEquals(centeredOnPcuz.getRelativeByName("father"), centeredOnPcuz.getRelativeByName("sister")
                .getFather());
        assertEquals(centeredOnPcuz.getRelativeByName("father"), centeredOnPcuz.getRelativeByName("brother")
                .getFather());
        assertEquals(centeredOnPcuz.getRelativeByName("father"), centeredOnPcuz.getRelativeByName("Name")
                .getFather());

        final Person centeredOnHalfSis = p.recenterOn(p.getRelatives().get(8).getUuid());
        assertRelativesMatch(centeredOnHalfSis, Arrays.asList(createRelative("mgrmth", RelativeCode.MGRMTH), 
                createRelative("mgrfth", RelativeCode.MGRFTH),
                createRelative("mother", RelativeCode.NMTH),
                createRelative("maunt1", RelativeCode.MAUNT),
                createRelative("maunt2", RelativeCode.MAUNT),
                createRelative("muncle1", RelativeCode.MUNCLE),
                createRelative("muncle2", RelativeCode.MUNCLE),
                createRelative("m2-kid1", RelativeCode.MCOUSN),
                createRelative("m2-kid2", RelativeCode.MCOUSN),
                createRelative("Name", RelativeCode.HBRO),
                createRelative("hsis1-kid1", RelativeCode.SON),
                createRelative("s1-kid1", RelativeCode.NIECE),
                createRelative("s1-kid2", RelativeCode.NIECE),
                createRelative("s1-kid3", RelativeCode.NEPHEW),
                createRelative("b1-kid", RelativeCode.NEPHEW),
                createRelative("brother", RelativeCode.HBRO),
                createRelative("sister", RelativeCode.HSIS),
                createRelative("hbro1", RelativeCode.NBRO),
                createRelative("son", RelativeCode.NEPHEW),
                createRelative("dau1", RelativeCode.NIECE),
                createRelative("dau2", RelativeCode.NIECE)));        
        assertEquals(centeredOnHalfSis.getRelativeByName("mother"), centeredOnHalfSis.getMother());
        assertEquals(centeredOnHalfSis.getRelativeByName("muncle2"), centeredOnHalfSis.getRelativeByName("m2-kid1")
                .getFather());
        assertEquals(centeredOnHalfSis.getRelativeByName("muncle2"), centeredOnHalfSis.getRelativeByName("m2-kid2")
                .getFather());
        assertEquals(centeredOnHalfSis.getRelativeByName("brother"), centeredOnHalfSis.getRelativeByName("b1-kid")
                .getFather());
        assertEquals(centeredOnHalfSis.getRelativeByName("mother"), centeredOnHalfSis.getRelativeByName("sister")
                .getMother());
        assertEquals(centeredOnHalfSis.getRelativeByName("mother"), centeredOnHalfSis.getRelativeByName("brother")
                .getMother());
        assertEquals(centeredOnHalfSis.getRelativeByName("mother"), centeredOnHalfSis.getRelativeByName("Name")
                .getMother());
        assertEquals(centeredOnHalfSis.getRelativeByName("Name"), centeredOnHalfSis.getRelativeByName("son")
                .getFather());
        assertEquals(centeredOnHalfSis.getRelativeByName("Name"), centeredOnHalfSis.getRelativeByName("dau1")
                .getFather());
        assertEquals(centeredOnHalfSis.getRelativeByName("Name"), centeredOnHalfSis.getRelativeByName("dau2")
                .getFather());
        assertEquals(centeredOnHalfSis.getRelativeByName("sister"), centeredOnHalfSis.getRelativeByName("s1-kid1")
                .getMother());
        assertEquals(centeredOnHalfSis.getRelativeByName("sister"), centeredOnHalfSis.getRelativeByName("s1-kid2")
                .getMother());
        assertEquals(centeredOnHalfSis.getRelativeByName("sister"), centeredOnHalfSis.getRelativeByName("s1-kid3")
                .getMother());

        final Person centeredOnSon = p.recenterOn(p.getRelatives().get(36).getUuid());
        assertRelativesMatch(centeredOnSon, Arrays.asList(createRelative("father", RelativeCode.PGRFTH),
                createRelative("mother", RelativeCode.PGRMTH),
                createRelative("Name", RelativeCode.NFTH),
                createRelative("hsis1", RelativeCode.PAUNT),
                createRelative("hsis1-kid1", RelativeCode.PCOUSN),
                createRelative("hsis2", RelativeCode.PAUNT),
                createRelative("hbro2", RelativeCode.PUNCLE),
                createRelative("hbro2-kid1", RelativeCode.PCOUSN),
                createRelative("sister", RelativeCode.PAUNT),
                createRelative("s1-kid1", RelativeCode.PCOUSN),
                createRelative("s1-kid2", RelativeCode.PCOUSN),
                createRelative("s1-kid3", RelativeCode.PCOUSN),
                createRelative("b1-kid", RelativeCode.PCOUSN),
                createRelative("brother", RelativeCode.PUNCLE),
                createRelative("hbro1", RelativeCode.PUNCLE),
                createRelative("dau1", RelativeCode.NSIS),
                createRelative("dau2", RelativeCode.NSIS),
                createRelative("son-son", RelativeCode.SON),
                createRelative("son-dau", RelativeCode.DAU),
                createRelative("dau1-son", RelativeCode.NEPHEW),
                createRelative("dau2-dau", RelativeCode.NIECE)));        
        assertEquals(centeredOnSon.getRelativeByName("Name"), centeredOnSon.getFather());
        assertEquals(centeredOnSon.getRelativeByName("brother"), centeredOnSon.getRelativeByName("b1-kid")
                .getFather());
        assertEquals(centeredOnSon.getRelativeByName("sister"), centeredOnSon.getRelativeByName("s1-kid1")
                .getMother());
        assertEquals(centeredOnSon.getRelativeByName("sister"), centeredOnSon.getRelativeByName("s1-kid2")
                .getMother());
        assertEquals(centeredOnSon.getRelativeByName("sister"), centeredOnSon.getRelativeByName("s1-kid3")
                .getMother());
        assertEquals(centeredOnSon.getRelativeByName("hsis1"), centeredOnSon.getRelativeByName("hsis1-kid1")
                .getMother());
        assertEquals(centeredOnSon.getRelativeByName("dau1"), centeredOnSon.getRelativeByName("dau1-son")
                .getMother());
        assertEquals(centeredOnSon.getRelativeByName("dau2"), centeredOnSon.getRelativeByName("dau2-dau")
                .getMother());
        
        final Person centeredOnGrandson = p.recenterOn(p.getRelatives().get(37).getUuid());
        assertRelativesMatch(centeredOnGrandson, Arrays.asList(
                createRelative("Name", RelativeCode.PGRFTH),
                createRelative("dau1", RelativeCode.PAUNT),
                createRelative("dau2", RelativeCode.PAUNT),
                createRelative("son", RelativeCode.NFTH),
                createRelative("son-dau", RelativeCode.NSIS),
                createRelative("dau1-son", RelativeCode.PCOUSN),
                createRelative("dau2-dau", RelativeCode.PCOUSN)));        
        assertEquals(centeredOnGrandson.getRelativeByName("son"), centeredOnGrandson.getFather());
        assertEquals(centeredOnGrandson.getRelativeByName("dau1"), centeredOnGrandson.getRelativeByName("dau1-son")
                .getMother());
        assertEquals(centeredOnGrandson.getRelativeByName("dau2"), centeredOnGrandson.getRelativeByName("dau2-dau")
                .getMother());

        final Person centeredOnNephew = p.recenterOn(p.getRelatives().get(3).getUuid());
        assertRelativesMatch(centeredOnNephew, Arrays.asList(createRelative("father", RelativeCode.MGRFTH),
                createRelative("mother", RelativeCode.MGRMTH),
                createRelative("sister", RelativeCode.NMTH),
                createRelative("Name", RelativeCode.MUNCLE),
                createRelative("hsis1", RelativeCode.MAUNT),
                createRelative("hsis1-kid1", RelativeCode.MCOUSN),
                createRelative("hsis2", RelativeCode.MAUNT),
                createRelative("hbro2", RelativeCode.MUNCLE),
                createRelative("hbro2-kid1", RelativeCode.MCOUSN),
                createRelative("s1-kid2", RelativeCode.NSIS),
                createRelative("s1-kid3", RelativeCode.NBRO),
                createRelative("b1-kid", RelativeCode.MCOUSN),
                createRelative("brother", RelativeCode.MUNCLE),
                createRelative("hbro1", RelativeCode.MUNCLE),
                createRelative("dau1", RelativeCode.MCOUSN),
                createRelative("dau2", RelativeCode.MCOUSN),
                createRelative("son", RelativeCode.MCOUSN)));        
        assertEquals(centeredOnNephew.getRelativeByName("sister"), centeredOnNephew.getMother());
        assertEquals(centeredOnNephew.getRelativeByName("brother"), centeredOnNephew.getRelativeByName("b1-kid")
                .getFather());
        assertEquals(centeredOnNephew.getRelativeByName("hsis1"), centeredOnNephew.getRelativeByName("hsis1-kid1")
                .getMother());
        assertEquals(centeredOnNephew.getRelativeByName("hbro2"), centeredOnNephew.getRelativeByName("hbro2-kid1")
                .getFather());
        assertEquals(centeredOnNephew.getRelativeByName("Name"), centeredOnNephew.getRelativeByName("dau1")
                .getFather());
        assertEquals(centeredOnNephew.getRelativeByName("Name"), centeredOnNephew.getRelativeByName("dau2")
                .getFather());
        assertEquals(centeredOnNephew.getRelativeByName("Name"), centeredOnNephew.getRelativeByName("son")
                .getFather());

        final Person centeredOnHalfNephew = p.recenterOn(p.getRelatives().get(9).getUuid());
        assertRelativesMatch(centeredOnHalfNephew, Arrays.asList(
                createRelative("mother", RelativeCode.MGRMTH),
                createRelative("sister", RelativeCode.MAUNT),
                createRelative("Name", RelativeCode.MUNCLE),
                createRelative("hsis1", RelativeCode.NMTH),
                createRelative("s1-kid1", RelativeCode.MCOUSN),
                createRelative("s1-kid2", RelativeCode.MCOUSN),
                createRelative("s1-kid3", RelativeCode.MCOUSN),
                createRelative("b1-kid", RelativeCode.MCOUSN),
                createRelative("brother", RelativeCode.MUNCLE),
                createRelative("hbro1", RelativeCode.MUNCLE),
                createRelative("dau1", RelativeCode.MCOUSN),
                createRelative("dau2", RelativeCode.MCOUSN),
                createRelative("son", RelativeCode.MCOUSN)));        
        assertEquals(centeredOnHalfNephew.getRelativeByName("hsis1"), centeredOnHalfNephew.getMother());
        assertEquals(centeredOnHalfNephew.getRelativeByName("brother"), centeredOnHalfNephew.getRelativeByName("b1-kid")
                .getFather());
        assertEquals(centeredOnHalfNephew.getRelativeByName("sister"), centeredOnHalfNephew.getRelativeByName("s1-kid1")
                .getMother());
        assertEquals(centeredOnHalfNephew.getRelativeByName("sister"), centeredOnHalfNephew.getRelativeByName("s1-kid2")
                .getMother());
        assertEquals(centeredOnHalfNephew.getRelativeByName("sister"), centeredOnHalfNephew.getRelativeByName("s1-kid3")
                .getMother());
        assertEquals(centeredOnHalfNephew.getRelativeByName("Name"), centeredOnHalfNephew.getRelativeByName("dau1")
                .getFather());
        assertEquals(centeredOnHalfNephew.getRelativeByName("Name"), centeredOnHalfNephew.getRelativeByName("dau2")
                .getFather());
        assertEquals(centeredOnHalfNephew.getRelativeByName("Name"), centeredOnHalfNephew.getRelativeByName("son")
                .getFather());

    }

    private void assertRelativesMatch(final Person p, final List<Relative> expRelatives) {
        final List<Relative> relatives = p.getRelatives();
        assertEquals(expRelatives.size(), relatives.size());
        for (final Relative expRelative : expRelatives) {
            assertRelativeInList(expRelative, relatives);
        }
    }
    
    private void assertRelativeInList(final Relative expRelative, final List<Relative> relatives) {
        for (final Relative relative : relatives) {
            if (expRelative.getName().equals(relative.getName()) && expRelative.getCodeEnum() == relative.getCodeEnum()) {
                return;
            }
        }
        fail("Relative " + expRelative + " not in list");
    }
    
    private Relative createRelative(final String name, final RelativeCode relCode) {
        final Relative rel = new Relative();
        rel.setName(name);
        rel.setCodeEnum(relCode);
        return rel;
    }

    @Test
    public void testGetRaceIds() {
        DUMMY_RACE.setId(1L);
        assertEquals(p.getRaceIds().get(0), Long.valueOf(1L));
    }
    
    @Test
    public void testGetEthnicityIds() {
        DUMMY_ETHNICITY.setId(1L);
        assertEquals(p.getEthnicityIds().get(0), Long.valueOf(1L));
    }
    
    
    
    @Test
    public void testGetMultipleBirthIndicator() {
        assertNull(HL7ConversionUtils.createMultipleBirthIndicator(p));
        
        p.setTwinStatus(TwinStatus.FRATERNAL);
        assertEquals(TRUE_STRING, HL7ConversionUtils.createMultipleBirthIndicator(p));
        
        p.setTwinStatus(TwinStatus.NO);
        assertNull(HL7ConversionUtils.createMultipleBirthIndicator(p));
    }
    
    @Test
    public void testFamilyContainsUnmatchedCondition() {
        final Person p = new Person();
        p.getRelatives().add(new Relative());
        assertFalse(p.isFamilyContainsUnmatchedCondition());
        
        p.setUnmatchedCondition(true);
        assertTrue(p.isFamilyContainsUnmatchedCondition());
        
        p.setUnmatchedCondition(false);
        p.getRelatives().get(0).setUnmatchedCondition(true);
        assertTrue(p.isFamilyContainsUnmatchedCondition());
    }
    
    @Test
    public void testIsCompletedForm() {
        final Person p = new Person();
        assertFalse(p.isCompletedForm());
        p.setDateOfBirth(new Date());
        assertTrue(p.isCompletedForm());
    }
    
    @Test
    public void testUnrelatedRelatives(){
        final Person p = new Person();

        final Relative relatedRelative = new Relative();
        relatedRelative.setCodeEnum(RelativeCode.NMTH);
        p.getRelatives().add(relatedRelative);

        final Relative unrelatedRelative = new Relative();
        unrelatedRelative.setCodeEnum(RelativeCode.NMTH);
        p.getUnrelatedRelatives().add(unrelatedRelative);

        Assert.assertNotNull(p.getRelative(relatedRelative.getUuid()));
        Assert.assertNotNull(p.getRelative(unrelatedRelative.getUuid()));
        
        Assert.assertNotNull(p.getRelativeOfType(RelativeCode.NMTH));
        Assert.assertNotNull(p.getRelativeOfType(RelativeCode.NMTH));
    }
    
    @Test
    public void testGenerateUuid() {
        final Person p = new Person();
        final UUID uuid = p.getUuid();
        p.generateUuid();
        final UUID regenUuid = p.getUuid();
        Assert.assertNotSame("Regenerated UUID should be different from the original.", uuid, regenUuid);
        Assert.assertFalse(uuid.equals(regenUuid));
    }
}

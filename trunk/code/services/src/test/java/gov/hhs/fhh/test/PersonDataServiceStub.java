/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.test;

import gov.hhs.fhh.data.AbstractCodeable;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Ethnicity;
import gov.hhs.fhh.data.Race;
import gov.hhs.fhh.service.PersonServiceLocal;

import java.util.ArrayList;
import java.util.List;

import com.fiveamsolutions.nci.commons.data.persistent.PersistentObject;

/**
 * @author bpickeral
 *
 */
public class PersonDataServiceStub implements PersonServiceLocal {
    
    private static final String CODE_SYS = "CODE_SYS";

    /**
     * {@inheritDoc}
     */
    public List<Race> getRaces() {
        List<Race> races = new ArrayList<Race>();
        for (int i = 0; i < 3; i++) {
            races.add((Race) setupAC(i, new Race()));
        }
        return races;
    }

    /**
     * {@inheritDoc}
     */
    public List<Race> getAsianRaces() {
        List<Race> races = new ArrayList<Race>();
        for (int i = 0; i < 3; i++) {
            races.add((Race) setupAC(i, new Race()));
        }
        return races;
    }

    /**
     * {@inheritDoc}
     */
    public List<Race> getHawaiianRaces() {
        List<Race> races = new ArrayList<Race>();
        for (int i = 0; i < 3; i++) {
            races.add((Race) setupAC(i, new Race()));
        }
        return races;
    }

    /**
     * {@inheritDoc}
     */
    public List<Ethnicity> getEthnicities() {
        List<Ethnicity> ethnicities = new ArrayList<Ethnicity>();
        for (int i = 0; i < 3; i++) {
            ethnicities.add((Ethnicity) setupAC(i, new Ethnicity()));
        }
        return ethnicities;
    }

    /**
     * {@inheritDoc}
     */
    public List<Ethnicity> getHispanicEthnicities() {
        List<Ethnicity> ethnicities = new ArrayList<Ethnicity>();
        for (int i = 0; i < 3; i++) {
            ethnicities.add((Ethnicity) setupAC(i, new Ethnicity()));
        }
        return ethnicities;
    }

    /**
     * {@inheritDoc}
     */
    public List<Disease> getDiseases() {
        List<Disease> diseases = new ArrayList<Disease>();
        for (int i = 0; i < 3; i++) {
            diseases.add((Disease) setupAC(i, new Disease()));
        }
        return diseases;
    }

    /**
     * {@inheritDoc}
     */
    public List<Disease> getDiseaseSubTypes(Long disease) {
        List<Disease> diseases = new ArrayList<Disease>();
        for (int i = 0; i < 3; i++) {
            diseases.add((Disease) setupAC(i, new Disease()));
        }
        return diseases;
    }

    /**
     * {@inheritDoc}
     */
    public List<Disease> getAllDiseases() {
        List<Disease> diseases = new ArrayList<Disease>();
        for (int i = 0; i < 20; i++) {
            diseases.add((Disease) setupAC(i, new Disease()));
        }
        return diseases;
    }

    /**
     * @param i gender code
     */
    private AbstractCodeable setupAC(int i, AbstractCodeable codeable, String codeSystemName) {
        codeable.setCode("Code" + i);
        codeable.setCodeSystemName(codeSystemName);
        codeable.addDisplayString("en", "DisplayName" + i, null);
        codeable.setId((long) i);
        return codeable;
    }
    
    private AbstractCodeable setupAC(int i, AbstractCodeable codeable) {
        return setupAC(i, codeable, CODE_SYS + i);
    }

    /**
     * {@inheritDoc}
     */
    public <T extends PersistentObject> T getPersistentObject(Class<T> toClass, Long id) {
        return null;
    }
    
    /**
     * {@inheritDoc}
     */
    public List<Disease> getDiseaseByName(String diseaseName) {
        List<Disease> diseases = new ArrayList<Disease>();
        if (diseaseName.equals("one match")) {
            diseases.add(createDisease("one match", "one match"));
        } else if (diseaseName.equals("no match")) {
            // no diseases added
        } else if (diseaseName.equals("Unknown Disease")) {
            diseases.add(createDisease("Unknown Disease", "Unknown Disease"));
        } else if (diseaseName.equals("Enfermedad desconocida")) {
            diseases.add(createDisease("Enfermedad desconocida", "Enfermedad desconocida"));
        } else if (diseaseName.equals("Unknown Cancer")) {
            Disease disease = new Disease();
            disease.setId(78L);
            disease.setDisplayName("Unknown Cancer");
            disease.setAppDisplay("Unknown Cancer");
            disease.setOriginalText("Unknown Cancer");
            diseases.add(disease);
        } else {
            diseases.add(createDisease("diseaseX (More options)", "diseaseX (More options)"));
            diseases.add(createDisease("diseaseX subtype1", "diseaseX subtype1"));
            diseases.add(createDisease("diseaseX subtype2", "subtype2"));
        }
        
        return diseases;
    }
    
    private Disease createDisease(String appDisplay, String displayName) {
        Disease d = new Disease();
        d.setId(0L);
        d.setAppDisplay(appDisplay);
        d.setDisplayName(displayName);
        return d;
    }

    public List<Ethnicity> getEthnicityByCodeAndCodeSystem(String code, String codeSystem) {
        List<Ethnicity> retval = new ArrayList<Ethnicity>();
        List<Ethnicity> ethnicities = new ArrayList<Ethnicity>();
        for (int i = 0; i < 3; i++) {
            ethnicities.add((Ethnicity) setupAC(i, new Ethnicity(), "HL7"));
        }

        for (Ethnicity ethnicity : ethnicities) {
            if (ethnicity.getCode().equals(code) && ethnicity.getCodeSystemName().equals(codeSystem)) {
                retval.add(ethnicity);
            }
        }

        return retval;
    }

    public List<Race> getRaceByCodeAndCodeSystem(String code, String codeSystem) {
        List<Race> retval = new ArrayList<Race>();
        List<Race> races = new ArrayList<Race>();
        for (int i = 0; i < 3; i++) {
            races.add((Race) setupAC(i, new Race(), "HL7"));
        }

        for (Race race : races) {
            if (race.getCode().equals(code) && race.getCodeSystemName().equals(codeSystem)) {
                retval.add(race);
            }
        }

        return retval;
    }
}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.integration.selenium;

import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.service.HealthVaultLocal;
import gov.hhs.fhh.service.MessagingGatewayLocal;
import gov.hhs.fhh.service.PersonInfo;
import gov.hhs.fhh.service.TestServiceLocator;
import gov.hhs.fhh.service.locator.FhhRegistry;
import gov.hhs.fhh.service.locator.ServiceLocator;
import gov.hhs.fhh.test.AbstractHibernateTestCase;
import gov.hhs.fhh.test.TestProperties;
import gov.hhs.fhh.web.util.RelativeRelatedTestUtil;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map.Entry;

import javax.xml.xpath.XPathExpressionException;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.SerializationUtils;
import org.apache.log4j.Logger;

import com.fiveamsolutions.hl7.model.mfhp.Gender;

/**
 * @author smatyas
 * 
 */
public class LoginToMSHVTest extends AbstractSeleniumTest {
    private static final Logger LOG = Logger.getLogger(LoginToMSHVTest.class);
    private String userAuthToken;
    private ServiceLocator locator;
    private HealthVaultLocal hv;
    private PersonInfo personInfo;

    AbstractHibernateTestCase tc = new AbstractHibernateTestCase();
    
    /*
     * (non-Javadoc)
     * 
     * @see gov.hhs.fhh.web.integration.selenium.AbstractSeleniumTest#setUp()
     */
    @Override
    public void setUp() throws Exception {
        super.setUp();
        tc.setUp();
        //to avoid using the default MockServiceLocator class
        FhhRegistry.getInstance().setServiceLocator(new TestServiceLocator());
        tc.initDbIfNeeded();
        
        locator = FhhRegistry.getInstance().getServiceLocator();

        selenium.open("/redirect.jsp");
        selenium.waitForPageToLoad("30000");
        loginToMshv();
        userAuthToken = selenium.getText("wctoken");
        assertTrue(userAuthToken.length() > 0);
        LOG.debug("#!# IMPORTANT !#! userAuthToken=" + userAuthToken);
        personInfo = new MyPersonInfo();
        hv = locator.getHealthVault();
        hv.getPersonInfo(userAuthToken, personInfo);
        hv.getFullName(personInfo);
        hv.removeFamilyHistories(personInfo);
    }
    
    @Override
    public void tearDown() throws Exception {
        LOG.debug("Purging any family histories from MSHV.");
        hv.removeFamilyHistories(personInfo);
        tc.tearDown();
        super.tearDown();
    }

    public void testSavePedigree() throws Exception {
        Person self = RelativeRelatedTestUtil.assignGender(RelativeRelatedTestUtil.createPersonName("Jorge Salavaro"),
                "male");
        List<Relative> rels = new ArrayList<Relative>();
        makeFamily(rels);
        self.setRelatives(rels);

        MessagingGatewayLocal mg = locator.getMessageGatewayService();
        mg.saveToHealthVault(personInfo, self);
    }

    public void testLoadingAllXmlFiles() throws FileNotFoundException {
        HealthVaultLocal hv = locator.getHealthVault();

        File directory = new File(TestProperties.getServicesBaseDir() + "/src/test/resources/");
        LOG.debug(directory);
        Collection<File> listFiles = FileUtils.listFiles(directory, new String[] { "ser" }, false);
        List<Entry<File,Exception>> errors = new ArrayList<Entry<File, Exception>>();
        for (File file : listFiles) {
            LOG.debug("Attempting to process: " + file);
            Person input = (Person) SerializationUtils.deserialize(new FileInputStream(file));
            try {
                tc.setUp();
                deserializeAndSaveAndLoadFromHealthVault(input, file);
            } catch (Exception e) {
                LOG.debug("Error while processing file : " + file);
                LOG.debug(e.fillInStackTrace());
                errors.add(new MapEntry(file,e));
            } finally {
                LOG.debug("Cleaning up after processing for file : " + file);
                hv.removeFamilyHistories(personInfo);
                tc.tearDown();
            }
        }
        if (!errors.isEmpty()) {
            for (Entry<File,Exception> exception : errors) {
                LOG.debug("Error while processing file : " + exception.getKey());
                LOG.error(exception.getValue());
            }
            fail("Failed due to processing errors.");
        }
    }

    private void deserializeAndSaveAndLoadFromHealthVault(Person input, File file) throws XPathExpressionException, IOException {
        MessagingGatewayLocal mg = locator.getMessageGatewayService();
        LOG.debug("Saving to MSHV: " + file);
        mg.saveToHealthVault(personInfo, input);

        LOG.debug("Loading from MSHV: " + file);
        Person actual = mg.loadFromHealthVault(personInfo);
        LOG.debug("Skipping verification for file : " + file);
//        verifyPerson(input, actual);
    }

    private void verifyPerson(Person expected, Person actual) {
        assertEquals(expected.getBmi(), actual.getBmi());
        assertEquals(expected.getMyAge(), actual.getMyAge());
        assertEquals(expected.getName(), actual.getName());
        assertEquals(expected.getDateOfBirth().toGMTString(), actual.getDateOfBirth().toGMTString());
        assertEquals(expected.getDescendants().size(), actual.getDescendants().size());
        assertEquals(expected.getEthnicities().size(), actual.getEthnicities().size());
        assertEquals(expected.getEthnicityIds().size(), actual.getEthnicityIds().size());
        assertEquals(expected.getFather().getUuid(), actual.getFather().getUuid());
        assertEquals(expected.getGender(), actual.getGender());
        assertEquals(expected.getHeight().getValue(), actual.getHeight().getValue());
        assertEquals(expected.getHeight().getUnit().getDisplayName(), actual.getHeight().getUnit().getDisplayName());
        assertEquals(expected.getHeight().getUnit().getResourceKey(), actual.getHeight().getUnit().getResourceKey());
        assertEquals(expected.getUuid(), actual.getUuid());
        assertEquals(expected.getMother().getUuid(), actual.getMother().getUuid());
        assertEquals(expected.getObservations().size(), actual.getObservations().size());
        assertEquals(expected.getRaceIds().size(), actual.getRaceIds().size());
        assertEquals(expected.getRaces().size(), actual.getRaces().size());
        assertEquals(expected.getRelatives().size(), actual.getRelatives().size());
        assertEquals(expected.getTwinStatus().getCode(), actual.getTwinStatus().getCode());
        assertEquals(expected.getWeight().getUnit().getDisplayName(), actual.getWeight().getUnit().getDisplayName());
        assertEquals(expected.getWeight().getUnit().getResourceKey(), actual.getWeight().getUnit().getResourceKey());
        assertEquals(expected.getWeight().getValue(), actual.getWeight().getValue());
    }

//    public void testLoadPedigree() throws Exception {
//        MessagingGatewayBean mg = new MessagingGatewayBean();
//        Person person = mg.loadFromHealthVault(personInfo);
//        assertNotNull(person);
//    }

    private void makeFamily(List<Relative> rels) {
        rels.add(maternalGrandFather());
        rels.add(maternalGrandMother());
        rels.add(paternalGrandFather());
        rels.add(paternalGrandMother());
        rels.add(father());
        rels.add(mother());
    }

    /**
     * @return
     */
    private Relative maternalGrandMother() {
        Relative rel = RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.MGRMTH);
        rel.setName("Mom Mom");
        rel.setGender(Gender.FEMALE);
        return rel;
    }

    /**
     * @return
     */
    private Relative maternalGrandFather() {
        Relative rel = RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.MGRFTH);
        rel.setGender(Gender.MALE);
        rel.setName("Mom Dad");
        return rel;
    }

    /**
     * @return
     */
    private Relative paternalGrandMother() {
        Relative rel = RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.PGRMTH);
        rel.setGender(Gender.FEMALE);
        rel.setName("Dad Mom");
        return rel;
    }

    /**
     * @return
     */
    private Relative paternalGrandFather() {
        Relative rel = RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.PGRFTH);
        rel.setGender(Gender.MALE);
        rel.setName("Dad dad");
        return rel;
    }

    /**
     * @return
     */
    private Relative father() {
        Relative rel = RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.NFTH);
        rel.setGender(Gender.MALE);
        rel.setName("Dad");
        return rel;
    }

    /**
     * @return
     */
    private Relative mother() {
        Relative rel = RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.NMTH);
        rel.setGender(Gender.FEMALE);
        rel.setName("Mom");
        return rel;
    }

    private void loginToMshv() throws InterruptedException {
        // Try to enter email address if site doesn't recognize user.
        if (selenium.isTextPresent("Enter e-mail address")) {
            String emailField = "ctl00_cphMainBody_txtEmail";
            String continueButtonId = "ctl00_cphMainBody_btnContinue";
            waitForElementById(emailField);
            waitForElementById(continueButtonId);
            selenium.type(emailField, TestProperties.getHVUserEmail());
            clickAndWait("id=" + continueButtonId);
        }
        waitForElementById("i0116");
        selenium.type("i0116", TestProperties.getHVUserEmail());
        selenium.type("i0118", TestProperties.getHVUserPW());
        clickAndWait("i0011");
        Thread.sleep(7000);
    }

    /**
     * 
     * @author bhumphrey
     * 
     */
    static class MyPersonInfo implements PersonInfo {

        private String userAuthToken;
        private String recordName;
        private String recordId;
        private String personName;
        private String personId;
        private String sessionToken;

        public void setUserAuthToken(String userAuthToken) {
            this.userAuthToken = userAuthToken;

        }

        public void setRecordName(String recordName) {
            this.recordName = recordName;

        }

        public void setRecordId(String recordId) {
            this.recordId = recordId;

        }

        public void setPersonName(String personName) {
            this.personName = personName;

        }

        public void setPersonId(String personId) {
            this.personId = personId;

        }

        /**
         * @return the userAuthToken
         */
        public String getUserAuthToken() {
            return userAuthToken;
        }

        /**
         * @return the recordName
         */
        public String getRecordName() {
            return recordName;
        }

        /**
         * @return the recordId
         */
        public String getRecordId() {
            return recordId;
        }

        /**
         * @return the personName
         */
        public String getPersonName() {
            return personName;
        }

        /**
         * @return the personId
         */
        public String getPersonId() {
            return personId;
        }

        public String getSessionToken() {
            return sessionToken;
        }

        public void setSessionToken(String sessionToken) {
            this.sessionToken = sessionToken;

        }

        public String getDisplayName() {
            // TODO Auto-generated method stub
            return null;
        }

        public void setDisplayName(String fullName) {
            // TODO Auto-generated method stub
            
        }

    };

    public static class MapEntry implements Entry<File, Exception> {

        private final File key;
        private Exception value;

        public MapEntry(File key, Exception value) {
            this.key = key;
            this.value = value;
            
        }
        /* (non-Javadoc)
         * @see java.util.Map.Entry#getKey()
         */
        public File getKey() {
            return key;
        }

        /* (non-Javadoc)
         * @see java.util.Map.Entry#getValue()
         */
        public Exception getValue() {
            return value;
        }

        /* (non-Javadoc)
         * @see java.util.Map.Entry#setValue(java.lang.Object)
         */
        public Exception setValue(Exception value) {
            this.value = value;
            return value;
        }
        
    }
}

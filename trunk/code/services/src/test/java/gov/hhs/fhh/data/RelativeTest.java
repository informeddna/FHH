/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import gov.hhs.fhh.model.mfhp.LivingStatus;
import gov.hhs.fhh.model.mfhp.castor.RelationshipHolderNode;
import gov.hhs.fhh.model.mfhp.castor.RelativeCodeNode;
import gov.hhs.fhh.test.AbstractHibernateTestCase;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.junit.Before;
import org.junit.Test;

import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;
import com.fiveamsolutions.hl7.model.age.AgeRangeFieldContainer;
import com.fiveamsolutions.hl7.model.age.DataEstimatedAgeNode;
import com.fiveamsolutions.hl7.model.age.DeceasedEstimatedAgeNode;
import com.fiveamsolutions.hl7.model.mfhp.Gender;
import com.fiveamsolutions.hl7.model.mfhp.TwinStatus;
import com.fiveamsolutions.hl7.model.mfhp.Weight;
import com.fiveamsolutions.hl7.model.mfhp.WeightUnit;

/**
 * @author bpickeral
 *
 */
public class RelativeTest extends AbstractHibernateTestCase {
    private static final boolean TRUE = true;
    private final String TRUE_STRING = "true";
    private final Weight DUMMY_WEIGHT = new Weight(180, WeightUnit.US);
    private final String DUMMY_NAME = "Name";
    private final UUID DUMMY_ID = UUID.randomUUID();
    private final Gender DUMMY_GENDER = Gender.MALE;
    private final DiseaseBean DUMMY_DISEASE = new DiseaseBean();
    private final Ethnicity DUMMY_ETHNICITY = new Ethnicity();
    private final Race DUMMY_RACE = new Race();
    private final ClinicalObservation DUMMY_OBS =  new ClinicalObservation();
    private final Relative DUMMY_RELATIVE = new Relative();
    private final Person DUMMY_PERSON = new Person();
    private final Date date = new Date();
    private final RelativeCode DUMMY_CODE = RelativeCode.MCOUSN;
    private final String DUMMY_YEAR = "1960";
    private final String DEAD_STATUS = LivingStatus.NO.toString();
    private final String ALIVE_STATUS = LivingStatus.YES.toString();
    private final AgeRangeEnum DUMMY_AGE = AgeRangeEnum.FIFTIES;
    
    
    @Before
    public void before() {
        DUMMY_RELATIVE.setName(DUMMY_NAME);
        DUMMY_RELATIVE.setWeight(DUMMY_WEIGHT);
        DUMMY_RELATIVE.setUuid(DUMMY_ID);
        DUMMY_RELATIVE.setGender(DUMMY_GENDER);
        DUMMY_OBS.setDisease(DUMMY_DISEASE);
        DUMMY_OBS.setAgeRange(AgeRangeEnum.THIRTIES);
        DUMMY_RELATIVE.getObservations().add(DUMMY_OBS);
        DUMMY_RELATIVE.setEthnicities(new ArrayList<Ethnicity>());
        DUMMY_RELATIVE.getEthnicities().add(DUMMY_ETHNICITY);
        DUMMY_RELATIVE.setRaces(new ArrayList<Race>());
        DUMMY_RELATIVE.getRaces().add(DUMMY_RACE);
        DUMMY_RELATIVE.setCodeEnum(DUMMY_CODE);
        DUMMY_RELATIVE.setAgeAtDeath(DUMMY_AGE);
        DUMMY_RELATIVE.setCauseOfDeath(DUMMY_DISEASE);
        DUMMY_RELATIVE.setLivingStatus(DEAD_STATUS);
        DUMMY_RELATIVE.setBirthTime(DUMMY_YEAR);
        DUMMY_RELATIVE.setEstimatedAgeRange(AgeRangeEnum.FIFTIES);
    }
    
    @Test
    public void testCreateRelative() {
        assertEquals(DUMMY_ID, DUMMY_RELATIVE.getUuid());
        assertEquals(DUMMY_NAME, DUMMY_RELATIVE.getName());
        assertEquals(DUMMY_WEIGHT, DUMMY_RELATIVE.getWeight());
        assertEquals(DUMMY_GENDER, DUMMY_RELATIVE.getGender());
        assertEquals(DUMMY_DISEASE, DUMMY_RELATIVE.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, DUMMY_RELATIVE.getObservations().get(0).getAgeRange());
        assertEquals(DUMMY_ETHNICITY, DUMMY_RELATIVE.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, DUMMY_RELATIVE.getRaces().get(0));
        assertEquals(DUMMY_CODE, DUMMY_RELATIVE.getCodeEnum());
        assertEquals(DUMMY_AGE, DUMMY_RELATIVE.getAgeAtDeath());
        assertEquals(DUMMY_DISEASE, DUMMY_RELATIVE.getCauseOfDeath());
        assertEquals(DEAD_STATUS, DUMMY_RELATIVE.getLivingStatus());
        assertEquals(DUMMY_YEAR, DUMMY_RELATIVE.getBirthTime());
        assertEquals(AgeRangeEnum.FIFTIES, DUMMY_RELATIVE.getEstimatedAgeRange());
        
        ClinicalObservation obs = new ClinicalObservation(DUMMY_OBS);
        assertEquals(DUMMY_DISEASE, obs.getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, obs.getAgeRange());
    }
    
    @Test
    public void testCopyRelative() {
        Relative copiedRelative = new Relative(DUMMY_RELATIVE);
        
        assertEquals(DUMMY_ID, copiedRelative.getUuid());
        assertEquals(DUMMY_NAME, copiedRelative.getName());
        assertEquals(DUMMY_WEIGHT.getValue(), copiedRelative.getWeight().getValue());
        assertEquals(DUMMY_WEIGHT.getUnit(), copiedRelative.getWeight().getUnit());
        assertEquals(DUMMY_GENDER, copiedRelative.getGender());
        assertEquals(DUMMY_DISEASE, copiedRelative.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, copiedRelative.getObservations().get(0).getAgeRange());
        assertEquals(DUMMY_ETHNICITY, copiedRelative.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, copiedRelative.getRaces().get(0));
        assertEquals(DUMMY_CODE, copiedRelative.getCodeEnum());
        assertEquals(DUMMY_AGE, copiedRelative.getAgeAtDeath());
        assertEquals(DUMMY_DISEASE, copiedRelative.getCauseOfDeath());
        assertEquals(DEAD_STATUS, copiedRelative.getLivingStatus());
        assertEquals(DUMMY_YEAR, copiedRelative.getBirthTime());
        assertEquals(AgeRangeEnum.FIFTIES, copiedRelative.getEstimatedAgeRange());
    }
    
    @Test
    public void testCopyPerson() {
        DUMMY_PERSON.setName(DUMMY_NAME);
        DUMMY_PERSON.setDateOfBirth(date);
        DUMMY_PERSON.setWeight(DUMMY_WEIGHT);
        DUMMY_PERSON.setUuid(DUMMY_ID);
        DUMMY_PERSON.setGender(DUMMY_GENDER);
        DUMMY_OBS.setDisease(DUMMY_DISEASE);
        DUMMY_OBS.setAgeRange(AgeRangeEnum.THIRTIES);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(DUMMY_OBS);
        DUMMY_PERSON.setObservations(observations);
        DUMMY_PERSON.setEthnicities(new ArrayList<Ethnicity>());
        DUMMY_PERSON.getEthnicities().add(DUMMY_ETHNICITY);
        DUMMY_PERSON.setRaces(new ArrayList<Race>());
        DUMMY_PERSON.getRaces().add(DUMMY_RACE);
        
        Relative copiedPerson = new Relative(DUMMY_PERSON);
        
        assertEquals(DUMMY_ID, copiedPerson.getUuid());
        assertEquals(DUMMY_NAME, copiedPerson.getName());
        assertEquals(date.toString(), copiedPerson.getDateOfBirth().toString());
        assertEquals(DUMMY_WEIGHT.getValue(), copiedPerson.getWeight().getValue());
        assertEquals(DUMMY_WEIGHT.getUnit(), copiedPerson.getWeight().getUnit());
        assertEquals(DUMMY_GENDER, copiedPerson.getGender());
        assertEquals(DUMMY_DISEASE, copiedPerson.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, copiedPerson.getObservations().get(0).getAgeRange());
        assertEquals(DUMMY_ETHNICITY, copiedPerson.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, copiedPerson.getRaces().get(0));
    }
    
    @Test
    public void testGetAndSetRelationshipHolderNodeDeceased() {
        RelationshipHolderNode node = new RelationshipHolderNode();
        assertNotNull(node);
        
        // Test for deceased relative
        DUMMY_RELATIVE.setBirthTime(null);
        DUMMY_RELATIVE.setEstimatedAgeRange(null);
        node = DUMMY_RELATIVE.getRelationshipHolderNode();
        assertEquals(DUMMY_ID, node.getUuid());
        assertEquals(DUMMY_NAME, node.getName());
        assertEquals(DUMMY_WEIGHT.getValue(), node.getWeight().getValue());
        assertEquals(DUMMY_WEIGHT.getUnit(), node.getWeight().getUnit());
        assertEquals(DUMMY_GENDER, node.getGender());
        assertEquals(DUMMY_ETHNICITY, node.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, node.getRaces().get(0));
        assertEquals(DUMMY_CODE, node.getCodeEnum());
        assertEquals(DUMMY_AGE, node.getAgeAtDeath());
        assertEquals(DUMMY_DISEASE, node.getCauseOfDeath());
        assertEquals(DEAD_STATUS, node.getLivingStatus());
        assertNull(node.getBirthTime());
        assertEquals(DUMMY_DISEASE, node.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, node.getObservations().get(0).getAgeRange());
        
        // Check that cause of death Observation was added when
        // getRelationshipHolderNode is called
        assertEquals(DUMMY_DISEASE, node.getObservations().get(1).getDisease());
        assertEquals(TRUE, node.getObservations().get(1).isCauseOfDeath());
        
        DeceasedEstimatedAgeNode deceasedNode = node.getDeceasedEstimatedAgeNode();
        AgeRangeFieldContainer handler = deceasedNode.getAgeRangeHandler();
        assertEquals(DUMMY_AGE.getUnit(), handler.getUnit());
        assertEquals(DUMMY_AGE.getLowValue(), handler.getLowValue());
        assertEquals(DUMMY_AGE.getHighValue(), handler.getHighValue());
        
        Relative rel = new Relative();
        rel.setRelationshipHolderNode(node);
        assertEquals(DUMMY_ID, rel.getUuid());
        assertEquals(DUMMY_NAME, rel.getName());
        assertEquals(DUMMY_WEIGHT.getValue(), rel.getWeight().getValue());
        assertEquals(DUMMY_WEIGHT.getUnit(), rel.getWeight().getUnit());
        assertEquals(DUMMY_WEIGHT.getUnit(), rel.getWeight().getUnit());
        assertEquals(DUMMY_WEIGHT.getValue(), rel.getWeight().getValue());
        assertEquals(DUMMY_GENDER, rel.getGender());
        assertEquals(DUMMY_DISEASE, rel.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, rel.getObservations().get(0).getAgeRange());
        assertEquals(DUMMY_ETHNICITY, rel.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, rel.getRaces().get(0));
        assertEquals(DUMMY_AGE, rel.getAgeAtDeath());
        assertEquals(DUMMY_DISEASE, rel.getCauseOfDeath());
        assertEquals(DEAD_STATUS, rel.getLivingStatus());
        assertNull(rel.getBirthTime());
        assertEquals(DUMMY_DISEASE, rel.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, rel.getObservations().get(0).getAgeRange());
        // Check that cause of death Observation is not in the relative observations
        assertEquals(1, rel.getObservations().size());
        
        // Test get and set DeceasedEstimatedAgeNode for type unknown
        DUMMY_RELATIVE.setAgeAtDeath(AgeRangeEnum.UNKNOWN);
        node = DUMMY_RELATIVE.getRelationshipHolderNode();
        deceasedNode = node.getDeceasedEstimatedAgeNode();
        assertEquals(AgeRangeEnum.UNKNOWN.getOriginalText(), deceasedNode.getCodeNode().getOriginalText());
        
        rel.setRelationshipHolderNode(node);
        assertEquals(AgeRangeEnum.UNKNOWN, rel.getAgeAtDeath());
        
        // Test get and set DeceasedEstimatedAgeNode for type pre-birth
        DUMMY_RELATIVE.setAgeAtDeath(AgeRangeEnum.PREBIRTH);
        node = DUMMY_RELATIVE.getRelationshipHolderNode();
        deceasedNode = node.getDeceasedEstimatedAgeNode();
        assertEquals(AgeRangeEnum.PREBIRTH.getOriginalText(), deceasedNode.getCodeNode().getOriginalText());
        
        rel.setRelationshipHolderNode(node);
        assertEquals(AgeRangeEnum.PREBIRTH, rel.getAgeAtDeath());
    }
    
    @Test
    public void testGetAndSetRelationshipHolderNodeLiving() {
        RelationshipHolderNode node = new RelationshipHolderNode();
        assertNotNull(node);
        
        // Test for living relative
        DUMMY_RELATIVE.setAgeAtDeath(null);
        DUMMY_RELATIVE.setCauseOfDeath(null);
        DUMMY_RELATIVE.setLivingStatus(ALIVE_STATUS);
        DUMMY_RELATIVE.setEstimatedAgeRange(AgeRangeEnum.FIFTIES);
        node = DUMMY_RELATIVE.getRelationshipHolderNode();
        assertEquals(DUMMY_ID, node.getUuid());
        assertEquals(DUMMY_NAME, node.getName());
        assertEquals(DUMMY_WEIGHT.getValue(), node.getWeight().getValue());
        assertEquals(DUMMY_WEIGHT.getUnit(), node.getWeight().getUnit());
        assertEquals(DUMMY_GENDER, node.getGender());
        assertEquals(DUMMY_ETHNICITY, node.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, node.getRaces().get(0));
        assertEquals(DUMMY_CODE, node.getCodeEnum());
        assertEquals(ALIVE_STATUS, node.getLivingStatus());
        assertEquals(DUMMY_YEAR, node.getBirthTime());
        assertEquals(DUMMY_DISEASE, node.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, node.getObservations().get(0).getAgeRange());
        assertEquals(AgeRangeEnum.FIFTIES, node.getEstimatedAgeRange());
        
        // Check that cause of death Observation was not added
        // getRelationshipHolderNode is called
        assertEquals(1, node.getObservations().size());
        
        // No Deceased node should be added for a living relative
        assertNull(node.getDeceasedEstimatedAgeNode());
        
        Relative rel = new Relative();
        rel.setRelationshipHolderNode(node);
        assertEquals(DUMMY_ID, rel.getUuid());
        assertEquals(DUMMY_NAME, rel.getName());
        assertEquals(DUMMY_WEIGHT.getValue(), rel.getWeight().getValue());
        assertEquals(DUMMY_WEIGHT.getUnit(), rel.getWeight().getUnit());
        assertEquals(DUMMY_GENDER, rel.getGender());
        assertEquals(DUMMY_DISEASE, rel.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, rel.getObservations().get(0).getAgeRange());
        assertEquals(DUMMY_ETHNICITY, rel.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, rel.getRaces().get(0));
        assertEquals(ALIVE_STATUS, rel.getLivingStatus());
        assertEquals(DUMMY_YEAR, rel.getBirthTime());
        assertEquals(DUMMY_DISEASE, rel.getObservations().get(0).getDisease());
        assertEquals(AgeRangeEnum.THIRTIES, rel.getObservations().get(0).getAgeRange());
        assertEquals(AgeRangeEnum.FIFTIES, rel.getEstimatedAgeRange());
    }
    
    @Test
    public void testGetAndSetRelationshipHolderNodeParents() {
        RelationshipHolderNode node = new RelationshipHolderNode();
        
        // Test get RelationshipHolderNode for mother
        Relative mother = new Relative();
        mother.setUuid(DUMMY_ID);
        DUMMY_RELATIVE.setMother(mother);
        node = DUMMY_RELATIVE.getRelationshipHolderNode();
        assertEquals(DUMMY_ID, node.getParentNodes().get(0).getUuid());
        assertEquals(RelativeCode.NMTH.toString(), node.getParentNodes().get(0).getCode());
        
        // Test set RelationshipHolderNode for mother
        Relative rel = new Relative();
        rel.setRelationshipHolderNode(node);
        assertEquals(DUMMY_ID, rel.getMotherId());
        
        // Reset mother
        DUMMY_RELATIVE.setMother(null);
        
        // Test get RelationshipHolderNode for father
        Relative father = new Relative();
        father.setUuid(DUMMY_ID);
        DUMMY_RELATIVE.setFather(father);
        node = DUMMY_RELATIVE.getRelationshipHolderNode();
        assertEquals(DUMMY_ID, node.getParentNodes().get(0).getUuid());
        assertEquals(RelativeCode.NFTH.toString(), node.getParentNodes().get(0).getCode());
        
        // Test set RelationshipHolderNode for mother
        rel = new Relative();
        rel.setRelationshipHolderNode(node);
        assertEquals(DUMMY_ID, rel.getFatherId());
    }
    
    @Test
    public void testSetDeceasedEstimatedAgeNode() {
        DeceasedEstimatedAgeNode deceasedNode = new DeceasedEstimatedAgeNode();
        assertNotNull(deceasedNode);
        
        RelationshipHolderNode node = new RelationshipHolderNode();
        deceasedNode = new DeceasedEstimatedAgeNode(DUMMY_AGE.getUnit(), 
                DUMMY_AGE.getLowValue(), DUMMY_AGE.getHighValue());
        node.setDeceasedEstimatedAgeNode(deceasedNode);
        assertEquals(DUMMY_AGE, node.getAgeAtDeath());
    }
    
    @Test
    public void testGetRelativeCodeNode() {
        RelativeCodeNode node = new RelativeCodeNode();
        assertNotNull(node);
        
        node = DUMMY_RELATIVE.getRelativeCodeNode();
        assertEquals(DUMMY_RELATIVE.getCode(), node.getCode());
        assertEquals(DUMMY_CODE.getDisplayValue(), node.getDisplayName());
        assertEquals(RelativeCodeNode.CODE_SYSTEM_NAME, node.getCodeSystemName());
        
        node.setCode(RelativeCode.GRMTH.toString());
        assertEquals(RelativeCode.GRMTH.toString(), node.getCode());
        
        DUMMY_RELATIVE.setRelativeCodeNode(node);
        assertEquals(RelativeCode.GRMTH.toString(), DUMMY_RELATIVE.getCode());
    }
    
    @Test
    public void testGetDeceasedIndicator() {
        DUMMY_RELATIVE.setLivingStatus(null);
        assertNull(DUMMY_RELATIVE.getDeceasedIndicator());
        
        DUMMY_RELATIVE.setLivingStatus(LivingStatus.NO.toString());
        assertEquals(TRUE_STRING, DUMMY_RELATIVE.getDeceasedIndicator());
        
        DUMMY_RELATIVE.setLivingStatus(LivingStatus.YES.toString());
        assertNull(DUMMY_RELATIVE.getDeceasedIndicator());
        
        DUMMY_RELATIVE.setLivingStatus(LivingStatus.UNKNOWN.toString());
        assertEquals(LivingStatus.UNKNOWN.toString(), DUMMY_RELATIVE.getDeceasedIndicator());
        
        DUMMY_RELATIVE.setDeceasedIndicator(LivingStatus.UNKNOWN.toString());
        assertEquals(LivingStatus.UNKNOWN.toString(), DUMMY_RELATIVE.getDeceasedIndicator());
    }
    
    @Test
    public void testSetDeceasedIndicator() {
        DUMMY_RELATIVE.setLivingStatus(null);
        DUMMY_RELATIVE.setDeceasedIndicator("");
        assertNull(DUMMY_RELATIVE.getLivingStatus());
        
        DUMMY_RELATIVE.setDeceasedIndicator(TRUE_STRING);
        assertEquals(LivingStatus.NO.toString(), DUMMY_RELATIVE.getLivingStatus());
    }
    
    @Test
    public void testIsRemovable() {
        DUMMY_RELATIVE.setCodeEnum(RelativeCode.PGRFTH);
        assertFalse(DUMMY_RELATIVE.isRemovable());
        
        DUMMY_RELATIVE.setCodeEnum(RelativeCode.PGRMTH);
        assertFalse(DUMMY_RELATIVE.isRemovable());
        
        DUMMY_RELATIVE.setCodeEnum(RelativeCode.MGRFTH);
        assertFalse(DUMMY_RELATIVE.isRemovable());
        
        DUMMY_RELATIVE.setCodeEnum(RelativeCode.MGRMTH);
        assertFalse(DUMMY_RELATIVE.isRemovable());
        
        DUMMY_RELATIVE.setCodeEnum(RelativeCode.NFTH);
        assertFalse(DUMMY_RELATIVE.isRemovable());
        
        DUMMY_RELATIVE.setCodeEnum(RelativeCode.NFTH);
        assertFalse(DUMMY_RELATIVE.isRemovable());
        
        DUMMY_RELATIVE.setCodeEnum(RelativeCode.NIECE);
        assertTrue(DUMMY_RELATIVE.isRemovable());
    }
    
    
    @Test
    public void testGetDataEstimatedAgeNode() {
        Relative r = new Relative();
        assertNull(r.getDataEstimatedAgeNode());
        
        r.setEstimatedAgeRange(AgeRangeEnum.FIFTIES);
        assertNotNull(r.getDataEstimatedAgeNode().getAgeRangeHandler().getHighValue(), AgeRangeEnum.FIFTIES.getHighValue());
    }
    
    @Test
    public void testSetDataEstimatedAgeNode() {
        Relative r = new Relative();
        DataEstimatedAgeNode ageNode = new DataEstimatedAgeNode(AgeRangeEnum.FIFTIES.getUnit(), 
                AgeRangeEnum.FIFTIES.getLowValue(), AgeRangeEnum.FIFTIES.getHighValue());
        r.setDataEstimatedAgeNode(ageNode);
        assertEquals(AgeRangeEnum.FIFTIES, r.getEstimatedAgeRange());
    }
    
    @Test
    public void testIsCompletedForm() {
        Relative r = new Relative();
        assertFalse(r.isCompletedForm());

        r.setName("name");
        assertTrue(r.isCompletedForm());
        
        r = new Relative();
        r.setLivingStatus(ALIVE_STATUS);
        assertTrue(r.isCompletedForm());
        
        r = new Relative();
        r.setTwinStatus(TwinStatus.FRATERNAL);
        assertTrue(r.isCompletedForm());
        
        r = new Relative();
        r.getEthnicities().add(DUMMY_ETHNICITY);
        assertTrue(r.isCompletedForm());
        
        r = new Relative();
        r.getRaces().add(DUMMY_RACE);
        assertTrue(r.isCompletedForm());
        
        r = new Relative();
        r.getObservations().add(DUMMY_OBS);
        assertTrue(r.isCompletedForm());
        
        r.setUnmatchedCondition(true);
        assertFalse(r.isCompletedForm());
    }
    
    @Test
    public void testSetCode() {
        Relative relative = new Relative();
        relative.setCode(null);
        assertNull(relative.getCode());
        assertNull(relative.getCodeEnum());
        relative.setCode("junk");
        assertNull(relative.getCode());
        assertNull(relative.getCodeEnum());
        relative.setCode(RelativeCode.AUNT.name().toLowerCase());
        assertEquals(RelativeCode.AUNT.name(), relative.getCode());
        assertEquals(RelativeCode.AUNT, relative.getCodeEnum());
    }
    
    @Test
    public void testSetCodeEnum() {
        Relative relative = new Relative();
        relative.setCodeEnum(null);
        assertNull(relative.getCode());
        assertNull(relative.getCodeEnum());
        relative.setCodeEnum(RelativeCode.AUNT);
        assertEquals(RelativeCode.AUNT, relative.getCodeEnum());
        assertEquals(RelativeCode.AUNT.name(), relative.getCode());
    }
}

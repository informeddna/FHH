/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

import org.apache.commons.collections.set.ListOrderedSet;
import org.junit.Before;
import org.junit.Test;

import gov.hhs.fhh.data.util.AgeRangeFieldHandler;
import gov.hhs.fhh.data.util.DeceasedEstimatedAgeNode;
import gov.hhs.fhh.data.util.RelationshipHolderNode;
import gov.hhs.fhh.data.util.RelativeCodeNode;
import gov.hhs.fhh.test.AbstractHibernateTestCase;

/**
 * @author lpower
 *
 */
public class RelativeReportTest extends AbstractHibernateTestCase {
    private static final boolean TRUE = true;
    private final Weight DUMMY_WEIGHT = new Weight(180, WeightUnit.US);
    private final String DUMMY_NAME = "Name";
    private final Long DUMMY_ID = 1L;
    //private final Disease DUMMY_DISEASE = new Disease();
    private final Ethnicity DUMMY_ETHNICITY = new Ethnicity();
    private final Race DUMMY_RACE = new Race();
    //private final ClinicalObservation DUMMY_OBS =  new ClinicalObservation();
    private final RelativeReport DUMMY_RELATIVE = new RelativeReport();
    private final Date date = new Date();
    private final String DUMMY_CODE = RelativeCode.MCOUSN.toString();
    private final String DUMMY_YEAR = "1960";
    private final String DEAD_STATUS = LivingStatus.NO.toString();
    private final String ALIVE_STATUS = LivingStatus.YES.toString();
    private final AgeRange DUMMY_AGE = AgeRange.FIFTIES;
    
    
    @Before
    public void before() {
        DUMMY_RELATIVE.setName(DUMMY_NAME);
        DUMMY_RELATIVE.setWeight(DUMMY_WEIGHT);
        DUMMY_RELATIVE.setId(DUMMY_ID);
        DUMMY_RELATIVE.setGender(Gender.FEMALE);
        DUMMY_RELATIVE.setEthnicities(new ArrayList<Ethnicity>());
        DUMMY_RELATIVE.getEthnicities().add(DUMMY_ETHNICITY);
        DUMMY_RELATIVE.setRaces(new ArrayList<Race>());
        DUMMY_RELATIVE.getRaces().add(DUMMY_RACE);
        DUMMY_RELATIVE.setCode(DUMMY_CODE);
        DUMMY_RELATIVE.setAgeAtDeath(DUMMY_AGE);
        DUMMY_RELATIVE.setLivingStatus(DEAD_STATUS);
        DUMMY_RELATIVE.setBirthTime(DUMMY_YEAR);
    }
    
    @Test
    public void testCreateRelativeReport() {
        assertEquals(DUMMY_ID, DUMMY_RELATIVE.getId());
        assertEquals(DUMMY_NAME, DUMMY_RELATIVE.getName());
        assertEquals(DUMMY_WEIGHT, DUMMY_RELATIVE.getWeight());
        assertEquals(Gender.FEMALE, DUMMY_RELATIVE.getGender());
        assertEquals(DUMMY_ETHNICITY, DUMMY_RELATIVE.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, DUMMY_RELATIVE.getRaces().get(0));
        assertEquals(DUMMY_CODE, DUMMY_RELATIVE.getCode());
        assertEquals(DUMMY_CODE, DUMMY_RELATIVE.getCodeEnum().toString());
        assertEquals(DUMMY_AGE, DUMMY_RELATIVE.getAgeAtDeath());
        assertEquals(DEAD_STATUS, DUMMY_RELATIVE.getLivingStatus());
        assertEquals(DUMMY_YEAR, DUMMY_RELATIVE.getBirthTime());
    }
/*
        DUMMY_RELATIVE.setCauseOfDeath(DUMMY_DISEASE);

         DUMMY_OBS.setAgeRange(AgeRange.THIRTIES.getResourceKey());
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(DUMMY_OBS);
        DUMMY_RELATIVE.setObservations(observations);
        //assertEquals(DUMMY_DISEASE, DUMMY_RELATIVE.getObservations().get(0).getDisease());
        assertEquals(AgeRange.THIRTIES.getResourceKey(), DUMMY_RELATIVE.getObservations().get(0).getAgeRange());
        assertEquals(DUMMY_DISEASE, DUMMY_RELATIVE.getCauseOfDeath());
        
        ClinicalObservation obs = new ClinicalObservation(DUMMY_OBS);
        assertEquals(DUMMY_DISEASE, obs.getDisease());
        assertEquals(AgeRange.THIRTIES.getResourceKey(), obs.getAgeRange());
    */

    @Test
    public void testCreateRelativeReportFindDiabetes() {
        Disease dis = new Disease();
        dis.setAbbreviation("DIA");
        ClinicalObservation ci = new ClinicalObservation();
        ci.setDisease(dis);
        ci.setAgeRange(AgeRange.THIRTIES);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(ci);
        DUMMY_RELATIVE.setObservations(observations);
        RelativeReport rr = new RelativeReport(DUMMY_RELATIVE);
        ClinicalObservation obs = new ClinicalObservation(ci);
        assertEquals(dis, obs.getDisease());
        assertEquals(AgeRange.THIRTIES, obs.getAgeRange());
        assertEquals(rr.getDiabetes(),observations);
    }

    @Test
    public void testCreateRelativeReportFindHeartDisease() {
        Disease dis = new Disease();
        dis.setAbbreviation("HA");
        ClinicalObservation ci = new ClinicalObservation();
        ci.setDisease(dis);
        ci.setAgeRange(AgeRange.THIRTIES);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(ci);
        DUMMY_RELATIVE.setObservations(observations);
        RelativeReport rr = new RelativeReport(DUMMY_RELATIVE);
        ClinicalObservation obs = new ClinicalObservation(ci);
        assertEquals(dis, obs.getDisease());
        assertEquals(AgeRange.THIRTIES, obs.getAgeRange());
        assertEquals(rr.getHeartDisease(),observations);
    }

    @Test
    public void testCreateRelativeReportFindOtherDisease() {
        Disease dis = new Disease();
        dis.setAbbreviation("MD");
        ClinicalObservation ci = new ClinicalObservation();
        ci.setDisease(dis);
        ci.setAgeRange(AgeRange.THIRTIES);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(ci);
        DUMMY_RELATIVE.setObservations(observations);
        RelativeReport rr = new RelativeReport(DUMMY_RELATIVE);
        ClinicalObservation obs = new ClinicalObservation(ci);
        assertEquals(dis, obs.getDisease());
        assertEquals(AgeRange.THIRTIES, obs.getAgeRange());
        assertEquals(rr.getAdditionalDiseases(),observations);
    }

    @Test
    public void testCreateRelativeReportFindUserEnteredDisease() {
        Disease dis = new Disease();
        dis.setOriginalText("My disease!");
        ClinicalObservation ci = new ClinicalObservation();
        ci.setDisease(dis);
        ci.setAgeRange(AgeRange.THIRTIES);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(ci);
        DUMMY_RELATIVE.setObservations(observations);
        RelativeReport rr = new RelativeReport(DUMMY_RELATIVE);
        ClinicalObservation obs = new ClinicalObservation(ci);
        assertEquals(dis, obs.getDisease());
        assertEquals(AgeRange.THIRTIES, obs.getAgeRange());
        assertEquals(rr.getAdditionalDiseases(),observations);
    }

    @Test
    public void testCreateLegendList() {
        Disease dis = new Disease();
        dis.setOriginalText("My disease!");
        Set<Disease> diseases = new ListOrderedSet();
        diseases.add(dis);
        ClinicalObservation ci = new ClinicalObservation();
        ci.setDisease(dis);
        ci.setAgeRange(AgeRange.THIRTIES);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(ci);
        DUMMY_RELATIVE.setObservations(observations);
        RelativeReport rr = new RelativeReport(DUMMY_RELATIVE);
        ClinicalObservation obs = new ClinicalObservation(ci);
        assertEquals(dis, obs.getDisease());
        assertEquals(AgeRange.THIRTIES, obs.getAgeRange());
        assertEquals(rr.getLegendList(),diseases);
    }

    @Test
    public void testCreateLargeLegendList() {
        Set<Disease> diseases = new ListOrderedSet();
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();

        Disease dis = new Disease();
        dis.setOriginalText("My disease!");
        diseases.add(dis);
        ClinicalObservation ci = new ClinicalObservation();
        ci.setDisease(dis);
        ci.setAgeRange(AgeRange.THIRTIES);
        observations.add(ci);

        Disease dis2 = new Disease();
        dis2.setDisplayName("This disease");
        diseases.add(dis2);
        ClinicalObservation ci2 = new ClinicalObservation();
        ci2.setDisease(dis2);
        ci2.setAgeRange(AgeRange.ADOLESCENCE);
        observations.add(ci2);

        Disease dis3 = new Disease();
        dis3.setDisplayName("This disease");
        diseases.add(dis3);
        ClinicalObservation ci3 = new ClinicalObservation();
        ci3.setDisease(dis3);
        ci3.setAgeRange(AgeRange.ADOLESCENCE);
        observations.add(ci3);

        DUMMY_RELATIVE.setObservations(observations);
        RelativeReport rr = new RelativeReport(DUMMY_RELATIVE);
        
        assertEquals(rr.getLegendList(),diseases);
    }

    /*
    @Test
    public void testCreateRelativeReportFindHeartDisease() {
        DUMMY_DISEASE.setAbbreviation("HA");
        DUMMY_OBS.setAgeRange(AgeRange.THIRTIES);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(DUMMY_OBS);
        DUMMY_RELATIVE.setObservations(observations);
        ClinicalObservation obs = new ClinicalObservation(DUMMY_OBS);
        assertEquals(DUMMY_DISEASE, obs.getDisease());
        assertEquals(AgeRange.THIRTIES, obs.getAgeRange());
        assertEquals(DUMMY_RELATIVE.getHeartDisease(),obs);
    }
    
    @Test
    public void testCreateRelativeReportFindOtherDisease() {
        Disease dis = new Disease();
        dis.setAbbreviation("MD");
        ClinicalObservation ci = new ClinicalObservation();
        ci.setDisease(dis);
        ci.setAgeRange(AgeRange.THIRTIES);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(ci);
        DUMMY_RELATIVE.setObservations(observations);
        ClinicalObservation obs = new ClinicalObservation(ci);
        assertEquals(dis, obs.getDisease());
        assertEquals(AgeRange.THIRTIES, obs.getAgeRange());
        assertEquals(DUMMY_RELATIVE.getAdditionalDiseases(),obs);
    }

    @Test
    public void testCreateRelativeReportFindNonAbbreviationDisease() {
        DUMMY_OBS.setAgeRange(AgeRange.THIRTIES);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(DUMMY_OBS);
        DUMMY_RELATIVE.setObservations(observations);
        ClinicalObservation obs = new ClinicalObservation(DUMMY_OBS);
        assertEquals(DUMMY_DISEASE, obs.getDisease());
        assertEquals(AgeRange.THIRTIES, obs.getAgeRange());
        assertEquals(DUMMY_RELATIVE.getAdditionalDiseases(),obs);
    }

    @Test
    public void testCopyRelativeReport() {
        
        RelativeReport copiedRelative = new RelativeReport(DUMMY_RELATIVE);
        
        assertEquals(DUMMY_ID, copiedRelative.getId());
        assertEquals(DUMMY_NAME, copiedRelative.getName());
        assertEquals(DUMMY_WEIGHT, copiedRelative.getWeight());
        assertEquals(DUMMY_GENDER, copiedRelative.getGender());
        assertEquals(DUMMY_DISEASE, copiedRelative.getObservations().get(0).getDisease());
        assertEquals(AgeRange.THIRTIES, copiedRelative.getObservations().get(0).getAgeRange());
        assertEquals(DUMMY_ETHNICITY, copiedRelative.getEthnicities().get(0));
        assertEquals(DUMMY_RACE, copiedRelative.getRaces().get(0));
        assertEquals(DUMMY_CODE, copiedRelative.getCode());
        assertEquals(DUMMY_AGE, copiedRelative.getAgeAtDeath());
        assertEquals(DUMMY_DISEASE, copiedRelative.getCauseOfDeath());
        assertEquals(DEAD_STATUS, copiedRelative.getLivingStatus());
        assertEquals(DUMMY_YEAR, copiedRelative.getBirthTime()); 
       
    }
    
     */

    
}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.service;

import static org.junit.Assert.assertEquals;
import gov.hhs.fhh.data.BloodClotDiseaseType;
import gov.hhs.fhh.data.CancerDiseaseType;
import gov.hhs.fhh.data.DiabetesDiseaseType;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Ethnicity;
import gov.hhs.fhh.data.GastrointestinalDisorderDiseaseType;
import gov.hhs.fhh.data.HeartDiseaseType;
import gov.hhs.fhh.data.KidneyDiseaseType;
import gov.hhs.fhh.data.LungDiseaseType;
import gov.hhs.fhh.data.PsychologicalDisorderDiseaseType;
import gov.hhs.fhh.data.Race;
import gov.hhs.fhh.test.AbstractHibernateTestCase;
import gov.hhs.fhh.test.util.ServiceTestUtil;

import org.junit.Test;

/**
 * @author Scott Miller
 */
public class GenericServiceBeanTest extends AbstractHibernateTestCase {

    @Test
    public void testCreateAndRetrieveRace() {
        Race c = new Race();
        ServiceTestUtil.create(c);
        Long id = ServiceTestUtil.saveGetId(c);
        ServiceTestUtil.flushAndClear();

        Race retrieved = new GenericServiceBean().getPersistentObject(Race.class, id);
        ServiceTestUtil.verify(id, retrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveRace() {
        Race c = new Race();
        ServiceTestUtil.create(c);
        Race n = new Race(c);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        Race retrieved = new GenericServiceBean().getPersistentObject(Race.class, id);
        ServiceTestUtil.verify(id, retrieved);

    }

    @Test
    public void testCreateAndRetrieveEthnicity() {
        Ethnicity c = new Ethnicity();
        ServiceTestUtil.create(c);
        Long id = ServiceTestUtil.saveGetId(c);
        ServiceTestUtil.flushAndClear();

        Ethnicity retrieved = new GenericServiceBean().getPersistentObject(Ethnicity.class, id);
        ServiceTestUtil.verify(id, retrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveEthnicity() {
        Ethnicity c = new Ethnicity();
        ServiceTestUtil.create(c);
        Ethnicity n = new Ethnicity(c);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        Ethnicity retrieved = new GenericServiceBean().getPersistentObject(Ethnicity.class, id);
        ServiceTestUtil.verify(id, retrieved);

    }

    @Test
    public void testCreateAndRetrieveDisease() {
        Disease c = new Disease();
        ServiceTestUtil.create(c);
        Long id = ServiceTestUtil.saveGetId(c);
        ServiceTestUtil.flushAndClear();

        Disease retrieved = new GenericServiceBean().getPersistentObject(Disease.class, id);
        ServiceTestUtil.verify(id, retrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveDisease() {
        Disease c = new Disease();
        ServiceTestUtil.create(c);
        Disease n = new Disease(c);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        Disease retrieved = new GenericServiceBean().getPersistentObject(Disease.class, id);
        ServiceTestUtil.verify(id, retrieved);

    }

    @Test
    public void testCreateAndRetrieveDiseaseGeneratedAbbreviation() {
        Disease c = new Disease();
        c.setCode("5555555");
        c.setCodeSystemName("CODE_SYS");
        c.addDisplayString("en", "DisplayName", "AppDisplayName");
        Long id = ServiceTestUtil.saveGetId(c);
        ServiceTestUtil.flushAndClear();

        Disease retrieved = new GenericServiceBean().getPersistentObject(Disease.class, id);
        ServiceTestUtil.verify(id, retrieved);
    }

    @Test
    public void testCreateAndRetrieveDiabetesType() {
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        d.setAppDisplay("appDisplay");
        Long dId = ServiceTestUtil.saveGetId(d);
        DiabetesDiseaseType type = new DiabetesDiseaseType();
        type.setParent(d);
        ServiceTestUtil.create(type);
        Long id = ServiceTestUtil.saveGetId(type);
        ServiceTestUtil.flushAndClear();

        DiabetesDiseaseType retrieved = new GenericServiceBean().getPersistentObject(DiabetesDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveDiabetesType() {
        DiabetesDiseaseType type = new DiabetesDiseaseType();
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        type.setParent(d);
        ServiceTestUtil.create(type);
        DiabetesDiseaseType n = new DiabetesDiseaseType(type);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        DiabetesDiseaseType retrieved = new GenericServiceBean().getPersistentObject(DiabetesDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateAndRetrievePsychologicalDisorderDiseaseType() {
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        PsychologicalDisorderDiseaseType type = new PsychologicalDisorderDiseaseType();
        type.setParent(d);
        ServiceTestUtil.create(type);
        Long id = ServiceTestUtil.saveGetId(type);
        ServiceTestUtil.flushAndClear();

        PsychologicalDisorderDiseaseType retrieved = new GenericServiceBean().getPersistentObject(PsychologicalDisorderDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrievePsychologicalDisorderDiseaseType() {
        PsychologicalDisorderDiseaseType type = new PsychologicalDisorderDiseaseType();
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        type.setParent(d);
        ServiceTestUtil.create(type);
        PsychologicalDisorderDiseaseType n = new PsychologicalDisorderDiseaseType(type);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        PsychologicalDisorderDiseaseType retrieved = new GenericServiceBean().getPersistentObject(PsychologicalDisorderDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }


    @Test
    public void testCreateAndRetrieveLungDiseaseType() {
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        LungDiseaseType type = new LungDiseaseType();
        type.setParent(d);
        ServiceTestUtil.create(type);
        Long id = ServiceTestUtil.saveGetId(type);
        ServiceTestUtil.flushAndClear();

        LungDiseaseType retrieved = new GenericServiceBean().getPersistentObject(LungDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveLungDiseaseType() {
        LungDiseaseType type = new LungDiseaseType();
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        type.setParent(d);
        ServiceTestUtil.create(type);
        LungDiseaseType n = new LungDiseaseType(type);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        LungDiseaseType retrieved = new GenericServiceBean().getPersistentObject(LungDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }


    @Test
    public void testCreateAndRetrieveKidneyDiseaseType() {
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        KidneyDiseaseType type = new KidneyDiseaseType();
        type.setParent(d);
        ServiceTestUtil.create(type);
        Long id = ServiceTestUtil.saveGetId(type);
        ServiceTestUtil.flushAndClear();

        KidneyDiseaseType retrieved = new GenericServiceBean().getPersistentObject(KidneyDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveKidneyDiseaseType() {
        KidneyDiseaseType type = new KidneyDiseaseType();
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        type.setParent(d);
        ServiceTestUtil.create(type);
        KidneyDiseaseType n = new KidneyDiseaseType(type);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        KidneyDiseaseType retrieved = new GenericServiceBean().getPersistentObject(KidneyDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateAndRetrieveCancerDiseaseType() {
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        CancerDiseaseType type = new CancerDiseaseType();
        type.setParent(d);
        ServiceTestUtil.create(type);
        Long id = ServiceTestUtil.saveGetId(type);
        ServiceTestUtil.flushAndClear();

        CancerDiseaseType retrieved = new GenericServiceBean().getPersistentObject(CancerDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveCancerDiseaseType() {
        CancerDiseaseType type = new CancerDiseaseType();
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        type.setParent(d);
        ServiceTestUtil.create(type);
        CancerDiseaseType n = new CancerDiseaseType(type);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        CancerDiseaseType retrieved = new GenericServiceBean().getPersistentObject(CancerDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }


    @Test
    public void testCreateAndRetrieveGastrointestinalDisorderDiseaseType() {
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        GastrointestinalDisorderDiseaseType type = new GastrointestinalDisorderDiseaseType();
        type.setParent(d);
        ServiceTestUtil.create(type);
        Long id = ServiceTestUtil.saveGetId(type);
        ServiceTestUtil.flushAndClear();

        GastrointestinalDisorderDiseaseType retrieved = new GenericServiceBean().getPersistentObject(GastrointestinalDisorderDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveGastrointestinalDisorderDiseaseType() {
        GastrointestinalDisorderDiseaseType type = new GastrointestinalDisorderDiseaseType();
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        type.setParent(d);
        ServiceTestUtil.create(type);
        GastrointestinalDisorderDiseaseType n = new GastrointestinalDisorderDiseaseType(type);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        GastrointestinalDisorderDiseaseType retrieved = new GenericServiceBean().getPersistentObject(GastrointestinalDisorderDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }


    @Test
    public void testCreateAndRetrieveHeartDiseaseType() {
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        HeartDiseaseType type = new HeartDiseaseType();
        type.setParent(d);
        ServiceTestUtil.create(type);
        Long id = ServiceTestUtil.saveGetId(type);
        ServiceTestUtil.flushAndClear();

        HeartDiseaseType retrieved = new GenericServiceBean().getPersistentObject(HeartDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveHeartDiseaseType() {
        HeartDiseaseType type = new HeartDiseaseType();
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        type.setParent(d);
        ServiceTestUtil.create(type);
        HeartDiseaseType n = new HeartDiseaseType(type);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        HeartDiseaseType retrieved = new GenericServiceBean().getPersistentObject(HeartDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateAndRetrieveBloodClotDiseaseType() {
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        BloodClotDiseaseType type = new BloodClotDiseaseType();
        type.setParent(d);
        ServiceTestUtil.create(type);
        Long id = ServiceTestUtil.saveGetId(type);
        ServiceTestUtil.flushAndClear();

        BloodClotDiseaseType retrieved = new GenericServiceBean().getPersistentObject(BloodClotDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }

    @Test
    public void testCreateCopyConstructorAndRetrieveBloodClotDiseaseType() {
        BloodClotDiseaseType type = new BloodClotDiseaseType();
        Disease d = new Disease();
        ServiceTestUtil.create(d);
        Long dId = ServiceTestUtil.saveGetId(d);
        type.setParent(d);
        ServiceTestUtil.create(type);
        BloodClotDiseaseType n = new BloodClotDiseaseType(type);

        Long id = ServiceTestUtil.saveGetId(n);

        ServiceTestUtil.flushAndClear();

        BloodClotDiseaseType retrieved = new GenericServiceBean().getPersistentObject(BloodClotDiseaseType.class, id);
        ServiceTestUtil.verify(id, retrieved);
        Disease diseaseRetrieved = new GenericServiceBean().getPersistentObject(Disease.class, dId);
        ServiceTestUtil.verify(dId, diseaseRetrieved);
        assertEquals(retrieved.getParent(), diseaseRetrieved);

    }
}

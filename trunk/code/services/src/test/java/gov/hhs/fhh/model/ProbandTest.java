/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Set;

import org.junit.Test;

import com.fiveamsolutions.hl7.model.AbstractCauseOfDeath;
import com.fiveamsolutions.hl7.model.DeceasedFemaleRelative;
import com.fiveamsolutions.hl7.model.DeceasedMaleRelative;
import com.fiveamsolutions.hl7.model.Diagnosis;
import com.fiveamsolutions.hl7.model.FemaleProband;
import com.fiveamsolutions.hl7.model.FemaleRelative;
import com.fiveamsolutions.hl7.model.MaleProband;
import com.fiveamsolutions.hl7.model.MaleRelative;
import com.fiveamsolutions.hl7.model.Person;
import com.fiveamsolutions.hl7.model.ProbandFactory;
import com.fiveamsolutions.hl7.model.ProbandFactoryImpl;
import com.fiveamsolutions.hl7.model.RelativeFactory;
import com.fiveamsolutions.hl7.model.RelativeFactoryImpl;
import com.fiveamsolutions.hl7.model.age.Age;
import com.fiveamsolutions.hl7.model.condition.Condition;

/**
 * @author bhumphrey
 *
 */
public class ProbandTest {
    
   
    
    
    @Test
    public void testCreatingAFemaleProband(){
        
        ProbandFactory factory = ProbandFactoryImpl.getInstance();
        RelativeFactory relFactory = RelativeFactoryImpl.getInstance();
       FemaleProband female= (FemaleProband) factory.createFemale();
       assertNotNull(female);
       
       FemaleRelative mom = (FemaleRelative) relFactory.createFemale(female);
       
       mom.addChild(female);
       
       MaleRelative dad= (MaleRelative) relFactory.createMale(female);
       assertNotNull(dad);
       
       dad.addChild(female);
       
      assertEquals( female.getFather(), dad);
      assertEquals( female.getMother(), mom);
      
      dad.setProband(female);
      mom.setProband(female);
      
      
      assertTrue( female.isChildOf(dad));
      
      assertTrue( female.isChildOf(mom));
      
      Set relatives = female.getRelatives();
      assertNotNull(relatives);
      assertEquals(2, relatives.size());
      
    }
    
    @Test
    public void testCreatingAMaleProband(){
        ProbandFactory factory = ProbandFactoryImpl.getInstance();
        RelativeFactory relFactory = RelativeFactoryImpl.getInstance();
       MaleProband male= (MaleProband) factory.createMale();
       assertNotNull(male);
       
       FemaleRelative mom = (FemaleRelative) relFactory.createFemale(male);
       
       mom.addChild(male);
       
       MaleProband dad= (MaleProband) factory.createMale();
       assertNotNull(dad);
       
       dad.addChild(male);
       
      assertEquals( male.getMother(), mom);
      assertEquals( male.getFather(), dad);
      
      //male =  (MaleProband) factory.createMale(mom, dad);
       
       
    }
    
    @Test
    public void testCreatingAChildProband(){
        ProbandFactory factory = ProbandFactoryImpl.getInstance();
        RelativeFactory relFactory = RelativeFactoryImpl.getInstance();
       FemaleProband female= (FemaleProband) factory.createFemale();
       assertNotNull(female);
       
       FemaleRelative daugther = (FemaleRelative) relFactory.createFemale(female);
       MaleRelative son = (MaleRelative) relFactory.createMale(female);
       
       female.addChild(daugther);
       female.addChild(son);
       
       assertEquals(2, female.getChildren().size());
       
    }
    
    @Test
    public void testCreatingBasicTree(){
        ProbandFactory factory = ProbandFactoryImpl.getInstance();
        RelativeFactory relFactory = RelativeFactoryImpl.getInstance();
       FemaleProband proband= (FemaleProband) factory.createFemale();
       assertNotNull(proband);
       
       FemaleRelative mother = (FemaleRelative)relFactory.createFemale(proband);
       MaleRelative father = (MaleRelative)relFactory.createMale(proband);
       
       mother.addChild(proband);
       father.addChild(proband);
       
       FemaleRelative mGrandMother = (FemaleRelative)relFactory.createFemale(proband);
       MaleRelative mGrandFather = (MaleRelative)relFactory.createMale(proband);
       
       
       FemaleRelative pGrandMother = (FemaleRelative)relFactory.createFemale(proband);
       MaleRelative pGrandFather = (MaleRelative)relFactory.createMale(proband);
       
       
       mGrandFather.addChild(mother);
       mGrandMother.addChild(mother);
       
       
       pGrandFather.addChild(father);
       pGrandMother.addChild(father);
       
       DeceasedMaleRelative uncle = (DeceasedMaleRelative) relFactory.createDeceasedMale(proband, new AbstractCauseOfDeath(){

        public Age getAgeAtDeath() {
            // TODO Auto-generated method stub
            return null;
        }

        public Condition getCondition() {
            // TODO Auto-generated method stub
            return null;
        }

        });
       
       
       pGrandFather.addChild(uncle);
       pGrandMother.addChild(uncle);
       
       
       DeceasedFemaleRelative aunt = (DeceasedFemaleRelative) relFactory.createDeceasedFemale(proband, new AbstractCauseOfDeath(){

           public Age getAgeAtDeath() {
               // TODO Auto-generated method stub
               return null;
           }

           public Condition getCondition() {
               // TODO Auto-generated method stub
               return null;
           }

           });
          
          
          pGrandFather.addChild(aunt);
          pGrandMother.addChild(aunt);
       
      mother.addDiagnosis(new Diagnosis() {
        
        public Person getPersonAffected() {
            // TODO Auto-generated method stub
            return null;
        }
        
        public Condition getDiagnosedCondition() {
            // TODO Auto-generated method stub
            return null;
        }
        
        public Age getAgeAtOnset() {
            // TODO Auto-generated method stub
            return null;
        }
    });
      
      mGrandFather.addDiagnosis (new Diagnosis() {
          
          public Person getPersonAffected() {
              // TODO Auto-generated method stub
              return null;
          }
          
          public Condition getDiagnosedCondition() {
              // TODO Auto-generated method stub
              return null;
          }
          
          public Age getAgeAtOnset() {
              // TODO Auto-generated method stub
              return null;
          }
      });
       
    }

}

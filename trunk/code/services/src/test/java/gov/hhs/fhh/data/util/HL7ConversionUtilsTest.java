/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import gov.hhs.fhh.data.ClinicalObservation;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Ethnicity;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Race;
import gov.hhs.fhh.data.UserEnteredDisease;
import gov.hhs.fhh.model.mfhp.castor.ClinicalObservationsNode;
import gov.hhs.fhh.model.mfhp.castor.ValueNode;
import gov.hhs.fhh.test.AbstractHibernateTestCase;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.junit.Before;
import org.junit.Test;

import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;
import com.fiveamsolutions.hl7.model.age.CodeNode;
import com.fiveamsolutions.hl7.model.mfhp.ClinicalObservationCode;
import com.fiveamsolutions.hl7.model.mfhp.Gender;
import com.fiveamsolutions.hl7.model.mfhp.Height;
import com.fiveamsolutions.hl7.model.mfhp.TwinStatus;
import com.fiveamsolutions.hl7.model.mfhp.Weight;
import com.fiveamsolutions.hl7.model.mfhp.WeightUnit;

/**
 * @author bpickeral
 *
 */
public class HL7ConversionUtilsTest extends AbstractHibernateTestCase{
    private final boolean TRUE = true;
    private final Weight DUMMY_WEIGHT = new Weight();
    private final Height DUMMY_HEIGHT = new Height();
    private final String DUMMY_NAME = "Name";
    private final UUID DUMMY_ID = UUID.randomUUID();
    private final Gender DUMMY_GENDER = Gender.MALE;
    private final Ethnicity DUMMY_ETHNICITY = new Ethnicity();
    private final Race DUMMY_RACE = new Race();
    private final ClinicalObservation DUMMY_OBS =  new ClinicalObservation();
    private final Person p = new Person();
    private final Date date = new Date();
    private final UserEnteredDisease DUMMY_DISEASE = new UserEnteredDisease();
    private final String DUMMY_DISEASE_CODE = "Code16";
    private final String DUMMY_DISEASE_CSN = "CODE_SYS16";
    private final String DUMMY_DISEASE_DISPLAY = "DisplayName16";
    private final String DUMMY_DISEASE_USER_DEFINED = "User entered disease";
    
    @Before
    public void zbefore() {
        p.setName(DUMMY_NAME);
        p.setDateOfBirth(date);
        p.setUuid(DUMMY_ID);
        p.setGender(DUMMY_GENDER);
        DUMMY_OBS.setDisease(DUMMY_DISEASE);
        DUMMY_OBS.setAgeRange(AgeRangeEnum.THIRTIES);
        DUMMY_WEIGHT.setValue(180);
        DUMMY_WEIGHT.setUnit(WeightUnit.US);
        DUMMY_HEIGHT.setValue(60);
        p.setWeight(DUMMY_WEIGHT);
        p.setHeight(DUMMY_HEIGHT);
        List<ClinicalObservation> observations = new ArrayList<ClinicalObservation>();
        observations.add(DUMMY_OBS);
        p.setObservations(observations);
        p.setEthnicities(new ArrayList<Ethnicity>());
        p.getEthnicities().add(DUMMY_ETHNICITY);
        p.setRaces(new ArrayList<Race>());
        p.getRaces().add(DUMMY_RACE);
        p.setAdopted(TRUE);
    }
    
    @Test
    public void testcreateClinicalObservationsNode() {
        p.setWeight(new Weight());
        p.setHeight(new Height());
        // Add disease
        DUMMY_DISEASE.setCode(DUMMY_DISEASE_CODE);
        DUMMY_DISEASE.setCodeSystemName(DUMMY_DISEASE_CSN);
        DUMMY_DISEASE.setDisplayName(DUMMY_DISEASE_DISPLAY);
        DUMMY_DISEASE.setOriginalText(DUMMY_DISEASE_USER_DEFINED);
        // Make sure Twin status is not stored if no is selected
        p.setTwinStatus(TwinStatus.NO);
        
        // check disease observation
        ClinicalObservationsNode observationsNode = HL7ConversionUtils.createClinicalObservationsNode(p);
        CodeNode codeNode = observationsNode.getObservations().get(0).getCode();
        assertEquals(DUMMY_DISEASE_CODE, codeNode.getCode());
        assertEquals(DUMMY_DISEASE_CSN, codeNode.getCodeSystemName());
        assertEquals(DUMMY_DISEASE_DISPLAY, codeNode.getDisplayName());
        assertEquals(DUMMY_DISEASE_USER_DEFINED, codeNode.getOriginalText());
        
        // Add adopted status
        p.setAdopted(TRUE);
        
        //Add Weight
        p.setWeight(DUMMY_WEIGHT);
        
        //Add Height
        p.setHeight(DUMMY_HEIGHT);
        
        //Add Consanguinity
        p.setConsanguinityFlag(TRUE);
        
        //
        // NOTE: Weak tests! requires the exact knowledge of were the condes are. -bh
        //
        
        
        // check adopted observation
        p.getObservations().clear();
        observationsNode = HL7ConversionUtils.createClinicalObservationsNode(p);
        codeNode = observationsNode.getObservations().get(1).getCode();
        assertEquals(ClinicalObservationCode.ADOPTED.getCode(), codeNode.getCode());
        assertEquals(ClinicalObservationCode.ADOPTED.getCodeSystemName(), 
                codeNode.getCodeSystemName());
        assertEquals(ClinicalObservationCode.ADOPTED.getDisplayName(), 
                codeNode.getDisplayName());
        
        // check weight observation
        codeNode = observationsNode.getObservations().get(2).getCode();
        assertEquals(DUMMY_WEIGHT.getValue().toString(), observationsNode.getObservations().get(2)
                .getValueNode().getValue());
        assertEquals(ClinicalObservationCode.WEIGHT.getCode(), codeNode.getCode());
        assertEquals(ClinicalObservationCode.WEIGHT.getCodeSystemName(), 
                codeNode.getCodeSystemName());
        assertEquals(ClinicalObservationCode.WEIGHT.getDisplayName(), 
                codeNode.getDisplayName());
        
        // check height observation
        codeNode = observationsNode.getObservations().get(3).getCode();
        assertEquals(DUMMY_HEIGHT.getValue().toString(), observationsNode.getObservations().get(3)
                .getValueNode().getValue());
        assertEquals(ClinicalObservationCode.HEIGHT.getCode(), codeNode.getCode());
        assertEquals(ClinicalObservationCode.HEIGHT.getCodeSystemName(), 
                codeNode.getCodeSystemName());
        assertEquals(ClinicalObservationCode.HEIGHT.getDisplayName(), 
                codeNode.getDisplayName());
        
        // check consanguinity observation
        codeNode = observationsNode.getObservations().get(4).getCode();
        assertEquals(ClinicalObservationCode.CONSANGUINITY_ORG_TEXT, codeNode.getOriginalText());
        
        p.getObservations().clear();
        // Add twin status - fraternal
        p.setTwinStatus(TwinStatus.FRATERNAL);
        p.setAdopted(false);
        
        // check twin status - fraternal
        observationsNode = HL7ConversionUtils.createClinicalObservationsNode(p);
        codeNode = observationsNode.getObservations().get(1).getCode();
        assertEquals(TwinStatus.FRATERNAL.getCode(), codeNode.getCode());
        assertEquals(TwinStatus.FRATERNAL.getCodeSystemName(), 
                codeNode.getCodeSystemName());
        assertEquals(TwinStatus.FRATERNAL.getDisplayName(), 
                codeNode.getDisplayName());
        
        p.getObservations().clear();
        // check twin status identical
        p.setTwinStatus(TwinStatus.IDENTICAL);
        observationsNode = HL7ConversionUtils.createClinicalObservationsNode(p);
        codeNode = observationsNode.getObservations().get(1).getCode();
        assertEquals(TwinStatus.IDENTICAL.getCode(), codeNode.getCode());
        assertEquals(TwinStatus.IDENTICAL.getCodeSystemName(), 
                codeNode.getCodeSystemName());
        assertEquals(TwinStatus.IDENTICAL.getDisplayName(), 
                codeNode.getDisplayName());
    }
    
    @Test
    public void testExtractClinicalObservationsNode() {
        Map<String, Disease> diseaseMap = FhhDataUtils.getCodeToDiseaseMap();
        assertTrue(!diseaseMap.isEmpty());
        assertEquals("55822004", diseaseMap.get("55822004").getCode());
        // Test for user defined disease
        
    }
    @Test
    public void testOtherClinicalObservationsNode() {
        Person person = new Person();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        CodeNode codeNode = new CodeNode();
        
        codeNode.setDisplayName(DiseaseUtils.OTHER_DISEASE_DISPLAY);
        observationsNode.setObservations(new ArrayList<ClinicalObservation>());
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(codeNode);
        assertEquals(observationsNode.getObservations().get(0).getCode(), codeNode);
    }
    
    @Test
    public void testSetClinicalObservationsNodeForUserDefinedDisease() {
        Person person = new Person();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        CodeNode codeNode = new CodeNode();

        codeNode.setOriginalText(DUMMY_DISEASE_USER_DEFINED);
        codeNode.setDisplayName(DiseaseUtils.OTHER_DISEASE_DISPLAY);
        observationsNode.setObservations(new ArrayList<ClinicalObservation>());
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(codeNode);
        person.getObservations().clear();
        HL7ConversionUtils.extractClinicalObservationsNode(person, observationsNode);
        Disease disease = person.getObservations().get(0).getDisease();
        assertEquals(DUMMY_DISEASE_USER_DEFINED, disease.getOriginalText());
    }
    

    @Test
    public void testUnknownCancer() {
        CodeNode codeNode = new CodeNode();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        Person person = new Person();

        codeNode.setDisplayName("Unknown Cancer");
        codeNode.setOriginalText("Unknown Cancer");
//        codeNode.setId(78L);
        observationsNode.setObservations(new ArrayList<ClinicalObservation>());
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(codeNode);

        person.getObservations().clear();
        HL7ConversionUtils.extractClinicalObservationsNode(person, observationsNode);
        Disease disease = person.getObservations().get(0).getDisease();
        assertEquals("Unknown Cancer", disease.getOriginalText());
        
    }
    
    @Test
    public void testSetClinicalObservationsNodeForSystemDefinedDisease() {
        CodeNode codeNode = new CodeNode();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        
        codeNode.setOriginalText(null);
        codeNode.setCode("10001005");
        codeNode.setDisplayName(DUMMY_DISEASE_DISPLAY);
        codeNode.setCodeSystemName(DUMMY_DISEASE_CSN);

        observationsNode.setObservations(new ArrayList<ClinicalObservation>());
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(codeNode);

        Person person = new Person();
        
        HL7ConversionUtils.extractClinicalObservationsNode(person, observationsNode);
        Disease disease = person.getObservations().get(0).getDisease();
        assertEquals("10001005", disease.getCode());
//        assertEquals(DUMMY_DISEASE_CSN, disease.getCodeSystemName());
        assertEquals("Septicemia", disease.getDisplayName());
        assertNotNull(disease.getOriginalText());
    }
    
    @Test
    public void testSetClinicalObservationsNodeForAdopted() {
        CodeNode codeNode = new CodeNode();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        Person person = new Person();
        
        observationsNode.getObservations().clear();
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(new CodeNode(
                ClinicalObservationCode.ADOPTED.getCode(), 
                ClinicalObservationCode.ADOPTED.getCodeSystemName(),
                ClinicalObservationCode.ADOPTED.getDisplayName()));
        HL7ConversionUtils.extractClinicalObservationsNode(person, observationsNode);
        assertTrue(person.isAdopted());
    }
    
    @Test
    public void testSetClinicalObservationsNodeForWeight() {
        CodeNode codeNode = new CodeNode();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        Person person = new Person();

       
        observationsNode.getObservations().clear();
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(new CodeNode(
                ClinicalObservationCode.WEIGHT.getCode(), 
                ClinicalObservationCode.WEIGHT.getCodeSystemName(),
                ClinicalObservationCode.WEIGHT.getDisplayName()));
        ValueNode valueNode = new ValueNode();
        observationsNode.getObservations().get(0).setValueNode(valueNode);
        valueNode.setUnit(WeightUnit.US.getDisplayName());
        valueNode.setValue(DUMMY_WEIGHT.getValue().toString());
        assertEquals(WeightUnit.US.getDisplayName(), valueNode.getUnit());
        assertEquals(DUMMY_WEIGHT.getValue().toString(), valueNode.getValue());
        
        HL7ConversionUtils.extractClinicalObservationsNode(person, observationsNode);
        assertEquals(DUMMY_WEIGHT.getValue(), person.getWeight().getValue());
        assertEquals(DUMMY_WEIGHT.getUnit(), person.getWeight().getUnit());
    }
    
    @Test
    public void testSetClinicalObservationsNodeForHeight() {
        CodeNode codeNode = new CodeNode();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        Person person = new Person();

        observationsNode.getObservations().clear();
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(new CodeNode(
                ClinicalObservationCode.HEIGHT.getCode(), 
                ClinicalObservationCode.HEIGHT.getCodeSystemName(),
                ClinicalObservationCode.HEIGHT.getDisplayName()));
        ValueNode valueNode = new ValueNode();
        observationsNode.getObservations().get(0).setValueNode(valueNode);
        valueNode.setUnit(DUMMY_HEIGHT.getUnit().getDisplayName());
        valueNode.setValue(DUMMY_HEIGHT.getValue().toString());
        
        HL7ConversionUtils.extractClinicalObservationsNode(person, observationsNode);
        assertEquals(DUMMY_HEIGHT.getValue(), person.getHeight().getValue());
        assertEquals(DUMMY_HEIGHT.getUnit(), person.getHeight().getUnit());
    }
    
    @Test 
    public void testSetClinicalObservationsNodeForTwinIdentical() {
        CodeNode codeNode = new CodeNode();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        Person person = new Person();

        
        observationsNode.getObservations().clear();
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(new CodeNode(
                TwinStatus.IDENTICAL.getCode(), 
                TwinStatus.IDENTICAL.getCodeSystemName(),
                TwinStatus.IDENTICAL.getDisplayName()));
        HL7ConversionUtils.extractClinicalObservationsNode(person, observationsNode);
        assertEquals(TwinStatus.IDENTICAL, person.getTwinStatus());
    }
    
    @Test
    public void testSetClinicalObservationsNodeForTwinFraternal() {
        CodeNode codeNode = new CodeNode();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        Person person = new Person();

        observationsNode.getObservations().clear();
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(new CodeNode(
                TwinStatus.FRATERNAL.getCode(), 
                TwinStatus.FRATERNAL.getCodeSystemName(),
                TwinStatus.FRATERNAL.getDisplayName()));
        HL7ConversionUtils.extractClinicalObservationsNode(person, observationsNode);
        assertEquals(TwinStatus.FRATERNAL, person.getTwinStatus());  
    }
    
    @Test
    public void testSetClinicalObservationsNodeForConsanguinity() {
        CodeNode codeNode = new CodeNode();
        ClinicalObservationsNode observationsNode = new ClinicalObservationsNode();
        Person person = new Person();

        observationsNode.getObservations().clear();
        observationsNode.getObservations().add(new ClinicalObservation());
        observationsNode.getObservations().get(0).setCode(new CodeNode());
        observationsNode.getObservations().get(0).getCode().setOriginalText(
                ClinicalObservationCode.CONSANGUINITY_ORG_TEXT);
        HL7ConversionUtils.extractClinicalObservationsNode(person, observationsNode);
        assertTrue(person.isConsanguinityFlag());
    }
}

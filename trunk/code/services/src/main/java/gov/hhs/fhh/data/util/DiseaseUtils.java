/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data.util;

import gov.hhs.fhh.data.ClinicalObservation;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.UserEnteredDisease;

import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;

/**
 * Class creates an abbreviation for a disease.
 * 
 * @author lpower
 */
public class DiseaseUtils {
    /**
     * Heart Disease id.
     */
    public static final String HEART_DISEASE_CODE = "56265001";
    /**
     * Stroke id.
     */
    public static final String STROKE_CODE = "116288000";
    /**
     * Type 2 Diabetes id.
     */
    public static final String DIABETES_CODE = "73211009";
    /**
     * Colon Cancer id.
     */
    public static final String COLON_CANCER_CODE = "363406005";
    /**
     * Breast Cancer id.
     */
    public static final String BREAST_CANCER_CODE = "254837009";
    /**
     * Ovarian Cancer id.
     */
    public static final String OVARIAN_CANCER_CODE = "363443007";

    /**
     * Other Disease Display Name.
     */
    public static final String OTHER_DISEASE_DISPLAY = "Other Disease type";

    private static final int MAX_SIZE = 4;

    /**
     * Method creates the disease name to be displayed in reports. Displays user-entered term if one has been entered;
     * otherwise displays displayName.
     * 
     * @param d the Disease seeking a display term
     * @return String of term to be displayed for this disease.
     */
    public static String getReportDisplay(Disease d) {
        String display = d.getAppDisplay();
        if (display != null) {
            return display;
        }
        if (d.getCode() == null) {
            // no code means it is a user-entered disease
            display = d.getOriginalText();
        } else {
            if (d.getAppDisplay() != null && d.getOriginalText() != null) {
                display = d.getOriginalText();
            }
        }
        return display;
    }

    /**
     * Method creates disease abbreviation.
     * 
     * @param d the Disease to be abbreviated
     * @return String of disease abbreviation for this disease
     */
    public static String getDiseaseAbbreviation(Disease d) {
        String abbrev = null;
        if (abbrev == null) {
            String start = d.getDisplayName();
            if (d.getOriginalText() != null) {
                start = d.getOriginalText();
            }
            abbrev = (start.length() > MAX_SIZE ? createAbbreviation(start) : start);
        }
        return abbrev;
    }

    /**
     * create unique disease abbreviation of 5 chars.
     * 
     * @param abbrev
     * @return
     */
    @SuppressWarnings("PMD.AvoidReassigningParameters")
    private static String createAbbreviation(String abbrev) {
        // CHECKSTYLE:OFF - magic numbers more readable here
        abbrev = (abbrev.substring(0, 1).toUpperCase()) + (abbrev.substring(1, 3).toLowerCase())
                + (abbrev.substring(abbrev.length() - 2, abbrev.length()).toUpperCase());
        // CHECKSTYLE:ON
        return abbrev;
    }

    /**
     * Method writes the diseases that this person has.
     * 
     * @param mine the disease to be compared
     * @param highlight the highlight disease
     * @return boolean whether this disease matches the highlighted disease
     */
    public static boolean compareHighlightDisease(Disease mine, Disease highlight) {
        if (highlight == null) {
            return false;
        } else {
            return 0 == mine.compareTo(highlight);
        }
    }

    /**
     * Used in the legacy import to find an existing disease in FHH that matches the value of the legacy user entered
     * disease. Method creates a disease of type 'Other' if no matching disease was found or if multiple diseases were
     * found and method could not find a generic disease type within the search results.
     * 
     * @param diseaseName disease name to search for
     * @return Disease existing disease or newly created disease of type 'Other'
     */
    public static Disease findOrCreateNewDisease(String diseaseName) {
        List<Disease> diseases = FhhDataUtils.getPersonService().getDiseaseByName(
                replaceSpanishCharactersWithHTML(diseaseName));
        Disease disease = null;
        // If there are diseases that match the value of the user entered disease, find the appropriate match
        if (!diseases.isEmpty()) {
            disease = matchAppropriateDisease(diseaseName, diseases);
        }

        // No matches were found, create a disease of type 'Other'
        if (disease == null) {
            disease = createOtherDiseaseType(diseaseName);
        }
        return disease;
    }

    /**
     * Replaces Spanish characters with the appropriate numerical html value.
     * 
     * @param diseaseName String to translate
     * @return String HTML value
     */
    public static String replaceSpanishCharactersWithHTML(String diseaseName) {
        if (diseaseName == null) {
            return null;
        }
        StringBuffer sb = new StringBuffer(diseaseName);
        for (SpanishCharacter character : SpanishCharacter.values()) {
            sb = new StringBuffer(StringUtils.replace(sb.toString(), character.getSpanish(), character.getHtml()));
        }
        return sb.toString();
    }

    private static Disease matchAppropriateDisease(String diseaseName, List<Disease> diseases) {
        // If a single match was found, return the match
        if (diseases.size() == 1) {
            return diseases.get(0);
            // Otherwise find a disease that has an exact match for appDisplay or displayName
        } else {
            return findExactDisease(diseaseName, diseases);
        }
    }

    private static Disease findExactDisease(String diseaseName, List<Disease> diseases) {
        Disease disease = null;
        Iterator<Disease> it = diseases.iterator();
        Disease currDisease = null;
        while (disease == null && it.hasNext()) {
            currDisease = it.next();
            if (currDisease.getAppDisplay().equalsIgnoreCase(diseaseName)
                    || currDisease.getDisplayName().equalsIgnoreCase(diseaseName)) {
                disease = currDisease;
            }
        }
        return disease;
    }

    /**
     * Returns a Disease of type other with the original text initialized to <code>Name</code>.
     * 
     * @param name String disease name
     * @return Disease new disease
     */
    public static Disease createOtherDiseaseType(String name) {
        UserEnteredDisease disease = new UserEnteredDisease();
        disease.setOriginalText(name);
        disease.setAppDisplay(name);
        disease.setDisplayName(name);
        return disease;
    }

    /**
     * Sets the <code>unmatchedCondition</code> flag in a ClinicalObservation. The flag is used to determine if a user
     * entered disease from legacy import was matched to an FHH disease.
     * 
     * @param p Person to set <code>unmatchedCondition</code>
     * @param obs The <code>ClinicalObservation</code> containing the condition
     */
    public static void setMatchedOrUnmatched(Person p, ClinicalObservation obs) {
        if (obs.getDisease().isOther()) {
            obs.setUnmatchedCondition(true);
            p.setUnmatchedCondition(true);
        }
    }

    /**
     * Generates the row ID of the Disease added to the Disease table. Used for removing the previous COD value when the
     * COD is changed.
     * 
     * @param d <code>Disease</code> containing the Cause of Death
     * @param ageAtDeath <code>AgeRangeEnum</code> age at death
     * @return String Code of Disease + AgeRangeEnum + (Other Disease Value if Disease is of type Other)
     */
    public static String generateDiseaaseTableId(Disease d, AgeRangeEnum ageAtDeath) {
        StringBuffer id = new StringBuffer();
        if (d != null && ageAtDeath != null) {
            boolean isOther = d.isOther();
            if (!isOther  && !StringUtils.isEmpty(d.getCode())) {
                id.append(d.getCode().toString());
            }
            id.append(ageAtDeath.toString());
            if (isOther) {
                id.append(d.getOriginalText());
            }
        }
        return id.toString();
    }

}
/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data.util;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import org.apache.commons.lang.StringUtils;

import com.fiveamsolutions.nci.commons.util.NCICommonsUtils;

/**
 * @author bpickeral
 *
 */
public final class FormatUtils {
    /**
     * FHH Date format.
     */
    public static final String DATE_FORMAT_STRING = "MM/dd/yyyy";
    
    
    private static final int DATE_LENGTH = 10;
    
    /**
     * Formats a Date to FHH format.
     * @param date Date to parse
     * @return String in MM/DD/YYYY format
     */
    public static String format(Date date) {
        return new SimpleDateFormat(
                DATE_FORMAT_STRING, Locale.US).format(date);
    }
    
    /**
     * Converts an FHH formatted String (MM/DD/YYYY) to a Date.  Returns null if String was not in correct format.
     * @param formattedDate String in MM/DD/YYYY format
     * @return Date
     */
    public static Date convertStringToDate(String formattedDate) {
        Date date;
        if (formattedDate.length() != DATE_LENGTH) {
            return null;
        } 
        try {
            SimpleDateFormat format = new SimpleDateFormat(FormatUtils.DATE_FORMAT_STRING, Locale.US);
            format.setLenient(false);
            date = format.parse(formattedDate);
        } catch (ParseException pe) {
            return null;
        }
        return date;
    }
    
    /**
     * Converts a Person's age to the year in which the Person was born.
     * @param age Integer age of the Person
     * @return String value of year
     */
    public static String convertAgeToYear(Integer age) {
        Calendar calendar = Calendar.getInstance();
        return Integer.toString(calendar.get(Calendar.YEAR) - age);
    }
    
    
    /**
     * Converts an Integer age value to today's date the year the person was born.
     * @param age the age of the person used to calculate the date of birth.
     * @return age Date of birth
     */
    public static Date convertAgeToDOB(Integer age) {
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.YEAR, -age);
        return calendar.getTime();
    }
    
    /**
     * Checks a date string for valid date format (MM/DD/YYYY).  Does not allow lenient
     * parsing (must be an actual Calendar date).
     * @param date to check
     * @return true/false representing validity of date
     */
    public static boolean checkDateFormat(String date) {
        boolean isValid = true;
        try {
            SimpleDateFormat format = new SimpleDateFormat(FormatUtils.DATE_FORMAT_STRING, Locale.US);
            format.setLenient(false);
            format.parse(date);
        } catch (Exception e) {
            isValid = false;
        }
        return isValid;
    }
    
    /**
     * Filters out '<' and '>' from a String replacing the values with html codes.  Calls NCICOmmonsUtils function,
     * but also handles a null value.
     * @param s String to format
     * @return formatted String
     */
    public static String performXSSFilter(String s) {
        if (StringUtils.isBlank(s)) {
            return null;
        } else {
            return NCICommonsUtils.performXSSFilter(s);
        }
    }
}

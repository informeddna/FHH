/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.service;

import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Ethnicity;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Race;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.util.HL7ConversionUtils;
import gov.hhs.fhh.data.util.PersonUtils;
import gov.hhs.fhh.data.util.htmimport.HTMImporter;
import gov.hhs.fhh.model.mfhp.castor.FhhCastorUtils;
import gov.hhs.fhh.service.util.FhhUtils;
import gov.hhs.fhh.xml.PatientPerson;
import gov.hhs.mfhp.model.Observation;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.hibernate.Query;

import com.fiveamsolutions.nci.commons.util.HibernateUtil;

/**
 * @author bpickeral
 * 
 */
@Stateless
@TransactionAttribute(TransactionAttributeType.SUPPORTS)
@SuppressWarnings("PMD.TooManyMethods")
public class PersonServiceBean extends GenericServiceBean implements PersonServiceLocal {
    private static final Logger LOG = Logger.getLogger(PersonServiceBean.class);
    private static final String ALL_DISEASES_CACHE_REGION = "AllDiseases.cache.region";
    private static final String DISEASE_SUB_TYPES_CACHE_REGION = "DiseaseSubTypes.cache.region";
    static final String DISEASES_CACHE_REGION = "Diseases.cache.region";
    private static final String HISPANIC_ETHNICITIES_CACHE_REGION = "HispanicEthnicities.cache.region";
    private static final String ETHNICITIES_CACHE_REGION = "Ethnicities.cache.region";
    private static final String HAWAIIAN_RACES_CACHE_REGION = "HawaiianRaces.cache.region";
    private static final String ASIAN_RACES_CACHE_REGION = "AsianRaces.cache.region";
    private static final String RACES_CACHE_REGION = "Races.cache.region";
    private static final String FROM = "from ";
    static final String UNCHECKED = "unchecked";

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Race> getRaces() {
        String query = FROM + Race.class.getName() + " where subType = 'Race'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                RACES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Race> getAsianRaces() {
        String query = FROM + Race.class.getName() + " where subType = 'Asian'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                ASIAN_RACES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Race> getHawaiianRaces() {
        String query = FROM + Race.class.getName() + " where subType = 'NativeHawaiian'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                HAWAIIAN_RACES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Ethnicity> getEthnicities() {
        String query = FROM + Ethnicity.class.getName() + " where subType = 'Ethnicity'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                ETHNICITIES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Ethnicity> getHispanicEthnicities() {
        String query = FROM + Ethnicity.class.getName() + " where subType = 'Hispanic'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                HISPANIC_ETHNICITIES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Disease> getDiseases() {

        List<Observation> observations = HibernateUtil.getCurrentSession().getNamedQuery("mfhp.observation.noparents")
                .setCacheable(true).setCacheRegion(DISEASES_CACHE_REGION).list();

        return convertToDiseases(observations);
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Disease> getDiseaseSubTypes(Long diseaseId) {
        Query query = HibernateUtil.getCurrentSession().getNamedQuery("mfhp.observation.children");
        query.setCacheable(true);
        query.setCacheRegion(DISEASE_SUB_TYPES_CACHE_REGION);
        query.setParameter("parentId", diseaseId);

        return convertToDiseases(query.list());
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Disease> getAllDiseases() {

        List<Observation> observations = HibernateUtil.getCurrentSession().getNamedQuery("mfhp.observation.all")
                .setCacheable(true).setCacheRegion(ALL_DISEASES_CACHE_REGION).list();
        return convertToDiseases(observations);
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public Disease getOtherDisease() {
        List<Observation> observations = HibernateUtil.getCurrentSession().getNamedQuery(
                "mfhp.observation.findOtherDisease").setCacheable(true).setCacheRegion(DISEASES_CACHE_REGION).list();
        return (observations.isEmpty() ? null : observations.iterator().next());
    }
    
    

    /**
     * lame!
     * 
     * @param observations
     * @return
     */
    private List<Disease> convertToDiseases(List<Observation> observations) {
        List<Disease> diseases = new ArrayList<Disease>();

        for (Observation o : observations) {
            diseases.add((Disease) o);
        }

        return diseases;
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Disease> getDiseaseByName(String diseaseName) {
        Query query = HibernateUtil.getCurrentSession().getNamedQuery("mfhp.observation.findByDisplayName");
        query.setParameter("displayname", "%" + diseaseName + "%");
        return convertToDiseases(query.list());

    }
    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Observation> getDiseaseByCode(String codeName) {
        Query query =  HibernateUtil.getCurrentSession().getNamedQuery("mfhp.observation.findByCode");
        query.setParameter("codeName", codeName);
        return query.list();
    }
    
    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Ethnicity> getEthnicityByCodeAndCodeSystem(String code, String codeSystem) {
        String query = FROM + Ethnicity.class.getName() + " where code = '" + code + "' AND codeSystemName = '"
                + codeSystem + "'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                ETHNICITIES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Race> getRaceByCodeAndCodeSystem(String code, String codeSystem) {
        String query = FROM + Race.class.getName() + " where code = '" + code + "' AND codeSystemName = '" + codeSystem
                + "'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                RACES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    public Person importFile(File file) throws ImportException {
        Person result = new Person();

        String fileStr = getFileAsString(file);
        if (fileStr.contains("<?xml")) {
            LOG.debug("about to import xml file");
            result = importXMLFile(fileStr);
        } else {
            result = importHTMFile(fileStr);
        }
        PersonUtils.setImmediateRelatives(result);
        PersonUtils.setAllKnownParents(result);
        return result;
    }

    private String getFileAsString(File file) throws ImportException {
        String result = "";
        InputStream in = null;
        try {
            in = FileUtils.openInputStream(file);
            result = FhhCastorUtils.getInputStreamAsString(in);
        } catch (IOException e) {
            LOG.error("Unable to read file : " + file.getAbsolutePath(), e);
            throw new ImportException("Unable to read file : " + file.getAbsolutePath(), e);
        } finally {
            IOUtils.closeQuietly(in);
        }
        return result;
    }

    /**
     * Populates the family Tree with attributes from a version 1.x FHH HTM file.
     * 
     * @return
     */
    private Person importHTMFile(String htmFile) {
        HTMImporter importer = new HTMImporter();
        return importer.build(htmFile);
    }

    /**
     * Populates the family Tree with attributes from a version 2.x FHH XML file.
     * 
     * @return
     * 
     */
    private Person importXMLFile(String xmlFile) throws ImportException {
        PatientPerson unmarshalledPerson;
        try {
            unmarshalledPerson = (PatientPerson) FhhCastorUtils.unmarshallXMLFile(xmlFile, new PatientPerson());
        } catch (Exception e) {
            LOG.error("Problem unmarshalling xml file", e);
            throw new ImportException("Problem unmarshalling xml file", e);
        }
        Person result = HL7ConversionUtils.person(unmarshalledPerson);
        // Set parents of relatives
        result = FhhUtils.setupParents(result);
        deepPopulateRaceEthnicityIds(result);
        return result;
    }

    /**
     * @param person to populate the ids for race and ethnicity for pedigree
     */
    public void deepPopulateRaceEthnicityIds(Person person) {
        populateRaceEthnicityIds(person);
        for (final Relative relative : person.getRelatives()) {
            populateRaceEthnicityIds(relative);
        }
    }

    private void populateRaceEthnicityIds(Person personParam) {
        populateEthnicityIds(personParam);
        populateRaceId(personParam);
    }

    private void populateRaceId(Person personParam) {
        for (Race race : personParam.getRaces()) {
            if (race.getId() != null && race.getId() != 0) {
                continue;
            }
            List<Race> matching = getRaceByCodeAndCodeSystem(race.getCode(), race.getCodeSystemName());
            if (matching != null && !matching.isEmpty()) {
                race.setId(matching.get(0).getId());
            }
        }
    }

    private void populateEthnicityIds(Person personParam) {
        for (Ethnicity ethnicity : personParam.getEthnicities()) {
            if (ethnicity.getId() != null && ethnicity.getId() != 0) {
                continue;
            }
            List<Ethnicity> matching = getEthnicityByCodeAndCodeSystem(ethnicity.getCode(), ethnicity
                    .getCodeSystemName());
            if (matching != null && !matching.isEmpty()) {
                ethnicity.setId(matching.get(0).getId());
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public boolean isDiabetes(Observation o) {
        
        return o.getParent() != null ? o.getParent().equals(getDiabetesType()) : false;
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public Disease getDiabetesType() {
        List<Observation> observations = HibernateUtil.getCurrentSession().getNamedQuery(
                "mfhp.observation.findDiabetesType").setCacheable(true).setCacheRegion(DISEASES_CACHE_REGION).list();
        return (observations.isEmpty() ? null : observations.iterator().next());
    }

    /**
     * {@inheritDoc}
     */
    public boolean isHeartDisease(Observation o) {
        return o.getParent() != null ? o.getParent().equals(getHeartDiseaseType()) : false;
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public Disease getHeartDiseaseType() {
        List<Observation> observations = HibernateUtil.getCurrentSession().getNamedQuery(
                "mfhp.observation.findHeartDiseaseType").setCacheable(true).setCacheRegion(DISEASES_CACHE_REGION)
                .list();
        return (observations.isEmpty() ? null : observations.iterator().next());
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public Disease getStrokeBrainAttack() {
        List<Observation> observations = HibernateUtil.getCurrentSession().getNamedQuery(
                "mfhp.observation.findStrokeBrainAttack").setCacheable(true).setCacheRegion(DISEASES_CACHE_REGION)
                .list();
        return (observations.isEmpty() ? null : observations.iterator().next());
    }

    /**
     * {@inheritDoc}
     */
    public boolean isStrokeOrBrainAttack(Observation o) {
        return o.equals(getStrokeBrainAttack());
    }

    // colorectal cancer- colon cancer, rectal cancer, familial multiple polyposis, hereditary non-polyposis colorectal
    // cancer

    /**
     * {@inheritDoc}
     */
    public boolean isColorectalCancer(Observation o) {
        List<Observation> colorectalCancers = getColorectalCancers();
        return colorectalCancers.indexOf(o) > -1;
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Observation> getColorectalCancers() {
        return HibernateUtil.getCurrentSession().getNamedQuery("mfhp.observation.findColorectalCancers").setCacheable(
                true).setCacheRegion(DISEASES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc} 
     * @see gov.hhs.fhh.service.PersonServiceLocal#isBreastCancer(gov.hhs.mfhp.model.Observation)
     */
    public boolean isBreastCancer(Observation o) {
        return o.equals(getBreastCancer());
    }

    @SuppressWarnings(UNCHECKED)
    private Disease getBreastCancer() {
        List<Observation> observations = HibernateUtil.getCurrentSession().getNamedQuery(
        "mfhp.observation.findBreastCancer").setCacheable(true).setCacheRegion(DISEASES_CACHE_REGION)
        .list();
        return (observations.isEmpty() ? null : observations.iterator().next());
    }

    /**
     * {@inheritDoc} 
     * @see gov.hhs.fhh.service.PersonServiceLocal#isOvarianCancer(gov.hhs.mfhp.model.Observation)
     */
    public boolean isOvarianCancer(Observation o) {
        return o.equals(getOvarianCancer());
    }
    @SuppressWarnings("unchecked")
    private Disease getOvarianCancer() {
        List<Observation> observations = HibernateUtil.getCurrentSession().getNamedQuery(
        "mfhp.observation.findOvarianCancer").setCacheable(true).setCacheRegion(DISEASES_CACHE_REGION)
        .list();
        return (observations.isEmpty() ? null : observations.iterator().next());
    }
    

}

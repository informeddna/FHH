/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.service;

import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.DisplayString;
import gov.hhs.fhh.data.Ethnicity;
import gov.hhs.fhh.data.Race;

import java.util.List;

import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;

import org.hibernate.Query;

import com.fiveamsolutions.nci.commons.util.HibernateUtil;

/**
 * @author bpickeral
 * 
 */
@Stateless
@TransactionAttribute(TransactionAttributeType.SUPPORTS)
public class PersonServiceBean extends GenericServiceBean implements PersonServiceLocal {
    private static final String ALL_DISEASES_CACHE_REGION = "AllDiseases.cache.region";
    private static final String DISEASE_SUB_TYPES_CACHE_REGION = "DiseaseSubTypes.cache.region";
    private static final String DISEASES_CACHE_REGION = "Diseases.cache.region";
    private static final String HISPANIC_ETHNICITIES_CACHE_REGION = "HispanicEthnicities.cache.region";
    private static final String ETHNICITIES_CACHE_REGION = "Ethnicities.cache.region";
    private static final String HAWAIIAN_RACES_CACHE_REGION = "HawaiianRaces.cache.region";
    private static final String ASIAN_RACES_CACHE_REGION = "AsianRaces.cache.region";
    private static final String RACES_CACHE_REGION = "Races.cache.region";
    private static final String FROM = "from ";
    private static final String UNCHECKED = "unchecked";

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Race> getRaces() {
        String query = FROM + Race.class.getName() + " where subType = 'Race'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                RACES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Race> getAsianRaces() {
        String query = FROM + Race.class.getName() + " where subType = 'Asian'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
        ASIAN_RACES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Race> getHawaiianRaces() {
        String query = FROM + Race.class.getName() + " where subType = 'NativeHawaiian'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
        HAWAIIAN_RACES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Ethnicity> getEthnicities() {
        String query = FROM + Ethnicity.class.getName() + " where subType = 'Ethnicity'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
        ETHNICITIES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Ethnicity> getHispanicEthnicities() {
        String query = FROM + Ethnicity.class.getName() + " where subType = 'Hispanic'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
        HISPANIC_ETHNICITIES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Disease> getDiseases() {
        String query = FROM + Disease.class.getName() + " where subType = 'Disease'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
        DISEASES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Disease> getDiseaseSubTypes(Long diseaseId) {
        String queryStr = FROM + Disease.class.getName() + " where parent.id = :diseaseId";
        Query query = HibernateUtil.getCurrentSession().createQuery(queryStr);
        query.setCacheable(true);
        query.setCacheRegion(DISEASE_SUB_TYPES_CACHE_REGION);
        query.setParameter("diseaseId", diseaseId);
        return query.list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Disease> getAllDiseases() {
        String query = FROM + Disease.class.getName();
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
        ALL_DISEASES_CACHE_REGION).list();
    }
    
    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(UNCHECKED)
    public List<Disease> getDiseaseByName(String diseaseName) {
        String queryStr = "SELECT distinct d " + FROM + Disease.class.getName() + " d, " 
            + DisplayString.class.getName() + " ds "
            + "where ds.appDisplay LIKE :diseaseName AND ds.appDisplay NOT LIKE :parentDisease "
            + "AND ds in elements(d.displayStrings) order by ds.appDisplay";
        Query query = HibernateUtil.getCurrentSession().createQuery(queryStr);
        query.setParameter("diseaseName", '%' + diseaseName + '%');
        query.setParameter("parentDisease", '%' + "..." + '%');
        return query.list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<Ethnicity> getEthnicityByCodeAndCodeSystem(String code, String codeSystem) {
        String query = FROM + Ethnicity.class.getName() + " where code = '" + code + "' AND codeSystemName = '"
                + codeSystem + "'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                ETHNICITIES_CACHE_REGION).list();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<Race> getRaceByCodeAndCodeSystem(String code, String codeSystem) {
        String query = FROM + Race.class.getName() + " where code = '" + code + "' AND codeSystemName = '"
                + codeSystem + "'";
        return HibernateUtil.getCurrentSession().createQuery(query).setCacheable(true).setCacheRegion(
                RACES_CACHE_REGION).list();
    }
}

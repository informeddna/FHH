/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.model.mfhp.castor;

import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.util.HL7ConversionUtils;

import java.util.ArrayList;
import java.util.List;

import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;
import com.fiveamsolutions.hl7.model.age.AgeRangeFieldContainer;
import com.fiveamsolutions.hl7.model.age.DeceasedEstimatedAgeNode;
import com.fiveamsolutions.hl7.model.mfhp.GenderNode;

/**
 * @author bpickeral
 *
 */
public class RelationshipHolderNode extends Relative {
    private static final long serialVersionUID = 12423342333553L;
    private List<Relative> parentNodes = new ArrayList<Relative>();

    /**
     * Default constructor.
     */
    public RelationshipHolderNode() {
        //Default constructor
    }
    
    /**
     * Parameterized constructor.
     * @param relative to set
     */
    public RelationshipHolderNode(Relative relative) {
        super(relative);
    }
    
    /**
     * @return the ageRangeFieldHandler
     */
    public DeceasedEstimatedAgeNode getDeceasedEstimatedAgeNode() {
        DeceasedEstimatedAgeNode node = null;
        AgeRangeEnum ageAtDeath = getAgeAtDeath();
        if (ageAtDeath != null) {
            if (ageAtDeath.getOriginalText() != null) {
                node = new DeceasedEstimatedAgeNode(ageAtDeath.getOriginalText());
            } else {
                node = new DeceasedEstimatedAgeNode(ageAtDeath.getUnit(), 
                        ageAtDeath.getLowValue(), ageAtDeath.getHighValue());
            }
        }
        return node;
    }
    
    /**
     * Sets the ageRange based on the AgeRangeHelper passed in.
     * @param daceasedEstimatedAgeNode the daceasedEstimatedAgeNode to get the lowValue from.
     */
    public void setDeceasedEstimatedAgeNode(DeceasedEstimatedAgeNode daceasedEstimatedAgeNode) {
        AgeRangeFieldContainer handler = daceasedEstimatedAgeNode.getAgeRangeHandler();
        if (handler != null) {
            setAgeAtDeath(AgeRangeEnum.getByLowValue(handler.getLowValue()));
        } else if (daceasedEstimatedAgeNode.getCodeNode().getOriginalText().equals(
                AgeRangeEnum.PREBIRTH.getOriginalText())) {
            setAgeAtDeath(AgeRangeEnum.PREBIRTH);
        } else {
            setAgeAtDeath(AgeRangeEnum.UNKNOWN);
        }
        
    }
    
    /**
     * Creates a ClinicalObservationNode containing the information from the Relatives Clinical Observations.
     * @return ClinicalObservationNode
     */
    public ClinicalObservationsNode getClinicalObservationsNode() {
        return HL7ConversionUtils.createClinicalObservationsNode(this);
    }
    
    /**
     * Used by Castor to set the Clinical Observation Node.
     * @param node ClinicalObservationNode containing information
     */
    public void setClinicalObservationsNode(ClinicalObservationsNode node) {
        HL7ConversionUtils.extractClinicalObservationsNode(this, node);
    }
    
    /**
     * Used by Castor to get the multiple birth indicator String.
     * @return multiple birth indicator string
     */
    public String getMultipleBirthIndicator() {
        return HL7ConversionUtils.createMultipleBirthIndicator(this);
    }
    
    /**
     * Used by Castor to get the GenderNode from this object.
     * @return GenderNode
     */
    public GenderNode getGenderNode() {
        return HL7ConversionUtils.createGenderNode(this);
    }
    
    /**
     * Used by Castor to set the GenderNode.
     * @param genderNode to set
     */
    public void setGenderNode(GenderNode genderNode) {
        HL7ConversionUtils.extractGenderNode(this, genderNode);
    }

    /**
     * @return the parentNodes
     */
    public List<Relative> getParentNodes() {
        return parentNodes;
    }

    /**
     * @param parentNodes the parentNodes to set
     */
    public void setParentNodes(List<Relative> parentNodes) {
        this.parentNodes = parentNodes;
    }
}

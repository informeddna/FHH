/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data;

import gov.hhs.fhh.data.util.htmimport.InputNode;

import java.util.HashMap;
import java.util.Map;

/**
 * @author bpickeral
 *
 */
public enum LivingStatus {
    /**
     * Yes.
     */
    YES("yes", "Yes"),
    
    /**
     * No.
     */
    NO("no", "No"),
    
    /**
     * Unknown.
     */
    UNKNOWN("unknown", "Unknown");
    private static final String RESOURCE_KEY_PREFIX = "livingStatus.";
    
    private final String resourceKey;
    private final String htmValue;
    
    private static Map<String, LivingStatus> valueToTypeMap = new HashMap<String, LivingStatus>();
    
    /**
     * Constructor.
     * @param resourceKey
     */
    LivingStatus(String resourceKey, String htmValue) {
        this.resourceKey = resourceKey;
        this.htmValue = htmValue;
    }
    
    /**
     * Returns the <code>LivingStatus</code> corresponding to the given value. Returns null
     * for null value.
     *
     * @param value the value to match
     * @return the matching type.
     */
    public static LivingStatus getByValue(String value) {
        checkType(value);
        return getValueToTypeMap().get(value);
    }
    /**
     * Checks to see that the value given is a legal <code>LivingStatus</code> value.
     *
     * @param value the value to check;
     */

    public static void checkType(String value) {
        if (value != null && !getValueToTypeMap().containsKey(value)) {
            throw new IllegalArgumentException("No matching type for " + value);
        }
    }
    
    /**
     * Creates a value to type map for LivingStatus.
     * @return value to type map
     */
    private static Map<String, LivingStatus> getValueToTypeMap() {
        if (valueToTypeMap.isEmpty()) {
            for (LivingStatus status : values()) {
                valueToTypeMap.put(status.toString(), status);
            }
        }
        return valueToTypeMap;
    }
    
    /**
     * Converts the given htm InputNode to the corresponding LivingStatus constant. The matching is done by htmValue.
     * Throws an IllegalArgumentException if no match is found.
     * @param inputNode the inputNode to convert to a Gender.
     * @return the corresponding Gender constant
     */
    public static LivingStatus fromHTMInputNode(InputNode inputNode) {
        for (LivingStatus livingStatus : LivingStatus.values()) {
            if (livingStatus.getHtmValue().equals(inputNode.getValue())) {
                return livingStatus;
            }
        }
        throw new IllegalArgumentException("No living status found with value " + inputNode.getValue());
    }
    
    /**
     * @return the resourceKey
     */
    public String getResourceKey() {
        return RESOURCE_KEY_PREFIX + resourceKey;
    }
    /**
     * @return the htmValue
     */
    public String getHtmValue() {
        return htmValue;
    } 
}

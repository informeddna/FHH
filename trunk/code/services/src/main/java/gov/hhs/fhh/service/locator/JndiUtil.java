/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.service.locator;

import java.io.IOException;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.apache.log4j.Logger;

/**
 * @author gax
 */
public final class JndiUtil {

    private static final Logger LOG = Logger.getLogger(JndiUtil.class);
    private static final String RESOURCE_NAME = "jndi.properties";

    private static JndiUtil theInstance = new JndiUtil();

    private final InitialContext context;

    private JndiUtil() {
        try {
            Properties props = getProperties();
            context = new InitialContext(props);
        } catch (Exception e) {
            LOG.error("Unable to initialize the JNDI Util.", e);
            throw new IllegalStateException(e);
        }
    }

    /**
     * @return jndi (& jms) properties
     * @throws IOException on class load error
     */
    public static Properties getProperties() throws IOException {
        Properties props = new Properties();
        props.load(JndiUtil.class.getClassLoader().getResourceAsStream(RESOURCE_NAME));
        return props;
    }

    /**
     * @param name name to lookup
     * @return object in default context with given name
     */
    public static Object lookup(String name) {
        return lookup(theInstance.context, name);
    }

    /**
     * @param ctx context
     * @param name name to get
     * @return object in contect with given name
     */
    public static Object lookup(InitialContext ctx, String name) {
        try {
            return ctx.lookup(name);
        } catch (NamingException ex) {
            //LOG.error("------------------Here is what's in the context--(looking for " + name + ")----------");
            LOG.error("------------------Error looking up ctx context for: " + name + ")----------");
            //dump(ctx, 0);
            //LOG.error("-----------------------------------------------------------");
            throw new IllegalStateException(ex);
        }
    }
    /*
     * Method taken out to avoid looping messages into log file
    private static void dump(javax.naming.Context ctx, int indent) {
        try {
            NamingEnumeration<NameClassPair> en = ctx.list("");
            while (en.hasMore()) {
                NameClassPair ncp = en.next();
                String cn = ncp.getClassName();
                String n = ncp.getName();
                LOG.info("\t\t\t\t\t\t".substring(0, indent) + n + " : " + cn);
                try {
                    Object o = ctx.lookup(n);
                    if (o instanceof Context) {
                        dump((Context) o, indent + 1);
                    }
                } catch (Exception e) {
                    LOG.info(e);
                }
            }
        } catch (NamingException ex) {
            LOG.info(ex);
        }
    }
    */
}
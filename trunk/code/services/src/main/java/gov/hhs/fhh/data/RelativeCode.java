/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data;

import java.util.HashMap;
import java.util.Map;

/**
 * @author bpickeral
 *
 */
@SuppressWarnings({ "PMD.ExcessiveParameterList", "ParameterNumber" })
public enum RelativeCode {
   
    /**
     * Natural sister.
     */
    NSIS("nsis", "Sister", null, null, true, false, Gender.FEMALE, "sister"),

    /**
     * Natural brother.
     */
    NBRO("nbro", "Brother", null, null, true, false, Gender.MALE, "brother"),
    
    /**
     * Half sister.
     */
    HSIS("hsis", "Half Sister", null, null, true, false, Gender.FEMALE, "halfSister"),
    
    /**
     * Nephew.
     */
    NEPHEW("nephew", "Nephew", null, null, true, false, Gender.MALE, "nephew"),
    
    /**
     * Niece.
     */
    NIECE("niece", "Niece", null, null, true, false, Gender.FEMALE, "niece"),

    /**
     * Half brother.
     */
    HBRO("hbro", "Half Brother", null, null, true, false, Gender.MALE, "halfBrother"),
    
    /**
     * Daughter.
     */
    DAU("dau", "Daughter", null, null, true, false, Gender.FEMALE, "daughter"),
    
    /**
     * Son.
     */
    SON("son", "Son", null, null, true, false, Gender.MALE, "son"),
    
    /**
     * Granddaughter.
     */
    GRNDAU("grndau", "Granddaughter", null, null, true, false, Gender.FEMALE, null),
    
    /**
     * Grandson.
     */
    GRNSON("grnson", "Grandson", null, null, true, false, Gender.MALE, null),
    
    /**
     * Grandfather - display only.
     */
    GRFTH("grfth", "Grandfather", "MGRFTH", "PGRFTH", true, true, Gender.MALE, null),
    
    /**
     * Maternal grandfather.
     */
    MGRFTH("mgrfth", "Maternal Grandfather", null, null, false, false, Gender.MALE, "maternalGrandfather"),
   
    /**
     * Paternal Grandfather.
     */
    PGRFTH("pgrfth", "Paternal Grandfather", null, null, false, false, Gender.MALE, "paternalGrandfather"),
    
    /**
     * Grandmother - display only.
     */
    GRMTH("grmth", "Grandmother", "MGRMTH", "PGRMTH", true, true, Gender.FEMALE, null),
    
    /**
     * Maternal Grandmother.
     */
    MGRMTH("mgrmth", "Maternal Grandmother", null, null, false, false, Gender.FEMALE, "maternalGrandmother"),
   
    /**
     * Paternal Grandfather.
     */
    PGRMTH("pgrmth", "Paternal Grandmother", null, null, false, false, Gender.FEMALE, "paternalGrandmother"),

    /**
     * Aunt - display only.
     */
    AUNT("aunt", "Aunt", "MAUNT", "PAUNT", true, true, Gender.FEMALE, null),

    /**
     * Maternal Aunt.
     */
    MAUNT("maunt", "Maternal Aunt", null, null, false, false, Gender.FEMALE, "mothersSister"),

    /**
     * Paternal Aunt.
     */
    PAUNT("paunt", "Paternal Aunt", null, null, false, false, Gender.FEMALE, "fathersSister"),
    
    /**
     * Uncle - display only, translates to PAUNT or MAUNT.
     */
    UNCLE("uncle", "Uncle", "MUNCLE", "PUNCLE", true, true, Gender.MALE, null),

    /**
     * Maternal Uncle.
     */
    MUNCLE("muncle", "Maternal Uncle", null, null, false, false, Gender.MALE, "mothersBrother"),

    /**
     * Paternal Uncle.
     */
    PUNCLE("puncle", "Paternal Uncle", null, null, false, false, Gender.MALE, "fathersBrother"),
    
    /**
     * Cousin - display only.
     */
    COUSN("cousn", "Cousin", "MCOUSN", "PCOUSN", true, true,  null, "Cousin"),

    /**
     * Maternal Cousin.
     */
    MCOUSN("mcousn", "Maternal Cousin", null, null, false, false, null, null),

    /**
     * Paternal Cousin.
     */
    PCOUSN("pcousn", "Paternal Cousin", null, null, false, false, null, null),

    /**
     * Self.
     */
    SELF("self", "Self", null, null, false, false, null, "self"),
    
    /**
     * Natural mother.
     */
    NMTH("nmth", "Mother", null, null, true, false, Gender.FEMALE, "mother"),

    /**
     * Natural father.
     */
    NFTH("nfth", "Father", null, null, true, false, Gender.MALE, "father");

    private static final String RESOURCE_KEY_PREFIX = "relativeCode.";
    private static final String RESOURCE_KEY_POS_PREFIX = "relativeCode.possessive.";
    
    private final String resourceKey;
    private final String displayValue;
    private final String maternalCode;
    private final String paternalCode;
    private boolean forDisplay;
    private boolean specifier;
    private final Gender impliedGender;
    private final String htmValue;

    private static Map<String, RelativeCode> valueToTypeMap = new HashMap<String, RelativeCode>();
    
    // CHECKSTYLE:OFF More than 7 parameters
    RelativeCode(String resourceKey, String displayValue, String maternalCode, 
            String paternalCode, boolean forDisplay, boolean specifier, Gender impliedGender, String htmValue) {
    // CHECKSTYLE:ON
        this.resourceKey = resourceKey;
        this.displayValue = displayValue;
        this.maternalCode = maternalCode;
        this.paternalCode = paternalCode;
        this.forDisplay = forDisplay;
        this.specifier = specifier;
        this.impliedGender = impliedGender;
        this.htmValue = htmValue;
    }
    
    /**
     * Returns the <code>RelativeCode</code> corresponding to the given value. Returns null
     * for null value.
     *
     * @param value the value to match
     * @return the matching type.
     */
    public static RelativeCode getByValue(String value) {
        checkType(value);
        return getValueToTypeMap().get(value);
    }
    /**
     * Checks to see that the value given is a legal <code>RelativeCode</code> value.
     *
     * @param value the value to check;
     */

    public static void checkType(String value) {
        if (value != null && !getValueToTypeMap().containsKey(value)) {
            throw new IllegalArgumentException("No matching type for " + value);
        }
    }
 
 
    private static Map<String, RelativeCode> getValueToTypeMap() {
        if (valueToTypeMap.isEmpty()) {
            for (RelativeCode type : values()) {
                valueToTypeMap.put(type.toString(), type);
            }
        }
        return valueToTypeMap;
    }
    
    /**
     * Determines if the implied gender of the <code>RelativeCode</code> is MALE.
     * @return true if the implied gender of the <code>RelativeCode</code> is MALE
     */
    public boolean isMale() {
        return getImpliedGender().equals(Gender.MALE);
    }
 

    /**
     * @return the forDisplay
     */
    public boolean isForDisplay() {
        return forDisplay;
    }


    /**
     * @return the resourceKey
     */
    public String getResourceKey() {
        return RESOURCE_KEY_PREFIX + resourceKey;
    }
    
    /**
     * @return the resourceKey
     */
    public String getPossessiveResourceKey() {
        return RESOURCE_KEY_POS_PREFIX + resourceKey;
    }


    /**
     * @return the maternalCode
     */
    public String getMaternalCode() {
        return maternalCode;
    }

    /**
     * @return the maternalCode
     */
    public RelativeCode getMaternalCodeEnum() {
        return RelativeCode.getByValue(maternalCode);
    }

    /**
     * @return the paternalCode
     */
    public String getPaternalCode() {
        return paternalCode;
    }
    
    /**
     * @return the paternalCode
     */
    public RelativeCode getPaternalCodeEnum() {
        return RelativeCode.getByValue(paternalCode);
    }
    
    /**
     * @param maternal whether to return the maternal branch version
     * @return if maternal is true, the maternal version of this code, otherwise the paternal
     */
    public RelativeCode getBranchSpecificVersion(boolean maternal) {
        return RelativeCode.getByValue(maternal ? maternalCode : paternalCode);
    }

    /**
     * @return the branch specific version
     */
    public boolean hasBranchSpecificVersion() {
        return maternalCode != null;
    }

    /**
     * @return the displayValue
     */
    public String getDisplayValue() {
        return displayValue;
    }
    
    /**
     * @return the specifier
     */
    public boolean isSpecifier() {
        return specifier;
    }

    /**
     * @return the gender implied by this relationship, or null if the relationship is ambiguous wrt gender.
     */
    public Gender getImpliedGender() {
        return impliedGender;
    }

    /**
     * @return the htmValue
     */
    public String getHtmValue() {
        return htmValue;
    }
}

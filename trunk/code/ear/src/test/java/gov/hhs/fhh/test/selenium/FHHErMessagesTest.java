/* Family Health History Portal
 * END USER AGREEMENT
 *
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably
 * grants to the user a non-exclusive, royalty-free right to use, display,
 * reproduce, and distribute this Family Health History portal software
 * (the "software") and prepare, use, display, reproduce and distribute
 * derivative works thereof for any commercial or non-commercial purpose by any
 * party, subject only to the following limitations and disclaimers, which
 * are hereby acknowledged by the user.
 *
 * User agrees that it will not degrade the standards-based format of the software
 * by materially altering the program architecture or data structure in a way
 * that would render the data generated by the altered software incompatible
 * with the original software. The intention of this clause is to ensure the
 * long-term interoperability of family history information gathered by different
 * versions of the tool.
 *
 * User agrees that this END USER AGREEMENT will be provided to any party to
 * whom user distributes the software, and that it will apply to the distributee.
 *
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS
 * trademarks without permission from HHS, and will not imply endorsement of
 * its product by HHS or the Surgeon General.
 *
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED,
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE,
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT,
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 *
 */
package gov.hhs.fhh.test.selenium;

import junit.framework.Assert;

import org.junit.Test;

/**
 * @author kelamin
 *
 *
 *
 *
 */
public class FHHErMessagesTest extends AbstractFHHSeleniumTest {

    private static final String VALID_NUMBER_ERROR = " must be a valid number greater than 0.";

    @Test
    public void testErrorMessages() throws Exception {
        openFHH();
        TestErrors();
    }

    // test the Error Messages on FHH site
    public void TestErrors() throws Exception {
        selenium.click("link=Create a Family Health History");
        selenium.waitForPageToLoad("48000");
        waitForFrameAndSelectIt("popupFrame");
        waitForText("Name");
        clickAndWait("personForm_0");
        waitForText("Gender is a required field");
        waitForText("Date of Birth is a required field");
        selenium.type("personForm_person_name", "Test Familly");
        selenium.click("personForm_person_genderMALE");
        selenium.type("personForm_dateOfBirthString", "02/011974");
        clickAndWait("personForm_0");
        selenium.waitForPageToLoad("48000");
        waitForText("exact:Date of Birth must be in date format, using 2 digits for month, 2 digits for date, and 4 digits for year (January 3, 1963 as 01/03/1963).");
        selenium.type("personForm_dateOfBirthString", "02/01/1974");
        selenium.type("heightUnit1", "5.8");
        clickAndWait("personForm_0");
        waitForText("Feet");
        selenium.type("heightUnit1", "5");
        selenium.type("personForm_weightString", "1.2");
        clickAndWait("personForm_0");
        assertNumberErrorExists("Weight");
        selenium.type("heightMetric", "1.1");
        selenium.type("heightUnit2", "2.4");
        clickAndWait("personForm_0");
        assertNumberErrorExists("Centimeters");
        assertNumberErrorExists("Inches");
        selenium.type("heightMetric", "22");
        selenium.type("heightUnit2", "2");
        selenium.type("personForm_weightString", "3.2");
        clickAndWait("personForm_0");
        assertNumberErrorExists("Weight");
        selenium.type("personForm_weightString", "300");
        clickAndWait("personForm_0");
        waitForText("How many brothers do you have");
        selenium.type("familyTreeForm_brothers", "2.2");
        selenium.click("familyTreeNext");
        waitForText("Please enter a valid value");
        selenium.type("familyTreeForm_brothers", "2");
        selenium.click("familyTreeNext");
        waitForText("Update My Family History");
        Thread.sleep(2000);
        selenium.click("link=Add Another Family Member");
        waitForFrameAndSelectIt("popupFrame");
        waitForText("Relationship to me");
        selenium.click("submitRelative");
        Thread.sleep(3000);
        Assert.assertTrue(selenium.isTextPresent("Relationship to me is required."));
        selenium.select("relativeForm_selectedCode", "label=Aunt");
        selenium.click("submitRelative");
        waitForText("Relationship is required.");
        waitForText("Mother");
        selenium.select("relativeForm_relationshipSpecifier", "label=Mother");
        selenium.click("submitRelative");
        waitForText("Name");
        selenium.type("personForm_relative_name", "test");
        selenium.click("personForm_relative_livingStatusYES");
        selenium.type("personForm_dateOfBirthString", "2");
        selenium.type("personForm_relativeAge", "2.1");
        clickAndWait("personForm_0");
        waitForText("Name");
        waitForText("Date of Birth must be in date format");
        assertNumberErrorExists("Age");
    }

    private void assertNumberErrorExists(String fieldName) {
        selenium.isTextPresent(fieldName + VALID_NUMBER_ERROR);
    }
}
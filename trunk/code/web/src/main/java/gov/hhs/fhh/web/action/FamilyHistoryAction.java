/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import gov.hhs.fhh.data.Ethnicity;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Race;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeBranch;
import gov.hhs.fhh.data.util.HL7ConversionUtils;
import gov.hhs.fhh.data.util.PersonUtils;
import gov.hhs.fhh.data.util.htmimport.HTMImporter;
import gov.hhs.fhh.model.mfhp.castor.FhhCastorUtils;
import gov.hhs.fhh.service.locator.FhhRegistry;
import gov.hhs.fhh.service.util.FhhUtils;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;
import gov.hhs.fhh.xml.PatientPerson;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.exolab.castor.mapping.MappingException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;

import com.fiveamsolutions.nci.commons.web.struts2.action.ActionHelper;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.Preparable;

/**
 * @author bpickeral
 * 
 */
@SuppressWarnings({ "PMD.TooManyMethods", "PMD.CyclomaticComplexity" })
public class FamilyHistoryAction extends ActionSupport implements Preparable {
    private static final long serialVersionUID = 1161714L;
    private static final Logger LOG = Logger.getLogger(FamilyHistoryAction.class);
    private static final String IMPORT_ERROR = "Error importing file";
    private static final String IMPORT_COMPLETE = "importComplete";
    private static final String IMPORT_FAILED = "input";
    private static final String IMPORT_FIELD_NAME = "importedFile";
    private Person person;
    private File importedFile;
    private RelativeBranch relativeBranch;
    private boolean maintainState;
    private String removeRelativeId;

    /**
     * {@inheritDoc}
     */
    public void prepare() {
        if (FhhHttpSessionUtil.getRootKey() == null) {
            FhhHttpSessionUtil.storePersonInSession(new Person());
        }
        Person rootPerson = FhhHttpSessionUtil.getRootPerson();
        if (rootPerson != null) {
            setPerson(rootPerson);
            this.relativeBranch = new RelativeBranch(getPerson());
        }
    }

    /**
     * @return success
     */
    public String start() {
        if (!maintainState) {
            setPerson(new Person());
            FhhHttpSessionUtil.storePersonInSession(getPerson());
            FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.POPUP_KEY, "create");
            relativeBranch = null;
        }
        return SUCCESS;
    }

    /**
     * Method invokes the familyHistory page.
     * 
     * @return path String
     */
    public String familyHistory() {
        return SUCCESS;
    }

    
    /**
     * Method invokes the importfamilyHistory page and lets it know that we're coming back there after cancelling
     * loading a history from mshv.
     * 
     * @return path String
     */
    public String importFamilyHistoryCancelledMshv() {
        ActionHelper.saveMessage(getText("importLocal.fromMshv.canceled"));
        return SUCCESS;
    }
    
    
    /**
     * Method invokes the familyHistoryDetail page.
     * 
     * @return path String
     */
    public String familyHistoryDetail() {
        return SUCCESS;
    }

    /**
     * Method invokes the familyHistoryDetail page.
     * 
     * @return path String
     */
    public String saveFamilyHistory() {
        return SUCCESS;
    }

    /**
     * Method invokes the familyHistoryDetail page.
     * 
     * @return path String
     */
    public String importFamilyHistory() {
        return SUCCESS;
    }

    /**
     * Imports the Person Object to session.
     * 
     * @return input
     */
    public String importXmlFile() {
        InputStream in = null;
        File file = getImportedFile();
        if (file == null) {
            addFieldError(IMPORT_FIELD_NAME, getText("importLocal.importedFile.required"));
            return IMPORT_FAILED;
        }
        try {
            in = FileUtils.openInputStream(file);
            String fileStr = FhhCastorUtils.getInputStreamAsString(in);
            if (fileStr.contains("<?xml")) {
                LOG.debug("about to import xml file");
                importXMLFile(fileStr);
            } else {
                importHTMFile(fileStr);
            }
            PersonUtils.setImmediateRelatives(getPerson());
            PersonUtils.setAllKnownParents(getPerson());
            FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.getRootKey(), getPerson());
        } catch (Exception e) {
            LOG.error(IMPORT_ERROR, e);
            addFieldError(IMPORT_FIELD_NAME, getText("importFamilyHistory.error.importingFile"));

            return IMPORT_FAILED;
        } finally {
            IOUtils.closeQuietly(in);
        }
        return IMPORT_COMPLETE;
    }

    /**
     * Populates the family Tree with attributes from a version 2.x FHH XML file.
     * 
     */
    private void importXMLFile(String xmlFile) throws MarshalException, ValidationException, IOException,
            MappingException {
        PatientPerson unmarshalledPerson = (PatientPerson) 
                    FhhCastorUtils.unmarshallXMLFile(xmlFile, new PatientPerson());
        setPerson(HL7ConversionUtils.person(unmarshalledPerson));
        // Set parents of relatives
        setPerson(FhhUtils.setupParents(getPerson()));
        PersonUtils.xssFilter(getPerson());
        FhhHttpSessionUtil.addAllUserEnteredDiseases(getPerson());
        populateRaceEthnicityIds(getPerson());
        for (Relative relative : getPerson().getRelatives()) {
            populateRaceEthnicityIds(relative);
        }
    }
    
    
    /**
     * @param personParam the person to populate Race and Ethnicity ids
     */
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public static void populateRaceEthnicityIds(Person personParam) {
        for (Ethnicity ethnicity : personParam.getEthnicities()) {
            if (ethnicity.getId() == null || ethnicity.getId() == 0) {
                List<Ethnicity> matching = FhhRegistry.getPersonService().getEthnicityByCodeAndCodeSystem(
                        ethnicity.getCode(), ethnicity.getCodeSystemName());
                if (matching != null && !matching.isEmpty()) {
                    ethnicity.setId(matching.get(0).getId());
                }
            }
        }
        
        for (Race race : personParam.getRaces()) {
            if (race.getId() == null || race.getId() == 0) {
                List<Race> matching = FhhRegistry.getPersonService().getRaceByCodeAndCodeSystem(
                        race.getCode(), race.getCodeSystemName());
                if (matching != null && !matching.isEmpty()) {
                    race.setId(matching.get(0).getId());
                }
            }
        }
    }
    
    
    /**
     * Populates the family Tree with attributes from a version 1.x FHH HTM file.
     */
    private void importHTMFile(String htmFile) throws MarshalException, ValidationException, IOException,
            MappingException {
        HTMImporter importer = new HTMImporter();
        setPerson(importer.build(htmFile));
    }

    /**
     * Action removes the relative of index relativeId and all of the relatives descendants from the family tree.
     * 
     * @return path String
     */
    public String removeRelative() {
        List<Relative> removeList = new ArrayList<Relative>();
        Relative relativeToRemove = getPerson().getRelative(UUID.fromString(getRemoveRelativeId()));
        removeDescendants(relativeToRemove, removeList);
        getPerson().getRelatives().remove(relativeToRemove);
        getPerson().getRelatives().removeAll(removeList);
        getPerson().getUnrelatedRelatives().remove(relativeToRemove);
        setRelativeBranch(new RelativeBranch(getPerson()));
        return "familyHistory";
    }

    /**
     * Method adds relatives to the removeList that are parents of the relative passed in. Method calls
     * removeDescendants on any descendants added to the removeList.
     * 
     * @param relativeRemoved The ancestor of the relatives to be removed.
     * @param removeList The list of relatives to be removed.
     */
    private void removeDescendants(Relative relativeRemoved, List<Relative> removeList) {
        if (relativeRemoved == null) {
            return;
        }
        for (Relative currRelative : getPerson().getRelatives()) {
            if (relativeRemoved.equals(currRelative.getMother()) || relativeRemoved.equals(currRelative.getFather())) {
                removeList.add(currRelative);
                removeDescendants(currRelative, removeList);
            }
        }
    }

    /**
     * @return the person
     */
    public Person getPerson() {
        return person;
    }

    /**
     * @param person the person to set
     */
    public void setPerson(Person person) {
        this.person = person;
    }

    /**
     * @return the importedFile
     */
    public File getImportedFile() {
        return importedFile;
    }

    /**
     * @param importedFile the importedFile to set
     */
    public void setImportedFile(File importedFile) {
        this.importedFile = importedFile;
    }

    /**
     * @return the relativeBranch
     */
    public RelativeBranch getRelativeBranch() {
        return relativeBranch;
    }

    /**
     * @param relativeBranch the relativeBranch to set
     */
    public void setRelativeBranch(RelativeBranch relativeBranch) {
        this.relativeBranch = relativeBranch;
    }

    /**
     * @return the maintainState
     */
    public boolean isMaintainState() {
        return maintainState;
    }

    /**
     * @param maintainState the maintainState to set
     */
    public void setMaintainState(boolean maintainState) {
        this.maintainState = maintainState;
    }

    /**
     * @return the removeRelativeId
     */
    public String getRemoveRelativeId() {
        return removeRelativeId;
    }

    /**
     * @param removeRelativeId the removeRelativeId to set
     */
    public void setRemoveRelativeId(String removeRelativeId) {
        this.removeRelativeId = removeRelativeId;
    }

}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.service.FhhWebException;
import gov.hhs.fhh.service.HealthVaultContext;
import gov.hhs.fhh.service.HealthVaultLocal;
import gov.hhs.fhh.service.PersonInfo;
import gov.hhs.fhh.service.locator.FhhRegistry;
import gov.hhs.fhh.web.Settings;
import gov.hhs.fhh.web.data.ConnectionInfo;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;

import java.io.IOException;
import java.io.InputStream;

import javax.xml.xpath.XPathExpressionException;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.apache.commons.httpclient.protocol.Protocol;
import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;

import com.fiveamsolutions.hl7.messaging.provider.DtoTransformException;
import com.fiveamsolutions.hl7.model.Pedigree;
import com.fiveamsolutions.nci.commons.web.struts2.action.ActionHelper;
import com.microsoft.hsg.HVAccessDeniedException;
import com.microsoft.hsg.HVInvalidXmlException;
import com.opensymphony.xwork2.Preparable;

/**
 * @author bpickeral
 * 
 */
@SuppressWarnings("PMD.TooManyMethods")
public class HealthvaultAction extends AbstractFHHAction implements Preparable {
    private static final long serialVersionUID = 1L;
    private static final Logger LOG = Logger.getLogger(HealthvaultAction.class);

    private static final String TOKEN_NAME = "wctoken";
    private static final String HV_PEDIGREE_LOADED = "healthVaultPedigreeLoaded";
    private static final String HV_PEDIGREE_LOAD_ERROR = "healthVaultPedigreeLoadError";
    private static final String SAVE_TO_HV = "saveToHV";
    private static final String SAVE_LOAD_HV = "saveLoadHV";
    private static final String LOAD_PREVIEWED_PEDIGREE = "loadedPreviewedPedigree";
    private static final String PREVIEW_CHART_RESULT = "previewChartResult";
    private static final String HV_CONNECT_TO_SAVE_ERROR = "failHvConnectToSaveError";
    private static final String HV_CONNECT_TO_LOAD_ERROR = "failHvConnectToLoadError";
    private PersonInfo sessionInfo;
    private Person person;
    private Pedigree pedigree;
    private String response;

    /**
     * Enum that helps us determine whether to send the user to ms support or mshv support in case of an exception.
     * 
     * @author vsemenov
     * 
     */
    enum HvCauseOfProblem {
        DtoTransformException(true), HVInvalidXmlException(true), HVAccessDeniedException(false), OtherException(true), 
        CanNotConnectToHvException(false);

        private final boolean mfhpResponsibility;

        private HvCauseOfProblem(final boolean mfhpResponsibility) {
            this.mfhpResponsibility = mfhpResponsibility;
        }

        /**
         * @return the mfhpResponsibility
         */
        public boolean isMfhpResponsibility() {
            return mfhpResponsibility;
        }
    }

    /**
     * {@inheritDoc}
     */
    public void prepare() {
        final ConnectionInfo connectionInfo = FhhHttpSessionUtil.getHVSession();
        final Person rootPerson = FhhHttpSessionUtil.getRootPerson();
        if (rootPerson != null) {
            setPerson(rootPerson);
        }
        if (connectionInfo != null) {
            setSessionInfo(connectionInfo);
        }
    }

    /**
     * Method requests the wctoken from healthvault. User is returned to the Healthvault manager screen.
     * 
     * @return path String
     */
    public String connect() {
        LOG.info("in connect() method, about to set popup_key to hvsave");
        try {
            isHvReachable();
            return innerConnect();
        } catch (final Exception e) {
            FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.POPUP_KEY, "hvSaveError");
            LOG.error("failed to connect to healthvault to save", e);
            ActionHelper.saveMessage(HV_CONNECT_TO_SAVE_ERROR);
            return HV_CONNECT_TO_SAVE_ERROR;
        }
    }

    String innerConnect() throws IOException, XPathExpressionException {
        FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.POPUP_KEY, "hvsave");
        final String retval = connectAndReturn(Settings.INSTANCE.getSetting(Settings.SAVE_PEDIGREE),
                HealthVaultContext.SAVE, SUCCESS, SAVE_TO_HV);
        if (retval.equals(SAVE_TO_HV)) {
            setUpConnectionInfoName(sessionInfo);
        }
        return retval;
    }

    /**
     * Method requests the wctoken from healthvault. User is returned to the Healthvault manager screen.
     * 
     * @return path String
     */
    public String connectToLoad() {
        LOG.info("in connectToload() method");
        try {
            // "ping"(socket) hv before actually redirecting the user there so they dont get a 404
            isHvReachable();
            // User is required to log into healthvault again once they visit the home page
            setSessionInfo(null);
            final String result = connectAndReturn(Settings.INSTANCE.getSetting(Settings.LOAD_PEDIGREE),
                    HealthVaultContext.LOAD, "successLoad", null);
            if (result == null) {
                return getPedigreeFromHealthVault();
            }
            return result;
        } catch (final Exception e) {
            FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.POPUP_KEY, "hvloadError");
            LOG.error("failed to connect to healthvault to load", e);
            ActionHelper.saveMessage(HV_CONNECT_TO_LOAD_ERROR);
            return HV_CONNECT_TO_LOAD_ERROR;
        }
    }

    private String connectAndReturn(final String returnUrl, HealthVaultContext hvContext,
            final String strutsResultConnectSuccess, final String strutsResultConnectedAlready) throws IOException {

        final HealthVaultLocal healthVaultService = FhhRegistry.getHealthVaultService();
        final StringBuffer url = healthVaultService.getAuthenicationURL(hvContext, Settings.INSTANCE
                .getSetting(Settings.APPLICATION_BASE_URL)
                + returnUrl);
        if (sessionInfo == null) {
            LOG.debug("redirecting user to " + url.toString());
            ServletActionContext.getResponse().sendRedirect(url.toString());
            return strutsResultConnectSuccess;
        } else {
            return strutsResultConnectedAlready;
        }
    }

    /**
     * Method invokes the Healthvault manager screen.
     * 
     * @return path String
     */
    public String healthvaultManager() {
        try {
            if (getSessionInfo() == null) {
                setSessionInfo(setupSessionInfo());
            }
            setUpConnectionInfoName(getSessionInfo());
            return SAVE_TO_HV;
        } catch (final Exception e) {
            // occurs if we connected to hv successfully, but then it went down right as we were trying to setup
            // sessioninfo.
            FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.POPUP_KEY, "hvSaveError");
            LOG.error("failed to connect to healthvault to save", e);
            ActionHelper.saveMessage(HV_CONNECT_TO_SAVE_ERROR);
            return HV_CONNECT_TO_SAVE_ERROR;
        }

    }

    private PersonInfo setupSessionInfo() throws XPathExpressionException, IOException {
        // coming from shell
        PersonInfo sessionInfoToSetup = null;
        final String authToken = ServletActionContext.getRequest().getParameter(TOKEN_NAME);
        if (authToken != null) {
            sessionInfoToSetup = createConnectionInfo(authToken);
            FhhHttpSessionUtil.setHVSession(sessionInfoToSetup);
        } else {
            throw new IllegalArgumentException("invalid wctoken, see https://jira.5amsolutions.com/browse/FHH-1538");
        }
        return sessionInfoToSetup;
    }

    /**
     * @param authToken
     * @return
     * @throws XPathExpressionException
     * @throws IOException
     */
    private PersonInfo createConnectionInfo(final String authToken) throws XPathExpressionException, IOException {
        final ConnectionInfo connectionInfo = new ConnectionInfo();
        FhhRegistry.getHealthVaultService().getPersonInfo(authToken, connectionInfo);

        setSessionInfo(connectionInfo);
        return connectionInfo;
    }

    /**
     * @param personInfo - person info to set name for
     * @throws XPathExpressionException - in case of an error.
     * @throws IOException - in case of an error.
     */
    private void setUpConnectionInfoName(final PersonInfo personInfoParam) throws XPathExpressionException, 
        IOException {
        personInfoParam.setDisplayName(personInfoParam.getPersonName());
    }

    /**
     * @return @return String result (confirmSaveToHealthVault.jsp)
     */
    public String confirmSaveToHealthVault() {
        return SUCCESS;
    }

    /**
     * Saves the date to MS Healthvault.
     * 
     * @return String result (saveToHealthvault.jsp)
     */
    public String saveToHealthvault() {
        try {
            FhhRegistry.getMessagingGatewayService().saveToHealthVault(getSessionInfo(), getPerson());
            return SUCCESS;
        } catch (final Exception e) {
            LOG.error(e.fillInStackTrace());
            final HvCauseOfProblem causeOfProblem = getHvCauseOfProblem(e);
            LOG.error("failed to save to healthvault", e);
            if (causeOfProblem.isMfhpResponsibility()) {
                ActionHelper.saveMessage("failedToSaveToMshvMfhp");
            } else {
                ActionHelper.saveMessage("failedToSaveToMshv");
            }
            return "failedToSaveToMshv";
        }
    }

    /**
     * @return - success.
     * @throws XPathExpressionException if there is an error in the XPath
     * @throws IOException if IO error occurs
     */
    public String getPedigreeFromHealthVault() throws XPathExpressionException, IOException {
        try {
            LOG.info("in begining of getPedigreeFromHealthVault() method");
            if (getSessionInfo() == null) {
                setSessionInfo(setupSessionInfo());
            }
            setUpConnectionInfoName(getSessionInfo());
            //
            // LOAD FROM HEALTH VAULT
            //
            setPerson(FhhRegistry.getMessagingGatewayService().loadFromHealthVault(getSessionInfo()));
            // if it turns out that this is unambiguously pointing at No data in MS HealthVault
            // then one should reroute this to a specific error message and not just leave it
            // with the updated status.
            if (getPerson() == null) {
                LOG.error("could not get a dataperson from hv");
                // this is the only hint at the likely culprit
                // edit reference to more specific message key in the errorMessage.tag case
                throw new Exception("could not get a dataperson from hv");
            }
            FhhHttpSessionUtil.addAllUserEnteredDiseases(getPerson());
            FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.PREVIEW_PERSON_KEY, getPerson());
            FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.getRootKey(), null);
            LOG.info("in getPedigreeFromHealthVault() method, about to set popup_key to hvload");
            FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.POPUP_KEY, "hvload");
        } catch (final Exception e) {
            final HvCauseOfProblem causeOfProblem = getHvCauseOfProblem(e);
            LOG.error("failed to copy from healthvault", e);
            if (causeOfProblem.isMfhpResponsibility()) {
                ActionHelper.saveMessage("healthVaultPedigreeLoadMfhpError");
            } else {
                ActionHelper.saveMessage(HV_PEDIGREE_LOAD_ERROR);
            }
            FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.POPUP_KEY, "hvloadError");
            return HV_PEDIGREE_LOAD_ERROR;
        }

        return HV_PEDIGREE_LOADED;
    }

    /**
     * uses a socket to verify that it can get hv, throws an exception if it can not.
     * 
     * We do this check to prevent the user being redirected and losing their pedigree data. In an attempt
     * provide a better user experience.
     * 
     * @throws IOException - can not resolve the ie host name, or can not reach it.
     */
    public void isHvReachable() throws IOException {
        final HttpClient httpclient = new HttpClient();
        httpclient.getHostConfiguration().setHost(FhhRegistry.getHealthVaultService().getShellUrl().getHost(),
                FhhRegistry.getHealthVaultService().getShellUrl().getPort(),
                Protocol.getProtocol(FhhRegistry.getHealthVaultService().getShellUrl().getProtocol()));
        final GetMethod httpget = new GetMethod("/");
        httpclient.getParams().setParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);
        httpclient.executeMethod(httpget);
    }

    /**
     * Examines the exception to determine if mfhp or hv is the cause of the problem. package accessible for testing.
     * 
     * @param e - exception to examine.
     * @return - the cause of problem.
     */
    HvCauseOfProblem getHvCauseOfProblem(final Throwable e) {
        HvCauseOfProblem retval = HvCauseOfProblem.OtherException;
        Throwable currentException = e;
        do {
            if (currentException instanceof DtoTransformException) {
                retval = HvCauseOfProblem.DtoTransformException;
                break;
            } else if (currentException instanceof HVAccessDeniedException) {
                retval = HvCauseOfProblem.HVAccessDeniedException;
            } else if (currentException instanceof HVInvalidXmlException) {
                retval = HvCauseOfProblem.HVInvalidXmlException;
                break;
            } else if (currentException instanceof IOException) {
                retval = HvCauseOfProblem.CanNotConnectToHvException;
                break;
            }
            currentException = currentException.getCause();
        } while (currentException != null);

        return retval;
    }

    /**
     * sets the person in FhhHttpSessionUtil.PREVIEW_PERSON_KEY as the root person in session.
     * 
     * @return "loadedPreviewedPedigree".
     */
    public String loadPreviewedPedigreeFromMshv() {
        setPerson((Person) FhhHttpSessionUtil.getSession().getAttribute(FhhHttpSessionUtil.PREVIEW_PERSON_KEY));
        FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.getRootKey(), getPerson());
        FhhHttpSessionUtil.setAttribute(FhhHttpSessionUtil.PREVIEW_PERSON_KEY, null);
        return LOAD_PREVIEWED_PEDIGREE;
    }

    /**
     * @return - the string "previewChartResult"
     */
    public String previewChartResult() {
        return PREVIEW_CHART_RESULT;
    }

    /**
     * Screen where user can save and load data from healthvault.
     * 
     * @return save load hv
     */
    public String saveLoadHV() {
        return SAVE_LOAD_HV;
    }

    /**
     * @return "successLoadPedigree".
     */
    public String loadHvConfirm() {
        return "successLoadPedigree";
    }

    /**
     * @return the sessionInfo
     */
    public PersonInfo getSessionInfo() {
        return sessionInfo;
    }

    /**
     * @param sessionInfo the sessionInfo to set
     */
    public void setSessionInfo(final PersonInfo sessionInfo) {
        this.sessionInfo = sessionInfo;
    }

    /**
     * @return the person
     */
    public Person getPerson() {
        return person;
    }

    /**
     * @param person the person to set
     */
    public void setPerson(final Person person) {
        this.person = person;
    }

    /**
     * @return the response
     */
    public String getResponse() {
        return response;
    }

    /**
     * @param response the response to set
     */
    public void setResponse(final String response) {
        this.response = response;
    }

    /**
     * @return the pedigree
     */
    public Pedigree getPedigree() {
        return pedigree;
    }

    /**
     * @param pedigree the pedigree to set
     */
    public void setPedigree(final Pedigree pedigree) {
        this.pedigree = pedigree;
    }

    /**
     * @return the previewChart
     * @throws FhhWebException - in case of an error.
     */
    public InputStream getPreviewChart() throws FhhWebException {
        return ViewReportAction.getDiagramForPerson((Person) FhhHttpSessionUtil.getSession().getAttribute(
                FhhHttpSessionUtil.PREVIEW_PERSON_KEY), false, null);
    }
}

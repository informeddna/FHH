/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.web.FhhWebException;
import gov.hhs.fhh.web.util.FhhCastorUtils;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;
import gov.hhs.fhh.web.util.FhhUtils;
import gov.hhs.fhh.web.util.RelativeDraw;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.apache.struts2.interceptor.validation.SkipValidation;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.Preparable;

/**
 * @author bpickeral
 *
 */
public class ReindexAction extends ActionSupport implements Preparable {
    private static final long serialVersionUID = 116173314L;
    
    private static final String EXTENSION_ID = "718163810183";
    private static final String DOWNLOAD_DOC_NAME = "FamilyHistory.xml";
    private static final String DEFAULT_DOC_PREFIX = "My_";
    private static final String MAPPING_FILE = "/mapping.xml";
    private static final String XML_FILE_FOOTER = "</patient></subject></FamilyHistory>";
    private static final String XML_COMMENT = "<!--This file was produced by the Family Health Portrait tool "
        + "at http://familyhistory.hhs.gov. You should not attempt to edit the file. "
        + "Visit http://familyhistory.hhs.gov to upload the file for viewing and editing. The web site also"
        + " can provide a viewable and printable chart and diagram of the family health history.-->";
   
    private Person person;
    private Person proband;
    private String fileName;
    private Long relativeId;
    private InputStream downloadFile;
    
    /**
     * {@inheritDoc}
     */
    public void prepare() {
        Person rootPerson = FhhHttpSessionUtil.getRootPerson();
        if (rootPerson != null) {
            setPerson(rootPerson);
        }
    }

    /**
     * Method invokes the reindex page.
     * 
     * @return path String
     */
    public String reindex() {
        return SUCCESS;
    }
    
    /**
     * Method sends family history detail to output in the form of an XML document.
     * Method assumes the relative Ids are set.
     * 
     * @return path String
     * @throws FhhWebException if there is an error
     */
    public String saveXmlDocument() throws FhhWebException {
        proband = getPerson();
        if (getRelativeId() != null) {
            proband = proband.recenterOn(getRelativeId().intValue());
        }
        
        StringWriter stringWriter = new StringWriter();
        generateFileName();
        StringBuffer sb = new StringBuffer();
        sb.append(generateHistoryHeader());
        try {
            FhhCastorUtils.marshallXmlFile(stringWriter, 
                    FamilyHistoryAction.class.getResource(MAPPING_FILE).getPath(), proband);
        } catch (Exception e) {
            throw new FhhWebException(e);
        }
        sb.append(stringWriter.toString());
        sb.append(XML_FILE_FOOTER);
        downloadFile = new ByteArrayInputStream(sb.toString().getBytes());
        
        return "downloadXMLFile";
    }
    
    
    /**
     * Method creates a new Person for the reindexed family member
     * Method assumes the relative Ids are set.
     * 
     * @return InputStream
     * @throws FhhWebException on error.
     */
    public InputStream getReindexPreview() throws FhhWebException {
        proband = getPerson();
        if (getRelativeId() != null) {
            proband = proband.recenterOn(getRelativeId().intValue());
        }
        // need to add parents or grandparents, if they're not part of the recentered person
        proband = FhhUtils.setupParents(proband);
        // now draw the png
        try {
            RelativeDraw selfDraw = new RelativeDraw(new Relative(proband));
            selfDraw.setCode(RelativeCode.SELF.toString());
            selfDraw.setShowNames(true);
            return new ByteArrayInputStream(selfDraw.organizeFamilyTree(proband));
        } catch (Exception e) {
            LOG.info("catching an exception!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            LOG.info(e.getMessage());
            LOG.info(e.getCause().toString());
            LOG.info(e.getStackTrace().toString());
        }
        return new ByteArrayInputStream("hello".getBytes());
    }
    
    /**
     * Retrieves the pedigree diagram.
     * 
     * @return return for pedigree diagram
     */
    @SkipValidation
    public String retrieveImage() {
        return "previewImage";
    }
    
    /**
     * Retrieves the pedigree diagram for reindexing.
     * 
     * @return pedigree diagram after reindex
     */
    @SkipValidation
    public String previewReindex() {
        return "success";
    }


    
    /**
     * Method transmits the family history file to the HttpServletResponse output stream.
     * @return input stream containgint the xml file
     */
    public InputStream getDownloadFile() {
        // Most recent version of the file has been saved
        if (relativeId == null) {
            proband.setXmlFileSaved(true);
        }
        return downloadFile;    
    }
    
    /**
     * Generates and stores the xml file name.
     **/
    private void generateFileName() {
        StringBuffer fileNameBuff = new StringBuffer();
        if (proband.getName() != null) {
            fileNameBuff.append(proband.getName()).append('_');
        } else {
            fileNameBuff.append(DEFAULT_DOC_PREFIX);
        }
        fileNameBuff.append(DOWNLOAD_DOC_NAME);
        setFileName(fileNameBuff.toString().replaceAll(" ", "_"));
    }

    /**
     * Generates the family history header for the xml document. Todo: Once the FamilyHistory Class is implemented, do
     * not hardcode the values.
     **/
    private static String generateHistoryHeader() {
        Date today = new Date();
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd", Locale.US);
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + XML_COMMENT 
                + "<FamilyHistory classCode=\"OBS\" moodCode=\"EVN\">"
                + "<id extention=\"gov.hhs.fhh:" + EXTENSION_ID + "\" />" + "<effectiveTime value=\""
                + format.format(today) + "\" />"
                + "<methodCode displayName=\"Surgeon General's Family Health History Tool\" />"
                + "<subject typeCode=\"SBJ\">" + "<patient classCode=\"PAT\">";
    }

    /**
     * @return the person
     */
    public Person getPerson() {
        return person;
    }

    /**
     * @param person the person to set
     */
    public void setPerson(Person person) {
        this.person = person;
    }

    /**
     * @return the fileName
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * @param fileName the fileName to set
     */
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * @return the proband
     */
    public Person getProband() {
        return proband;
    }

    /**
     * @param proband the proband to set
     */
    public void setProband(Person proband) {
        this.proband = proband;
    }

    /**
     * @return the relativeId
     */
    public Long getRelativeId() {
        return relativeId;
    }

    /**
     * @param relativeId the relativeId to set
     */
    public void setRelativeId(Long relativeId) {
        this.relativeId = relativeId;
    }
}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.web.test.AbstractFhhWebTest;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;

import org.junit.Test;

/**
 * @author bpickeral
 *
 */
public class AddFamilyTreeActionTest extends AbstractFhhWebTest {
    private final AddFamilyTreeAction action = new AddFamilyTreeAction();
    private final String SUCCESS = "success";
    private final String SUBMIT = "submit";
    private final String MIN_HEX = "80000000";
    private final Integer DUMMY_NUM = 1;
    

    @Test
    public void testPrepare() {
        Person p = new Person();
        action.prepare();
        
        FhhHttpSessionUtil.getSession().setAttribute(MIN_HEX, p);
        FhhHttpSessionUtil.getSession().setAttribute(FhhHttpSessionUtil.ROOT_KEY, MIN_HEX);
        action.prepare();
        assertEquals(p, action.getPerson());
    }

    @Test
    public void testAddFamilyTree() {
        assertEquals(SUCCESS, action.addFamilyTree());
    }
    
    @Test
    public void testSubmitFamilyTree() {
        Person p = new Person();
        action.setPerson(p);
        assertEquals(p, action.getPerson());
        
        //Test adding no relatives
        assertEquals(SUBMIT, action.submitFamilyTree());
        assertEquals(6, action.getPerson().getRelatives().size());
        
        //Test adding all relatives
        action.setBrothers(DUMMY_NUM);
        action.setSisters(DUMMY_NUM);
        action.setSons(DUMMY_NUM);
        action.setDaughters(DUMMY_NUM);
        action.setPaunts(DUMMY_NUM);
        action.setPuncles(DUMMY_NUM);
        action.setMaunts(DUMMY_NUM);
        action.setMuncles(DUMMY_NUM);
        
        assertEquals(DUMMY_NUM, action.getBrothers());
        assertEquals(DUMMY_NUM, action.getSisters());
        assertEquals(DUMMY_NUM, action.getSons());
        assertEquals(DUMMY_NUM, action.getDaughters());
        assertEquals(DUMMY_NUM, action.getPaunts());
        assertEquals(DUMMY_NUM, action.getPuncles());
        assertEquals(DUMMY_NUM, action.getMaunts());
        assertEquals(DUMMY_NUM, action.getMuncles());
        
        action.getPerson().getRelatives().clear();
        assertEquals(SUBMIT, action.submitFamilyTree());
        
        assertEquals(RelativeCode.NMTH.toString(), action.getPerson().getRelatives().get(0).getCode());
        assertEquals(RelativeCode.NFTH.toString(), action.getPerson().getRelatives().get(1).getCode());
        assertEquals(RelativeCode.MGRMTH.toString(), action.getPerson().getRelatives().get(2).getCode());
        assertEquals(RelativeCode.MGRFTH.toString(), action.getPerson().getRelatives().get(3).getCode());
        assertEquals(RelativeCode.PGRMTH.toString(), action.getPerson().getRelatives().get(4).getCode());
        assertEquals(RelativeCode.PGRFTH.toString(), action.getPerson().getRelatives().get(5).getCode());
        assertEquals(RelativeCode.NBRO.toString(), action.getPerson().getRelatives().get(6).getCode());
        assertEquals(RelativeCode.NSIS.toString(), action.getPerson().getRelatives().get(7).getCode());
        assertEquals(RelativeCode.SON.toString(), action.getPerson().getRelatives().get(8).getCode());
        assertEquals(RelativeCode.DAU.toString(), action.getPerson().getRelatives().get(9).getCode());
        assertEquals(RelativeCode.PAUNT.toString(), action.getPerson().getRelatives().get(10).getCode());
        assertEquals(RelativeCode.PUNCLE.toString(), action.getPerson().getRelatives().get(11).getCode());
        assertEquals(RelativeCode.MAUNT.toString(), action.getPerson().getRelatives().get(12).getCode());
        assertEquals(RelativeCode.MUNCLE.toString(), action.getPerson().getRelatives().get(13).getCode());
        
        assertEquals(RelativeCode.NMTH.toString(), action.getPerson().getMother().getCode());
        assertEquals(RelativeCode.NFTH.toString(), action.getPerson().getFather().getCode());
    }
}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import gov.hhs.fhh.data.ClinicalObservation;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeBranch;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.data.util.DiseaseUtils;
import gov.hhs.fhh.model.mfhp.LivingStatus;
import gov.hhs.fhh.web.TestProperties;
import gov.hhs.fhh.web.test.AbstractFhhWebTest;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;

import java.io.File;
import java.io.FileOutputStream;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.SerializationUtils;
import org.junit.Assert;
import org.junit.Test;

import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;
import com.fiveamsolutions.hl7.model.mfhp.Gender;
import com.fiveamsolutions.hl7.model.mfhp.TwinStatus;
import com.fiveamsolutions.hl7.model.mfhp.Weight;
import com.fiveamsolutions.hl7.model.mfhp.WeightUnit;

/**
 * @author bpickeral
 * 
 */
public class FamilyHistoryActionTest extends AbstractFhhWebTest {
    private final FamilyHistoryAction action = new FamilyHistoryAction();
    private final String DUMMY_NAME = "John Doe";
    public static final String DUMMY_KEY = "80000000";
    private final Gender DUMMY_GENDER = Gender.MALE;
    private final GregorianCalendar DUMMY_DATE = new GregorianCalendar(1970, 9, 7, 0, 0, 0);
    private final String SUCCESS = "success";
    public static final String IMPORT_COMPLETE = "importComplete";
    private final String IMPORT_FAILED = "input";
    public static final String BASIC_IMPORT_TEST = "/Basic_Test_FamilyHistory.xml";
    private final String BASIC_TEST_NAME = "Basic Test";
    private final String BASIC_TEST_ETHNICITY = "Hispanic or Latino";
    private final String BASIC_TEST_RACE = "American Indian or Alaska Native";
    private final String BASIC_TEST_DISEASE = "DisplayName7";
    private final Weight BASIC_TEST_WEIGHT = new Weight(180, WeightUnit.METRIC);
    private final GregorianCalendar BASIC_TEST_DOB = new GregorianCalendar(1983, 8, 7, 0, 0, 0);

    private final String BASIC_RELATIVE_NAME = "Basic Relative";
    private final String BASIC_RELATIVE_CODE = "NMTH";
    private final String BASIC_RELATIVE_ETHNICITY = "Hispanic or Latino";
    private final String BASIC_RELATIVE_RACE = "Asian";
    private final String BASIC_RELATIVE_DISEASE = "DisplayName18";
    private final String BASIC_RELATIVE_BIRTH_TIME = "09/07/1938";

    private final String BASIC_RELATIVE2_CODE = "NFTH";
    private final String BASIC_RELATIVE2_GENDER = "male";
    private final String BASIC_RELATIVE2_BIRTH_TIME = "1953";

    private final String DECEASED_RELATIVE_NAME = "PUNCLE Name";
    private final String DECEASED_RELATIVE_CODE = "PUNCLE";
    private final String DECEASED_RELATIVE_GENDER = "male";
    private final String DECEASED_RELATIVE_DISEASE = "DisplayName18";

    private final String INCOMPLETE_RELATIVE_CODE = "MAUNT";

    private final String FAMILY_HISTORY_ACTION = "familyHistory";

    private final String BASIC_HTM_TEST = "/Basic_HTM_Test.htm";
    private final String BASIC_HTM_NAME = "My Name";
    private final String HTM_NEW_DISEASE = "COD Disease 1";
    private final String HTM_ADD_DISEASE1 = "additionalDisease1";
    private final String HTM_ADD_DISEASE2 = "additionalDisease2";
    private final String HTM_FAMILY_DISEASE1 = "otherDisease1";
    private final String HTM_FAMILY_DISEASE2 = "Cancer";

    @Test
    public void testStartAndPrepare() throws Exception {
        action.prepare();

        assertEquals(SUCCESS, action.start());

        Person p = action.getPerson();
        p.setName(DUMMY_NAME);

        p.setDateOfBirth(DUMMY_DATE.getTime());
        p.setWeight(BASIC_TEST_WEIGHT);
        p.setGender(DUMMY_GENDER);

        action.prepare();
        assertEquals(DUMMY_NAME, action.getPerson().getName());
        assertEquals(DUMMY_DATE.getTime(), action.getPerson().getDateOfBirth());
        assertEquals(BASIC_TEST_WEIGHT, action.getPerson().getWeight());
        assertEquals(DUMMY_GENDER.getDisplayName(), action.getPerson().getGender().getDisplayName());
    }

    @Test
    public void testFamilyHistoryAction() {
        assertEquals(SUCCESS, action.familyHistory());
    }

    @Test
    public void testFamilyHistoryDetailAction() {
        assertEquals(SUCCESS, action.familyHistoryDetail());
    }

    @Test
    public void testImportFamilyHistory() {
        assertEquals(SUCCESS, action.importFamilyHistory());
    }

    @Test
    public void testgetAndSetRelativeBranch() {
        Person p = new Person();
        RelativeBranch b = new RelativeBranch(p);
        action.setRelativeBranch(b);
        assertEquals(b, action.getRelativeBranch());
    }

    @Test
    public void testImportXmlFile() {
        FhhHttpSessionUtil.getSession().setAttribute(DUMMY_KEY, new Person());
        FhhHttpSessionUtil.getSession().setAttribute(FhhHttpSessionUtil.ROOT_KEY, DUMMY_KEY);
        action.setImportedFile(new File(this.getClass().getResource(BASIC_IMPORT_TEST).getPath()));

        assertEquals(IMPORT_COMPLETE, action.importXmlFile());

        Person importedPerson = (Person) FhhHttpSessionUtil.getSession().getAttribute(DUMMY_KEY);
        assertSame(importedPerson, action.getPerson());
        assertEquals(BASIC_TEST_NAME, importedPerson.getName());
        assertEquals(Gender.MALE, importedPerson.getGender());
        assertEquals(BASIC_TEST_DOB.getTime(), importedPerson.getDateOfBirth());
        assertEquals(BASIC_TEST_ETHNICITY, importedPerson.getEthnicities().get(0).getDisplayName());
        assertEquals(BASIC_TEST_RACE, importedPerson.getRaces().get(0).getDisplayName());
        assertEquals(BASIC_TEST_DISEASE, importedPerson.getObservations().get(0).getDisease().getDisplayName());
        assertEquals(BASIC_TEST_WEIGHT.getValue(), importedPerson.getWeight().getValue());
        assertEquals(BASIC_TEST_WEIGHT.getUnit(), importedPerson.getWeight().getUnit());
        assertEquals(AgeRangeEnum.ADOLESCENCE, importedPerson.getObservations().get(0).getAgeRange());

        // Check attributes of living relative
        Relative livingRelative = importedPerson.getRelatives().get(0);
        assertEquals(BASIC_RELATIVE_NAME, livingRelative.getName());
        assertEquals(BASIC_RELATIVE_CODE, livingRelative.getCode());
        assertEquals(Gender.FEMALE, livingRelative.getGender());
        assertEquals(BASIC_RELATIVE_ETHNICITY, livingRelative.getEthnicities().get(0).getDisplayName());
        assertEquals(BASIC_RELATIVE_RACE, livingRelative.getRaces().get(0).getDisplayName());
        assertEquals(BASIC_RELATIVE_BIRTH_TIME, livingRelative.getBirthTime());
        assertEquals(BASIC_RELATIVE_DISEASE, livingRelative.getObservations().get(0).getDisease().getDisplayName());
        assertEquals(AgeRangeEnum.FORTIES, livingRelative.getObservations().get(0).getAgeRange());

        // Check attributes of living relative with year specified and
        // some empty attributes
        Relative livingRelative2 = importedPerson.getRelatives().get(1);
        assertEquals(BASIC_RELATIVE2_CODE, livingRelative2.getCode());
        assertEquals(BASIC_RELATIVE2_GENDER, livingRelative2.getGender().getDisplayName());
        assertEquals(BASIC_RELATIVE2_BIRTH_TIME, livingRelative2.getBirthTime());

        // Check attributes of deceased relative
        Relative deceasedRelative = importedPerson.getRelatives().get(2);
        assertEquals(DECEASED_RELATIVE_NAME, deceasedRelative.getName());
        assertEquals(DECEASED_RELATIVE_CODE, deceasedRelative.getCode());
        assertEquals(DECEASED_RELATIVE_GENDER, deceasedRelative.getGender().getDisplayName());
        assertEquals(DECEASED_RELATIVE_DISEASE, deceasedRelative.getObservations().get(0).getDisease().getDisplayName());
        assertEquals(AgeRangeEnum.FIFTIES, deceasedRelative.getObservations().get(0).getAgeRange());
        assertEquals(DECEASED_RELATIVE_DISEASE, deceasedRelative.getCauseOfDeath().getDisplayName());
        assertEquals(AgeRangeEnum.FIFTIES, deceasedRelative.getAgeAtDeath());

        // Check attributes of living relative with year specified and
        // some empty attributes
        Relative incompleteFormRelative = importedPerson.getRelatives().get(3);
        assertEquals(INCOMPLETE_RELATIVE_CODE, incompleteFormRelative.getCode());

        // Check that pcousin's father is puncle
        Relative pcousin = importedPerson.getRelatives().get(4);
        assertEquals(pcousin.getFather(), deceasedRelative);

        // Check that hbro's mother is NMTH
        Relative hbro = importedPerson.getRelatives().get(5);
        assertEquals(hbro.getMother(), livingRelative);

        action.setImportedFile(null);
        assertEquals(IMPORT_FAILED, action.importXmlFile());
    }

    @Test
    public void testImportHtmFile() {
        FhhHttpSessionUtil.getSession().setAttribute(DUMMY_KEY, new Person());
        FhhHttpSessionUtil.getSession().setAttribute(FhhHttpSessionUtil.ROOT_KEY, DUMMY_KEY);
        action.setImportedFile(new File(this.getClass().getResource(BASIC_HTM_TEST).getPath()));

        assertEquals(IMPORT_COMPLETE, action.importXmlFile());

        Person importedPerson = (Person) FhhHttpSessionUtil.getSession().getAttribute(DUMMY_KEY);
        assertSame(importedPerson, action.getPerson());

        checkAttributes(importedPerson, BASIC_HTM_NAME, Gender.MALE, TwinStatus.IDENTICAL, true);

        // Check attributes of relatives
        Map<String, Relative> relatives = new HashMap<String, Relative>();
        for (Relative currRelative : importedPerson.getRelatives()) {
            relatives.put(currRelative.getName(), currRelative);
        }

        checkRelativeAttributes(relatives, "Mother Name", Gender.FEMALE, TwinStatus.IDENTICAL, false,
                RelativeCode.NMTH, relatives.get("Maternal Grandfather Name"), LivingStatus.YES, null);
        checkRelativeAttributes(relatives, "Maternal Grandmother Name", Gender.FEMALE, TwinStatus.NO, true,
                RelativeCode.MGRMTH, null, LivingStatus.NO, null);
        checkRelativeAttributes(relatives, "Maternal Grandfather Name", Gender.MALE, TwinStatus.NO, false,
                RelativeCode.MGRFTH, null, LivingStatus.UNKNOWN, null);
        checkRelativeAttributes(relatives, "Father Name", Gender.MALE, TwinStatus.IDENTICAL, true, RelativeCode.NFTH,
                relatives.get("Paternal Grandfather Name"), LivingStatus.YES, null);
        checkRelativeAttributes(relatives, "Paternal Grandmother Name", Gender.FEMALE, TwinStatus.NO, false,
                RelativeCode.PGRMTH, null, LivingStatus.NO, null);
        checkRelativeAttributes(relatives, "Paternal Grandfather Name", Gender.MALE, TwinStatus.NO, true,
                RelativeCode.PGRFTH, null, LivingStatus.NO, AgeRangeEnum.SIXTIES);

        checkRelativeAttributes(relatives, "dauter1 Name", Gender.FEMALE, TwinStatus.NO, false, RelativeCode.DAU, null,
                LivingStatus.UNKNOWN, null);
        checkRelativeAttributes(relatives, "dauter2 Name", Gender.FEMALE, TwinStatus.NO, true, RelativeCode.DAU, null,
                LivingStatus.YES, null);
        checkRelativeAttributes(relatives, "son1 Name", Gender.MALE, TwinStatus.NO, false, RelativeCode.SON, null,
                LivingStatus.NO, null);
        checkRelativeAttributes(relatives, "son2 Name", Gender.MALE, TwinStatus.NO, true, RelativeCode.SON, null,
                LivingStatus.UNKNOWN, null);
        checkRelativeAttributes(relatives, "sister1 Name", Gender.FEMALE, TwinStatus.NO, false, RelativeCode.NSIS,
                relatives.get("Mother Name"), null, null);
        checkRelativeAttributes(relatives, "sister2 Name", Gender.FEMALE, TwinStatus.NO, true, RelativeCode.NSIS,
                relatives.get("Mother Name"), null, null);
        checkRelativeAttributes(relatives, "brother1 Name", Gender.MALE, null, false, RelativeCode.NBRO, relatives
                .get("Mother Name"), null, null);
        checkRelativeAttributes(relatives, "brother2 Name", Gender.MALE, null, true, RelativeCode.NBRO, relatives
                .get("Mother Name"), null, null);
        checkRelativeAttributes(relatives, "halfSister1 Name", Gender.FEMALE, TwinStatus.NO, false, RelativeCode.HSIS,
                relatives.get("Mother Name"), LivingStatus.NO, null);
        checkRelativeAttributes(relatives, "halfSister2 Name", Gender.FEMALE, TwinStatus.NO, true, RelativeCode.HSIS,
                relatives.get("Father Name"), LivingStatus.YES, null);
        checkRelativeAttributes(relatives, "halfBrother1 Name", Gender.MALE, TwinStatus.NO, false, RelativeCode.HBRO,
                relatives.get("Mother Name"), LivingStatus.YES, null);
        checkRelativeAttributes(relatives, "halfBrother2 Name", Gender.MALE, TwinStatus.NO, true, RelativeCode.HBRO,
                relatives.get("Father Name"), LivingStatus.YES, null);
        checkRelativeAttributes(relatives, "fathersSister1 Name", Gender.FEMALE, TwinStatus.NO, false,
                RelativeCode.PAUNT, relatives.get("Paternal Grandfather Name"), LivingStatus.YES, null);
        checkRelativeAttributes(relatives, "fathersSister2 Name", Gender.FEMALE, TwinStatus.NO, true,
                RelativeCode.PAUNT, relatives.get("Paternal Grandfather Name"), null, null);
        checkRelativeAttributes(relatives, "fathersBrother1 Name", Gender.MALE, null, false, RelativeCode.PUNCLE,
                relatives.get("Paternal Grandfather Name"), null, null);
        checkRelativeAttributes(relatives, "fathersBrother2 Name", Gender.MALE, null, true, RelativeCode.PUNCLE,
                relatives.get("Paternal Grandfather Name"), null, null);
        checkRelativeAttributes(relatives, "mothersSister1 Name", Gender.FEMALE, null, false, RelativeCode.MAUNT,
                relatives.get("Maternal Grandfather Name"), null, null);
        checkRelativeAttributes(relatives, "mothersSister2 Name", Gender.FEMALE, null, true, RelativeCode.MAUNT,
                relatives.get("Maternal Grandfather Name"), null, null);
        checkRelativeAttributes(relatives, "mothersBrother1 Name", Gender.MALE, TwinStatus.NO, false,
                RelativeCode.MUNCLE, relatives.get("Maternal Grandfather Name"), null, null);
        checkRelativeAttributes(relatives, "mothersBrother2 Name", Gender.MALE, TwinStatus.NO, true,
                RelativeCode.MUNCLE, relatives.get("Maternal Grandfather Name"), null, null);
        checkRelativeAttributes(relatives, "niece1 Name", Gender.FEMALE, TwinStatus.NO, false, RelativeCode.NIECE,
                relatives.get("brother1 Name"), null, null);
        checkRelativeAttributes(relatives, "niece2 Name", Gender.FEMALE, TwinStatus.NO, true, RelativeCode.NIECE,
                relatives.get("sister1 Name"), null, null);
        checkRelativeAttributes(relatives, "nephew1 Name", Gender.MALE, TwinStatus.NO, false, RelativeCode.NEPHEW,
                relatives.get("brother2 Name"), null, null);
        checkRelativeAttributes(relatives, "nephew2 Name", Gender.MALE, TwinStatus.NO, true, RelativeCode.NEPHEW,
                relatives.get("sister2 Name"), null, null);
        checkRelativeAttributes(relatives, "femaleCousin1 Name", Gender.FEMALE, TwinStatus.NO, false,
                RelativeCode.PCOUSN, relatives.get("fathersBrother1 Name"), null, null);
        checkRelativeAttributes(relatives, "femaleCousin2 Name", Gender.FEMALE, TwinStatus.NO, true,
                RelativeCode.PCOUSN, relatives.get("fathersSister1 Name"), null, null);
        checkRelativeAttributes(relatives, "maleCousin1 Name", Gender.MALE, TwinStatus.NO, false, RelativeCode.MCOUSN,
                relatives.get("mothersBrother1 Name"), null, null);
        checkRelativeAttributes(relatives, "maleCousin2 Name", Gender.MALE, TwinStatus.NO, true, RelativeCode.MCOUSN,
                relatives.get("mothersSister1 Name"), null, null);

        Map<String, Disease> userEnteredDiseases = FhhHttpSessionUtil.getUserEnteredDiseases();
        assertNull("User entered diseases are not null", userEnteredDiseases);

    }

    private void checkAttributes(Person p, String name, Gender gender, TwinStatus twinStatus, boolean hasObservations) {
        List<ClinicalObservation> obs = p.getObservations();
        // In our import test the first of each relative has observations while the 2nd has none
        if (hasObservations) {
            Map<String, ClinicalObservation> codeToObsMap = new HashMap<String, ClinicalObservation>();
            for (ClinicalObservation currObs : obs) {
                if (currObs.getDisease().getCode() != null) {
                    codeToObsMap.put(currObs.getDisease().getCode(), currObs);
                } else {
                    codeToObsMap.put(currObs.getDisease().getOriginalText(), currObs);
                }

            }

            // Test the 6 fixed diseases the legacy system handles
            ClinicalObservation currObservation = codeToObsMap.get(DiseaseUtils.HEART_DISEASE_CODE);
            assertEquals(currObservation.getDisease().getCode(), DiseaseUtils.HEART_DISEASE_CODE);
            assertEquals(AgeRangeEnum.INFANCY, currObservation.getAgeRange());

            currObservation = codeToObsMap.get(DiseaseUtils.STROKE_CODE);
            assertTrue(currObservation.getDisease().getCode() == DiseaseUtils.STROKE_CODE);
            assertEquals(AgeRangeEnum.ADOLESCENCE, currObservation.getAgeRange());

            currObservation = codeToObsMap.get(DiseaseUtils.DIABETES_CODE);
            assertTrue(currObservation.getDisease().getCode() == DiseaseUtils.DIABETES_CODE);
            assertEquals(AgeRangeEnum.TWENTIES, currObservation.getAgeRange());
            // Diabetes should be set as an unmatched condition since legacy import did not collect Diabetes type
            // FHH defaults to Type 2 Diabetes, the most common, and displays a message to the user.
            assertTrue(currObservation.isUnmatchedCondition());

            currObservation = codeToObsMap.get(DiseaseUtils.COLON_CANCER_CODE);
            assertTrue(currObservation.getDisease().getCode() == DiseaseUtils.COLON_CANCER_CODE);
            assertEquals(AgeRangeEnum.THIRTIES, currObservation.getAgeRange());

            currObservation = codeToObsMap.get(DiseaseUtils.BREAST_CANCER_CODE);
            assertTrue(currObservation.getDisease().getCode() == DiseaseUtils.BREAST_CANCER_CODE);
            assertEquals(AgeRangeEnum.UNKNOWN, currObservation.getAgeRange());

            if (Gender.FEMALE.equals(gender)) {
                currObservation = codeToObsMap.get(DiseaseUtils.OVARIAN_CANCER_CODE);
                assertTrue(currObservation.getDisease().getCode() == DiseaseUtils.OVARIAN_CANCER_CODE);
                assertEquals(AgeRangeEnum.UNKNOWN, currObservation.getAgeRange());
            }
            // Test additional diseases entered for each individual relative
            currObservation = codeToObsMap.get(HTM_ADD_DISEASE1);
            assertNull(currObservation.getDisease().getCode());
            assertEquals(HTM_ADD_DISEASE1, currObservation.getDisease().getOriginalText());
            assertEquals(AgeRangeEnum.INFANCY, currObservation.getAgeRange());
            assertTrue(currObservation.isUnmatchedCondition());

            currObservation = codeToObsMap.get(HTM_ADD_DISEASE2);
            assertNull(currObservation.getDisease().getCode());
            assertEquals(AgeRangeEnum.UNKNOWN, currObservation.getAgeRange());
            assertEquals(HTM_ADD_DISEASE2, currObservation.getDisease().getOriginalText());
            assertTrue(currObservation.isUnmatchedCondition());

            // Test additional disease added for the entire family
            currObservation = codeToObsMap.get(HTM_FAMILY_DISEASE1);
            assertNull(currObservation.getDisease().getCode());
            assertEquals(AgeRangeEnum.INFANCY, currObservation.getAgeRange());
            assertEquals(HTM_FAMILY_DISEASE1, currObservation.getDisease().getOriginalText());
            assertTrue(currObservation.isUnmatchedCondition());

            // Test additional disease added for the entire family
            currObservation = codeToObsMap.get(HTM_FAMILY_DISEASE2);
            assertNull(currObservation.getDisease().getCode());
            assertEquals(AgeRangeEnum.UNKNOWN, currObservation.getAgeRange());
            assertEquals(HTM_FAMILY_DISEASE2, currObservation.getDisease().getOriginalText());
            assertTrue(currObservation.isUnmatchedCondition());
        } else {
            assertEquals(0, obs.size());
        }

        assertEquals(name, p.getName());
        assertEquals(gender, p.getGender());
        if (twinStatus != null) {
            assertEquals(twinStatus, p.getTwinStatus());
        }
    }

    private void checkRelativeAttributes(Map<String, Relative> relatives, String name, Gender gender,
            TwinStatus twinStatus, boolean hasObservations, RelativeCode code, Relative parent,
            LivingStatus livingStatus, AgeRangeEnum ageOfDeath) {
        Relative r = relatives.get(name);
        checkAttributes(r, name, gender, twinStatus, hasObservations);
        if (parent == null) {
            assertNull(r.getMother());
            assertNull(r.getFather());
        } else if (parent.getCodeEnum().isMale()) {
            assertSame(parent, r.getFather());
        } else {
            assertSame(parent, r.getMother());
        }
        assertEquals(code.toString(), r.getCode());

        if (livingStatus != null) {
            assertTrue(livingStatus.toString().equals(r.getLivingStatus()));
        } else {
            assertNull(r.getLivingStatus());
        }
        if (ageOfDeath != null) {
            assertTrue(AgeRangeEnum.SIXTIES.equals(ageOfDeath));
            r.getCauseOfDeath().getOriginalText().equals(HTM_NEW_DISEASE);
        }
    }

    private void checkAdditionalDiseasesInSession() {
        Map<String, Disease> userEnteredDiseases = FhhHttpSessionUtil.getUserEnteredDiseases();
        assertTrue(userEnteredDiseases.containsKey(HTM_ADD_DISEASE1));
        assertTrue(userEnteredDiseases.containsKey(HTM_ADD_DISEASE2));
        assertTrue(userEnteredDiseases.containsKey(HTM_FAMILY_DISEASE1));
    }

    @Test
    public void testRemoveRelative() {
        Person p = new Person();
        action.setPerson(p);
        Relative son = new Relative();
        Relative grandson = new Relative();
        Relative aunt = new Relative();
        Relative cousin = new Relative();
        Relative unrelatedRelative = new Relative();
        grandson.setFather(son);
        cousin.setMother(aunt);
        son.setCodeEnum(RelativeCode.SON);
        p.getRelatives().add(son);
        grandson.setCodeEnum(RelativeCode.GRNSON);
        p.getRelatives().add(grandson);
        aunt.setCodeEnum(RelativeCode.AUNT);
        p.getRelatives().add(aunt);
        cousin.setCodeEnum(RelativeCode.COUSN);
        p.getRelatives().add(cousin);
        p.getUnrelatedRelatives().add(unrelatedRelative);

        // Test remove relative for case where relative removed is female (Mother) with descendants
        action.setRemoveRelativeId(aunt.getUuid().toString());
        assertEquals(aunt.getUuid().toString(), action.getRemoveRelativeId());
        assertEquals(FAMILY_HISTORY_ACTION, action.removeRelative());

        assertEquals(2, p.getRelatives().size());
        assertFalse(p.getRelatives().contains(aunt));
        assertFalse(p.getRelatives().contains(cousin));

        // Test remove relative for case where relative removed is male (Father) with descendants
        action.setRemoveRelativeId(son.getUuid().toString());
        assertEquals(FAMILY_HISTORY_ACTION, action.removeRelative());

        assertEquals(0, p.getRelatives().size());
        assertFalse(p.getRelatives().contains(son));
        assertFalse(p.getRelatives().contains(grandson));
        
        action.setRemoveRelativeId(unrelatedRelative.getUuid().toString());
        assertEquals(unrelatedRelative.getUuid().toString(), action.getRemoveRelativeId());
        assertEquals(FAMILY_HISTORY_ACTION, action.removeRelative());

        Assert.assertNull(p.getRelative(unrelatedRelative.getUuid()));
    }

    @Test
    public void testLoadAndSerialize() throws Exception {
        FhhHttpSessionUtil.getSession().setAttribute(DUMMY_KEY, new Person());
        FhhHttpSessionUtil.getSession().setAttribute(FhhHttpSessionUtil.ROOT_KEY, DUMMY_KEY);
        action.setImportedFile(new File(this.getClass().getResource(BASIC_IMPORT_TEST).getPath()));

        assertEquals(IMPORT_COMPLETE, action.importXmlFile());
        Person person = action.getPerson();
        byte[] serializedPerson = SerializationUtils.serialize(person);

        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(
                    new File(TestProperties.getWebBaseDir() + "/target" + BASIC_IMPORT_TEST + ".ser"));
            fos.write(serializedPerson);
        } finally {
            if (fos != null) {
                IOUtils.closeQuietly(fos);
            }
        }
    }
}

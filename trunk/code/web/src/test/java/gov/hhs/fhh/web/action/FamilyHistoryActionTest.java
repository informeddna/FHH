/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeBranch;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.service.ImportException;
import gov.hhs.fhh.service.PersonServiceLocal;
import gov.hhs.fhh.service.PersonServiceStub;
import gov.hhs.fhh.web.test.AbstractFhhWebTest;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;

import java.io.File;
import java.util.GregorianCalendar;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

import com.fiveamsolutions.hl7.model.mfhp.Gender;
import com.fiveamsolutions.hl7.model.mfhp.Weight;
import com.fiveamsolutions.hl7.model.mfhp.WeightUnit;

/**
 * @author bpickeral
 * 
 */
public class FamilyHistoryActionTest extends AbstractFhhWebTest {
    private FamilyHistoryAction action = new FamilyHistoryAction();
    private final String DUMMY_NAME = "John Doe";
    public static final String DUMMY_KEY = "80000000";
    private final Gender DUMMY_GENDER = Gender.MALE;
    private final GregorianCalendar DUMMY_DATE = new GregorianCalendar(1970, 9, 7, 0, 0, 0);
    private final String SUCCESS = "success";
    public static final String IMPORT_COMPLETE = "importComplete";
    public static final String BASIC_IMPORT_TEST = "/Basic_Test_FamilyHistory.xml";
    private final Weight BASIC_TEST_WEIGHT = new Weight(180, WeightUnit.METRIC);
    private final String FAMILY_HISTORY_ACTION = "familyHistory";

    @Test
    public void testStartAndPrepare() throws Exception {
        action.prepare();

        assertEquals(SUCCESS, action.start());

        Person p = action.getPerson();
        p.setName(DUMMY_NAME);

        p.setDateOfBirth(DUMMY_DATE.getTime());
        p.setWeight(BASIC_TEST_WEIGHT);
        p.setGender(DUMMY_GENDER);

        action.prepare();
        assertEquals(DUMMY_NAME, action.getPerson().getName());
        assertEquals(DUMMY_DATE.getTime(), action.getPerson().getDateOfBirth());
        assertEquals(BASIC_TEST_WEIGHT, action.getPerson().getWeight());
        assertEquals(DUMMY_GENDER.getDisplayName(), action.getPerson().getGender().getDisplayName());
    }

    @Test
    public void testFamilyHistoryAction() {
        assertEquals(SUCCESS, action.familyHistory());
    }

    @Test
    public void testFamilyHistoryDetailAction() {
        assertEquals(SUCCESS, action.familyHistoryDetail());
    }

    @Test
    public void testImportFamilyHistory() {
        assertEquals(SUCCESS, action.importFamilyHistory());
    }

    @Test
    public void testgetAndSetRelativeBranch() {
        Person p = new Person();
        RelativeBranch b = new RelativeBranch(p);
        action.setRelativeBranch(b);
        assertEquals(b, action.getRelativeBranch());
    }

    @Test
    public void testRemoveRelative() {
        Person p = new Person();
        action.setPerson(p);
        Relative son = new Relative();
        Relative grandson = new Relative();
        Relative aunt = new Relative();
        Relative cousin = new Relative();
        Relative unrelatedRelative = new Relative();
        grandson.setFather(son);
        cousin.setMother(aunt);
        son.setCodeEnum(RelativeCode.SON);
        p.getRelatives().add(son);
        grandson.setCodeEnum(RelativeCode.GRNSON);
        p.getRelatives().add(grandson);
        aunt.setCodeEnum(RelativeCode.AUNT);
        p.getRelatives().add(aunt);
        cousin.setCodeEnum(RelativeCode.COUSN);
        p.getRelatives().add(cousin);
        p.getUnrelatedRelatives().add(unrelatedRelative);

        // Test remove relative for case where relative removed is female (Mother) with descendants
        action.setRemoveRelativeId(aunt.getUuid().toString());
        assertEquals(aunt.getUuid().toString(), action.getRemoveRelativeId());
        assertEquals(FAMILY_HISTORY_ACTION, action.removeRelative());

        assertEquals(2, p.getRelatives().size());
        assertFalse(p.getRelatives().contains(aunt));
        assertFalse(p.getRelatives().contains(cousin));

        // Test remove relative for case where relative removed is male (Father) with descendants
        action.setRemoveRelativeId(son.getUuid().toString());
        assertEquals(FAMILY_HISTORY_ACTION, action.removeRelative());

        assertEquals(0, p.getRelatives().size());
        assertFalse(p.getRelatives().contains(son));
        assertFalse(p.getRelatives().contains(grandson));

        action.setRemoveRelativeId(unrelatedRelative.getUuid().toString());
        assertEquals(unrelatedRelative.getUuid().toString(), action.getRemoveRelativeId());
        assertEquals(FAMILY_HISTORY_ACTION, action.removeRelative());

        Assert.assertNull(p.getRelative(unrelatedRelative.getUuid()));
    }

    @Test
    public void importXmlFileWithNoFile() {
        action.setImportedFile(null);
        assertEquals("input", action.importXmlFile());
        assertNotNull("missing expected field error", action.getFieldErrors().get("importedFile"));
        assertEquals(action.getText("importLocal.importedFile.required"), ((List) action.getFieldErrors()
                .get("importedFile")).get(0));
    }

    @Test
    public void importXmlFileWithImportException() {
        action = new FamilyHistoryAction() {
            @Override
            protected PersonServiceLocal getPersonService() {
                return new PersonServiceStub() {
                    @Override
                    public Person importFile(File file) throws ImportException {
                        throw new ImportException("blala", new Exception("cause msg"));
                    }
                };
            }
        };
        action.setImportedFile(new File(this.getClass().getResource(BASIC_IMPORT_TEST).getPath()));
        assertEquals("input", action.importXmlFile());
        assertNotNull("missing expected field error", action.getFieldErrors().get("importedFile"));
        assertEquals(action.getText("importFamilyHistory.error.importingFile"), ((List) action
                .getFieldErrors().get("importedFile")).get(0));
    }

    @Test
    public void importXmlFileToVerifyUserEnteredDiseaseAndSessionIsSet() {
        FhhHttpSessionUtil.getSession().setAttribute(FhhHttpSessionUtil.ROOT_KEY, DUMMY_KEY);
        action = new FamilyHistoryAction() {
            @Override
            protected PersonServiceLocal getPersonService() {
                return new PersonServiceStub() {
                    @Override
                    public Person importFile(File file) throws ImportException {
                        return getPersonWithUserEnteredDiseases();
                    }
                };
            }
        };
        action.setImportedFile(new File(this.getClass().getResource(BASIC_IMPORT_TEST).getPath()));
        assertEquals("importComplete", action.importXmlFile());

        // TODO: verify person's user entered diseases are put into session

    }

    private Person getPersonWithUserEnteredDiseases() {
        return new Person();
    }
}

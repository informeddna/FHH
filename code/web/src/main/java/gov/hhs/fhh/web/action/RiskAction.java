/**
 *
 * Family Health History Portal
 * END USER AGREEMENT
 *
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably
 * grants to the user a non-exclusive, royalty-free right to use, display,
 * reproduce, and distribute this Family Health History portal software
 * (the "software") and prepare, use, display, reproduce and distribute
 * derivative works thereof for any commercial or non-commercial purpose by any
 * party, subject only to the following limitations and disclaimers, which
 * are hereby acknowledged by the user.
 *
 * User agrees that it will not degrade the standards-based format of the software
 * by materially altering the program architecture or data structure in a way
 * that would render the data generated by the altered software incompatible
 * with the original software. The intention of this clause is to ensure the
 * long-term interoperability of family history information gathered by different
 * versions of the tool.
 *
 * User agrees that this END USER AGREEMENT will be provided to any party to
 * whom user distributes the software, and that it will apply to the distributee.
 *
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS
 * trademarks without permission from HHS, and will not imply endorsement of
 * its product by HHS or the Surgeon General.
 *
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED,
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE,
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT,
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 *
 */
package gov.hhs.fhh.web.action;

import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.util.PersonUtils;
import gov.hhs.fhh.service.util.CurrentLanguageHolder;
import gov.hhs.fhh.service.util.RiskClient;
import gov.hhs.fhh.service.util.RiskResponseBuilder;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;
import gov.nih.nci.drc.util.FileLanguageCode;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.Preparable;

/**
 * @author bpickeral
 *
 */
public class RiskAction extends ActionSupport implements Preparable {
    private static final long serialVersionUID = 316273314L;

    private Person person;
    private InputStream riskFile;
    private String riskHTML;
    private String fileName;
    private boolean showCalculateButton;

    /**
     * {@inheritDoc}
     */
    public void prepare() {
        Person rootPerson = FhhHttpSessionUtil.getRootPerson();
        if (rootPerson != null && rootPerson.isCompletedForm()) {
            showCalculateButton = true;
            setPerson(rootPerson);
            final RiskResponseBuilder builder = new RiskResponseBuilder();
            RiskClient.getInstance().calculateRisk(person, builder);
            riskHTML = new String(RiskClient.getInstance().getRiskFile(builder.getMessage(), getFileLanguageCode()));
        } else {
            showCalculateButton = false;
        }
    }

    /**
     * Method invokes the reindex page.
     *
     * @return path String
     */
    public String risk() {
        return SUCCESS;
    }

    /**
     * Method invokes the reindex page.
     *
     * @return path String
     */
    public String colorectal() {
        return SUCCESS;
    }

    /**
     * Method invokes the reindex page.
     *
     * @return path String
     */
    public String downloadColorectalRisk() {
        final RiskResponseBuilder builder = new RiskResponseBuilder();
        RiskClient.getInstance().calculateRisk(person, builder);
        riskFile = new ByteArrayInputStream(RiskClient.getInstance().getRiskFile(builder.getPatient(),
                getFileLanguageCode()));
        fileName = PersonUtils.getFileNameForPerson(person, "Colorectal_Risk.pdf");
        return "downloadColorectalRiskFile";
    }

    /**
     * Method invokes the reindex page.
     *
     * @return path String
     */
    public String downloadColorectalLetter() {
        final RiskResponseBuilder builder = new RiskResponseBuilder();
        RiskClient.getInstance().calculateRisk(person, builder);
        riskFile = new ByteArrayInputStream(RiskClient.getInstance().getRiskFile(builder.getPhysician(),
                getFileLanguageCode()));
        fileName = PersonUtils.getFileNameForPerson(person, "Colorectal_Risk_Physician_Letter.pdf");
        return "downloadColorectalRiskFile";
    }

    private FileLanguageCode getFileLanguageCode() {
        FileLanguageCode languageCode = FileLanguageCode.EN;
        if (CurrentLanguageHolder.getCurrentLanguage().equals(FileLanguageCode.ES.getCode())) {
            languageCode = FileLanguageCode.ES;
        }
        return languageCode;
    }

    /**
     * Method returns the risk/physician letter pdf as an input stream.
     *
     * @return input stream containing the combined risk pdf
     */
    public InputStream getDownloadFile() {
        return riskFile;
    }


    /**
     * @return the person
     */
    public Person getPerson() {
        return person;
    }

    /**
     * @param person the person to set
     */
    public void setPerson(Person person) {
        this.person = person;
    }

    /**
     * @return the riskHTML
     */
    public String getRiskHTML() {
        return riskHTML;
    }

    /**
     * @param riskHTML the riskHTML to set
     */
    public void setRiskHTML(String riskHTML) {
        this.riskHTML = riskHTML;
    }

    /**
     * @return the fileName
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * @return the showCalculateButton
     */
    public boolean isShowCalculateButton() {
        return showCalculateButton;
    }

}

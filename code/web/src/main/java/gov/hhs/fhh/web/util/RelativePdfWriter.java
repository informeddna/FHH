/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.util;

import gov.hhs.fhh.data.AgeRange;
import gov.hhs.fhh.data.ClinicalObservation;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeReport;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.lowagie.text.BadElementException;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.Image;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

/**
 * @author lpower
 * 
 */
@SuppressWarnings("PMD.SystemPrintln")
public class RelativePdfWriter {

    /**
     * 
     */
    private static final int HEAD_FONTSIZE = 14;
    /**
     * 
     */
    private static final int SUBHEAD_FONTSIZE = 12;
    
    


    /**
     * Generates a PDF file.
     * 
     * @param p PdfDataContainer with the required information to create the pdf
     * @return byte array of PDF
     */
    @SuppressWarnings("PMD.ExcessiveMethodLength")
    public byte[] makeRelativePdf(PdfDataContainer p) {

        Document document = new Document(PageSize.LETTER.rotate());
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {
            RelativeDraw self = p.getRelativeDraw();
            PdfWriter.getInstance(document, baos);

            document.open();

            addMetaInformation(document);


            // add pedigree diagram
            Paragraph myPhrase = new Paragraph("Family Health Portrait - Diagram Report", 
                    new Font(Font.HELVETICA, HEAD_FONTSIZE,
                    Font.BOLD));
            document.add(myPhrase);
            Paragraph myDate = new Paragraph(getFormattedDate(), 
                    new Font(Font.HELVETICA, SUBHEAD_FONTSIZE, Font.BOLD));
            document.add(myDate);
            Image png = Image.getInstance(self.organizeFamilyTree(self));
            png.setAlignment(Image.MIDDLE);
            // CHECKSTYLE:OFF magic numbers for page width/height (10.5, 7.5) in px
            png.scaleToFit(756, 540);
            // CHECKSTYLE:ON
            document.add(png);

            document.add(makeLegendChart(p.getLegendList()));
            document.newPage();
            getChartHeader(document);
            document.add(makeFamilyHistoryChart(p));

        } catch (BadElementException e) {
            System.err.println(e.getMessage());
        } catch (MalformedURLException e) {
            System.err.println(e.getMessage());
        } catch (DocumentException de) {
            System.err.println(de.getMessage());
        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

        document.close();
        return baos.toByteArray();

    }


    /**
     * @return string of today's date
     */
    @SuppressWarnings("PMD.SimpleDateFormatNeedsLocale")
    private String getFormattedDate() {
        Date todaysDate = new java.util.Date();
        SimpleDateFormat formatter = new SimpleDateFormat("EEE, dd-MMM-yyyy");
        return formatter.format(todaysDate);
    }

    /**
     * @param document
     */
    private void addMetaInformation(Document document) {
        document.addTitle("Family Health History - Output from the U.S. Surgeon General's Tool");
        document.addSubject("Output from https://familyhistory.hhs.gov/.");
        document.addKeywords("family health history, health, family tree, disease prevention");
        document.addCreator("US Department of Health and Human Services/5AM Solutions/iText");
    }

    /**
     * @param document to which the header is added returns header for chart
     * @throws DocumentException
     */
    private Document getChartHeader(Document document) throws DocumentException {

        Paragraph myPhrase = new Paragraph("Family Health Portrait - Chart Report", 
                new Font(Font.HELVETICA, HEAD_FONTSIZE,
                Font.BOLD));
        document.add(myPhrase);
        Paragraph myDate = new Paragraph(getFormattedDate(), new Font(Font.HELVETICA, SUBHEAD_FONTSIZE, Font.BOLD));
        document.add(myDate);
        myPhrase = new Paragraph("* Indicates that the the system needs your assistance in identifying this condition. "
                + "Please visit the \"Family History\" page to review this condition.", 
                new Font(Font.HELVETICA, HEAD_FONTSIZE,
                Font.BOLD));
        document.add(myPhrase);
        document.add(new Paragraph(" "));
        return document;
    }

    /**
     * creates the family history chart/table.
     * 
     * @param relatives Set of RelativeReports from which to create legend.
     * @throws IOException
     * @throws MalformedURLException
     * @throws BadElementException
     */
    private PdfPTable makeLegendChart(List<Disease> legendList) throws BadElementException, IOException {
        // CHECKSTYLE:OFF magic number
        PdfPTable table = new PdfPTable(4);
        PdfPCell cell = new PdfPCell(new Paragraph("Chart Legend"));
        cell.setColspan(4);
        table.addCell(cell);
        // CHECKTYLE: ON
        getLegendImageCells(table);

        // add diseases for all people in the chart
        for (Disease d : legendList) {
            StringBuffer name = new StringBuffer();
            name.append(d.getGeneratedAbbreviation()).append(" = ").append(d.getReportDisplay());
            table.addCell(name.append(" ").toString());
        }
        // all cells in a row must be used, so add extras to complete the row
        if (legendList.size() % 4 == 1) {
            table.addCell(" ");
            table.addCell(" ");
            table.addCell(" ");
        }
        if (legendList.size() % 4 == 2) {
            table.addCell(" ");
            table.addCell(" ");
        }
        if (legendList.size() % 4 == 3) {
            table.addCell(" ");
        }
        return table;
    }

    /**
     * @param table
     * @return table
     * @throws IOException
     * @throws MalformedURLException
     * @throws BadElementException
     */
    private PdfPTable getLegendImageCells(PdfPTable table) throws BadElementException, MalformedURLException,
            IOException {
        URL resource = RelativeDraw.class.getClassLoader().getResource("icon_male.gif");
        Image maleIcon = Image.getInstance(resource);
        maleIcon.scaleAbsolute(16, 16);
        maleIcon.setAlignment(Image.TEXTWRAP);

        URL resource2 = RelativeDraw.class.getClassLoader().getResource("icon_female.gif");
        Image femaleIcon = Image.getInstance(resource2);
        femaleIcon.scaleAbsolute(16, 16);
        femaleIcon.setAlignment(Image.TEXTWRAP);
        
        URL resource3 = RelativeDraw.class.getClassLoader().getResource("icon_maleFemaleHighlight.gif");
        Image mfHighlight = Image.getInstance(resource3);
        mfHighlight.scaleAbsolute(38, 16);
        mfHighlight.setAlignment(Image.TEXTWRAP);

        URL resource4 = RelativeDraw.class.getClassLoader().getResource("icon_maleFemaleDec.gif");
        Image mfDec = Image.getInstance(resource4);
        mfDec.scaleAbsolute(38, 16);
        mfDec.setAlignment(Image.TEXTWRAP);

        PdfPCell cella = new PdfPCell();
        cella.addElement(maleIcon);
        cella.addElement(new Paragraph("male family member"));
        table.addCell(cella);
        PdfPCell cell2 = new PdfPCell();
        cell2.addElement(femaleIcon);
        cell2.addElement(new Paragraph("female family member"));
        table.addCell(cell2);
        PdfPCell cell3 = new PdfPCell();
        cell3.addElement(mfHighlight);
        cell3.addElement(new Paragraph("family member with a history of diease"));
        table.addCell(cell3);
        PdfPCell cell4 = new PdfPCell();
        cell4.addElement(mfDec);
        cell4.addElement(new Paragraph("deceased family member"));
        table.addCell(cell4);
        return table;
    }

    /**
     * These keys are set in ViewReportAction.createIntlLegendLabels - this is too tightly coupled code
     * @param relatives Set of RelativeReports from which to create chart. creates the family history chart/table.
     * @throws BadElementException 
     */
    private PdfPTable makeFamilyHistoryChart(PdfDataContainer p) throws BadElementException {
        // CHECKSTYLE:OFF magic number
        PdfPTable table = new PdfPTable(9);
        // CHECKTYLE: ON
        table.addCell("");
        Map<String, String> labels = p.getLegendLabels();
        table.addCell(labels.get("living"));
        table.addCell(labels.get("heartDisease"));
        table.addCell(labels.get("stroke"));
        table.addCell(labels.get("diabetes"));
        table.addCell(labels.get("colonCancer"));
        table.addCell(labels.get("breastCancer"));
        table.addCell(labels.get("ovarianCancer"));
        table.addCell(labels.get("additionalDiseases"));
        table.setHeaderRows(1);

        return populateFamilyHistoryChart(table, p);

    }

    /**
     * @param relatives Set of RelativeReports from which to create chart. creates the family history chart/table.
     * @throws BadElementException 
     */
    @SuppressWarnings("PMD.AppendCharacterWithChar")
    private PdfPTable populateFamilyHistoryChart(PdfPTable table, PdfDataContainer p) throws BadElementException {
        RelativeDraw self = p.getRelativeDraw();
        boolean showNames = self.isShowNames();
        Map<AgeRange, String> ageRanges = p.getAgeRanges();
        for (RelativeReport rel : p.getRelativeReports()) {
            StringBuffer name = new StringBuffer();
            if (showNames && rel.getName() != null) {
                name.append(rel.getName()).append(" ");
            }
            name.append("(").append(rel.getCodeEnum().getDisplayValue()).append(")");
            table.addCell(name.toString());
            table.addCell(rel.getLivingStatus());
            table.addCell(handleClinicalObservation(rel, ageRanges, rel.getHeartDisease()));
            table.addCell(handleClinicalObservation(rel, ageRanges, rel.getStroke()));
            table.addCell(handleClinicalObservation(rel, ageRanges, rel.getDiabetes()));
            table.addCell(handleClinicalObservation(rel, ageRanges, rel.getColonCancer()));
            table.addCell(handleClinicalObservation(rel, ageRanges, rel.getBreastCancer()));
            table.addCell(handleClinicalObservation(rel, ageRanges, rel.getOvarianCancer()));
            table.addCell(handleClinicalObservation(rel, ageRanges, rel.getAdditionalDiseases()));
        }
        return table;

    }

    /**
     * creates the strings to be shown for clinical observations.
     * @throws BadElementException 
     */
    @SuppressWarnings("PMD.AppendCharacterWithChar")
    private PdfPCell handleClinicalObservation(Relative relative, Map<AgeRange, String> ages, List<ClinicalObservation> cos) throws BadElementException  {
        PdfPCell c = new PdfPCell();
        for (ClinicalObservation co : cos) {
            if (co.getDisease() != null) {
                Disease d = co.getDisease();
                StringBuffer display = new StringBuffer();
                if (relative.isUnmatchedCondition() && co.isUnmatchedCondition()) {
                    display.append("* ");
                }
                display.append(d.getReportDisplay());
                c.addElement(new Paragraph(display.toString()));
                c.addElement(new Paragraph("(" + ages.get(co.getAgeRange()) + ")"));
            }
        }

        return c;
        
    }

}
/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.data.util.PersonUtils;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;
import gov.hhs.fhh.web.util.FhhUtils;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.Preparable;
import com.opensymphony.xwork2.validator.annotations.IntRangeFieldValidator;
import com.opensymphony.xwork2.validator.annotations.Validations;

/**
 * @author bpickeral
 *
 */
public class AddFamilyTreeAction extends ActionSupport implements Preparable {
    private static final long serialVersionUID = 19273338463L;
    private static final String SUBMIT = "submit";
    
    private Person person;

    private Integer brothers;
    private Integer sisters;
    private Integer sons;
    private Integer daughters;
    private Integer paunts;
    private Integer puncles;
    private Integer maunts;
    private Integer muncles;
    
    
    /**
     * {@inheritDoc}
     */
    public void prepare() {
        Person rootPerson = FhhHttpSessionUtil.getRootPerson();
        if (rootPerson != null) {
            setPerson(rootPerson);
        }
    }
    
    /**
     * Method invokes the add family Tree page.
     * @return path String
     */
    public String addFamilyTree() {
        return SUCCESS;
    }
    
    /**
     * Method invokes the add person page using Submodal.
     * @return path String
     */
    @Validations(
            intRangeFields = {
                @IntRangeFieldValidator(fieldName = "brothers", min = "0", max = "999",
                     key = "struts.validator.intRange", message = ""
                )
            }
    )
    public String submitFamilyTree() {
        FhhUtils.addRequiredRelativesToTree(person);
        PersonUtils.addRelatives(person, brothers, RelativeCode.NBRO);
        PersonUtils.addRelatives(person, sisters, RelativeCode.NSIS);
        PersonUtils.addRelatives(person, sons, RelativeCode.SON);
        PersonUtils.addRelatives(person, daughters, RelativeCode.DAU);
        PersonUtils.addRelatives(person, paunts, RelativeCode.PAUNT);
        PersonUtils.addRelatives(person, puncles, RelativeCode.PUNCLE);
        PersonUtils.addRelatives(person, maunts, RelativeCode.MAUNT);
        PersonUtils.addRelatives(person, muncles, RelativeCode.MUNCLE);
        return SUBMIT;
    }

    /**
     * @return the person
     */
    public Person getPerson() {
        return person;
    }

    /**
     * @param person the person to set
     */
    public void setPerson(Person person) {
        this.person = person;
    }

    /**
     * @return the brothers
     */
    public Integer getBrothers() {
        return brothers;
    }

    /**
     * @param brothers the brothers to set
     */
    public void setBrothers(Integer brothers) {
        this.brothers = brothers;
    }

    /**
     * @return the sisters
     */
    public Integer getSisters() {
        return sisters;
    }

    /**
     * @param sisters the sisters to set
     */
    public void setSisters(Integer sisters) {
        this.sisters = sisters;
    }

    /**
     * @return the sons
     */
    public Integer getSons() {
        return sons;
    }

    /**
     * @param sons the sons to set
     */
    public void setSons(Integer sons) {
        this.sons = sons;
    }

    /**
     * @return the daughters
     */
    public Integer getDaughters() {
        return daughters;
    }

    /**
     * @param daughters the daughters to set
     */
    public void setDaughters(Integer daughters) {
        this.daughters = daughters;
    }

    /**
     * @return the paunts
     */
    public Integer getPaunts() {
        return paunts;
    }

    /**
     * @param paunts the paunts to set
     */
    public void setPaunts(Integer paunts) {
        this.paunts = paunts;
    }

    /**
     * @return the puncles
     */
    public Integer getPuncles() {
        return puncles;
    }

    /**
     * @param puncles the puncles to set
     */
    public void setPuncles(Integer puncles) {
        this.puncles = puncles;
    }

    /**
     * @return the maunts
     */
    public Integer getMaunts() {
        return maunts;
    }

    /**
     * @param maunts the maunts to set
     */
    public void setMaunts(Integer maunts) {
        this.maunts = maunts;
    }

    /**
     * @return the muncles
     */
    public Integer getMuncles() {
        return muncles;
    }

    /**
     * @param muncles the muncles to set
     */
    public void setMuncles(Integer muncles) {
        this.muncles = muncles;
    }
}
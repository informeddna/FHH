/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.model.mfhp.castor.ExportUtils;
import gov.hhs.fhh.service.FhhWebException;
import gov.hhs.fhh.service.util.FhhUtils;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.UUID;

import org.apache.struts2.interceptor.validation.SkipValidation;

import com.fiveamsolutions.hl7.model.mfhp.Gender;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.Preparable;

/**
 * @author bpickeral
 * 
 */
public class ReindexAction extends ActionSupport implements Preparable {
    private static final long serialVersionUID = 116173314L;
    private static final String DOWNLOAD_DOC_NAME = "FamilyHistory";
    private static final String EXTENSION = ".xml";
    private static final String DEFAULT_DOC_PREFIX = "My_";

    private Person person;
    private Person proband;
    private String fileName;
    private String relativeId;
    private InputStream downloadFile;

    /**
     * {@inheritDoc}
     */
    public void prepare() {
        Person rootPerson = FhhHttpSessionUtil.getRootPerson();
        if (rootPerson != null) {
            setPerson(rootPerson);
        }
    }

    /**
     * Method invokes the reindex page.
     * 
     * @return path String
     */
    public String reindex() {
        return SUCCESS;
    }

    /**
     * Method sends family history detail to output in the form of an XML document. Method assumes the relative Ids are
     * set.
     * 
     * @return path String
     * @throws FhhWebException if there is an error
     */
    public String saveXmlDocument() throws FhhWebException {
        proband = getPerson();
        if (getRelativeId() != null) {
            proband = proband.recenterOn(UUID.fromString(getRelativeId()));
        }

        if (fileName == null) {
            fileName = getFileNameForPerson(proband);
        } else {
            setFileName(fileName + EXTENSION);
        }

        setChildrenIds();
        downloadFile = new ByteArrayInputStream(ExportUtils.createXMLFile(proband, true).getBytes());

        return "downloadXMLFile";
    }

    /**
     * @param person - the person for which the file name will be retrieved
     * @return - the file name of the xml file that is returned when saveXmlDocument() is called.
     */
    public static String getFileNameForPerson(Person person) {
        String retval = null;
        StringBuffer fileNameBuff = new StringBuffer();
        if (person != null && person.getName() != null) {
            fileNameBuff.append(person.getName()).append('_');
        } else {
            fileNameBuff.append(DEFAULT_DOC_PREFIX);
        }
        fileNameBuff.append(DOWNLOAD_DOC_NAME + EXTENSION);
        retval = fileNameBuff.toString().replaceAll(" ", "_");

        return retval;
    }

    
    private void setChildrenIds() {
        for (Relative currRelative : proband.getRelatives()) {
            if (currRelative.isChildOfProband()) {
                setProbandParentId(currRelative);
            }
        }
    }

    private void setProbandParentId(Relative relative) {
        if (Gender.MALE.equals(proband.getGender())) {
            relative.setFatherId(proband.getUuid());
        } else if (Gender.FEMALE.equals(proband.getGender())) {
            relative.setMotherId(proband.getUuid());
        }
    }

    /**
     * Method creates a new Person for the reindexed family member Method assumes the relative Ids are set.
     * 
     * @return InputStream
     * @throws FhhWebException - in case of an error.
     */
    public InputStream getReindexPreview() throws FhhWebException {
        proband = getPerson();
        if (getRelativeId() != null) {
            proband = proband.recenterOn(UUID.fromString(getRelativeId()));
        }
        // need to add parents or grandparents, if they're not part of the recentered person
        proband = FhhUtils.setupParents(proband);
        // now draw the png
        return ViewReportAction.getDiagramForPerson(proband, true, null);
    }

    /**
     * Retrieves the pedigree diagram.
     * 
     * @return return for pedigree diagram
     */
    @SkipValidation
    public String retrieveImage() {
        return "previewImage";
    }

    /**
     * Retrieves the pedigree diagram for reindexing.
     * 
     * @return pedigree diagram after reindex
     */
    @SkipValidation
    public String previewReindex() {
        return "success";
    }

    /**
     * Method transmits the family history file to the HttpServletResponse output stream.
     * 
     * @return input stream containgint the xml file
     */
    public InputStream getDownloadFile() {
        // Most recent version of the file has been saved
        if (relativeId == null) {
            proband.setXmlFileSaved(true);
        }
        return downloadFile;
    }

    /**
     * @return the person
     */
    public Person getPerson() {
        return person;
    }

    /**
     * @param person the person to set
     */
    public void setPerson(Person person) {
        this.person = person;
    }

    /**
     * @return the fileName
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * @param fileName the fileName to set
     */
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * @return the proband
     */
    public Person getProband() {
        return proband;
    }

    /**
     * @param proband the proband to set
     */
    public void setProband(Person proband) {
        this.proband = proband;
    }

    /**
     * @return the relativeId
     */
    public String getRelativeId() {
        return relativeId;
    }

    /**
     * @param relativeId the relativeId to set
     */
    public void setRelativeId(String relativeId) {
        this.relativeId = relativeId;
    }
}

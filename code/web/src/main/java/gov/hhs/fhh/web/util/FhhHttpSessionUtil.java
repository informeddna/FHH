/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.util;


import gov.hhs.fhh.data.ClinicalObservation;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.service.PersonInfo;
import gov.hhs.fhh.web.data.ConnectionInfo;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.struts2.ServletActionContext;


/**
 * This class is used to manage objects in session.
 * @author Brian Pickeral
 */
public class FhhHttpSessionUtil {
    
    /**
     * Reference to the attribute name of the rootKey stored in session.
     */
    public static final String ROOT_KEY = "rootKey";
    
    /**
     * Reference to the attribute name of the user entered diseases in session.
     */
    public static final String DISEASE_KEY = "diseaseKey";
    
    /**
     * Reference to the attribute name of the healthvault key session.
     */
    public static final String HV_KEY = "_hv";
    
    /**
     * Reference to the attribute name of the previewPersonKey stored in session(used to display the preview chart of
     * the person pulled out of mshv).
     */
    public static final String PREVIEW_PERSON_KEY = "previewPersonKey";
    
    
    /**
     * key for the popup session param.
     */
    public static final String POPUP_KEY = "popupKey";
    
    
    private static int sidCounter = Integer.MIN_VALUE;
    
    private static synchronized String getNextSid() {
        return Integer.toHexString(sidCounter++);
    }
    
    /**
     * short for ServletActionContext.getRequest().getSession().
     * @return current session
     */
    public static HttpSession getSession() {
        return ServletActionContext.getRequest().getSession();
    }
    
    /**
     * Stores the person in session and sets the rootKey in session as
     * the generated key.
     * @param p Person Object to store in session
     * @return rootKey of the person object
     */
    public static String storePersonInSession(Person p) {
        String personKey = addUniqueAttribute(p);
        getSession().setAttribute(ROOT_KEY, personKey);
        return personKey;
    }
    
    /**
     * Adds an object to the http session with a unique key.
     * @param o the object to add to the session
     * @return the key used to add the objects
     */
    public static String addUniqueAttribute(Serializable o) {
        HttpSession session = getSession();
        // make sure this session id is unique
        String sessionKey = getNextSid();
        synchronized (session) {
            while (session.getAttribute(sessionKey) != null) {
                sessionKey = getNextSid();
            }
            getSession().setAttribute(sessionKey, o);
        }
        return sessionKey;
    }
    
    /**
     * Gets the rootKey of the person object from session.
     * @return String representing the rootKey
     */
    public static String getRootKey() {
        return (String) getSession().getAttribute(ROOT_KEY);
    }
    
    /**
     * Gets the rootPerson object from session.
     * @return Person object
     */
    public static Person getRootPerson() {
        String rootKey = getRootKey();
        Person person = null;
        if (rootKey != null) {
            person = (Person) getSession().getAttribute(rootKey);
        }
        return person;
    }
    
    /**
     * Gets the healthvaultKey of the person object from session.
     * @return String representing the rootKey
     */
    public static String getHealthvaultKey() {
        return (String) getSession().getAttribute(ROOT_KEY) + HV_KEY;
    }
    
    /**
     * Gets the ConnectionInfo object from session for Healthvault.
     * @return String representing the rootKey
     */
    public static ConnectionInfo getHVSession() {
        String hvKey = getHealthvaultKey();
        ConnectionInfo connectionInfo = null;
        if (hvKey != null) {
            connectionInfo = (ConnectionInfo) getSession().getAttribute(hvKey);
        }
        return connectionInfo;
    }

    /**
     * Stores the person in session and sets the rootKey in session as
     * the generated key.
     * @param connectionInfo ConnectionInfo to store in session
     */
    public static void setHVSession(PersonInfo connectionInfo) {
        getSession().setAttribute(getHealthvaultKey(), connectionInfo);
    }
    
    /**
     * Gets the User entered Disease List from session.
     * @return List of user entered Diseases
     */
    @SuppressWarnings("unchecked")
    public static Map<String, Disease> getUserEnteredDiseases() {
        return (Map<String, Disease>) getSession().getAttribute(DISEASE_KEY);
    }
    
    /**
     * Adds a Disease to the list of user entered diseases in session.
     * @param disease to add
     */
    public static void addUserEnteredDisease(Disease disease) {
        if (disease.isOther()) {
            Map<String, Disease> userEnteredDiseases = getUserEnteredDiseases();
            if (userEnteredDiseases == null) {
                userEnteredDiseases = new HashMap<String, Disease>();
                getSession().setAttribute(DISEASE_KEY, userEnteredDiseases);
            }
            if (!userEnteredDiseases.containsKey(disease.getOriginalText())) {
                userEnteredDiseases.put(disease.getOriginalText(), disease);
            }
        }
    }
    
    /**
     * Finds all user entered diseases for the central person and relatives and adds the diseases to
     *  session.
     * @param p Person object containing user entered diseases
     */
    public static void addAllUserEnteredDiseases(Person p) {
        addUserEnteredDiseasesForPerson(p);
        for (Relative relative : p.getRelatives()) {
            addUserEnteredDisasesForRelative(relative);
        }
    }
    
    private static void addUserEnteredDiseasesForPerson(Person p) {
        for (ClinicalObservation obs : p.getObservations()) {
            addUserEnteredDisease(obs.getDisease());
        }
    }
    
    private static void addUserEnteredDisasesForRelative(Relative r) {
        addUserEnteredDiseasesForPerson(r);
        if (r.getCauseOfDeath() != null) {
            addUserEnteredDisease(r.getCauseOfDeath());
        }
    }

    /**
     * Sets the value of the object o for the sessionKey.
     * @param sessionKey the session key of the object to set.
     * @param o the object to set in session
     */
    public static void setAttribute(String sessionKey, Serializable o) {
        HttpSession session = getSession();
        synchronized (session) {
            getSession().setAttribute(sessionKey, o);
        }
    }
    
}

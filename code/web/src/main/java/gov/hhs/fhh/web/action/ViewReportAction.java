/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeBranch;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.data.RelativeReport;
import gov.hhs.fhh.service.FhhWebException;
import gov.hhs.fhh.service.util.PdfDataContainer;
import gov.hhs.fhh.service.util.RelativeDraw;
import gov.hhs.fhh.service.util.RelativePdfWriter;
import gov.hhs.fhh.web.util.ActionSupportTextGetter;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.set.ListOrderedSet;
import org.apache.log4j.Logger;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.validation.SkipValidation;

import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.Preparable;

/**
 * @author lpower
 * 
 */
@SuppressWarnings({ "PMD.TooManyMethods", "PMD.AvoidDuplicateLiterals", "PMD.CyclomaticComplexity" })
public class ViewReportAction extends ActionSupport implements Preparable, ServletRequestAware {
    private static final Logger LOG = Logger.getLogger(ViewReportAction.class);
    private static final long serialVersionUID = 1924447846653L;
    private static final String SUBMIT_ACTION = "submit";

    private Person person;
    private RelativeBranch relativeBranch;
    private Set<RelativeReport> relativeReports = new ListOrderedSet();
    private Map<String, Disease> internalLegendList = new HashMap<String, Disease>();
    private boolean showNames = true;
    private boolean showPersonalInfo = true;
    private boolean showChart = true;
    private boolean showDiagram = true;
    private Disease highlightDisease;
    private HttpServletRequest request;
    private String selectedHighlightDisease;
    private String ignore; 

    /**
     * prepare the action. {@inheritDoc}
     */
    public void prepare() {
        Person rootPerson = FhhHttpSessionUtil.getRootPerson();
        if (rootPerson != null) {
            setPerson(rootPerson);
            this.relativeBranch = new RelativeBranch(person);
            Set<Relative> meMomDadDescendants = new ListOrderedSet();
            meMomDadDescendants.add(new Relative(person, RelativeCode.SELF));
            if (!person.getRelatives().isEmpty()) {
                meMomDadDescendants.addAll(person.getDescendants());
                meMomDadDescendants.add(person.getFather());
                meMomDadDescendants.add(person.getMother());
            }
            addToRelativeReports(meMomDadDescendants);
            addToRelativeReports(this.relativeBranch.getSiblings());
            addToRelativeReports(this.relativeBranch.getFatherBranch());
            addToRelativeReports(this.relativeBranch.getMotherBranch());
        }
        getRequestAttributes();
    }

    /**
     * sets the HttpServletRequest. {@inheritDoc}
     */
    public void setServletRequest(HttpServletRequest aRequest) {
        this.request = aRequest;
    }

    /**
     * Sets report options into request.
     */
    public void getRequestAttributes() {
        if (request.getSession().getAttributeNames() != null) {
            if (request.getSession().getAttribute("showChart") != null) {
                setShowChart(((Boolean) request.getSession().getAttribute("showChart")).booleanValue());
            }
            if (request.getSession().getAttribute("showDiagram") != null) {
                setShowDiagram(((Boolean) request.getSession().getAttribute("showDiagram")).booleanValue());
            }
            if (request.getSession().getAttribute("showNames") != null) {
                setShowNames(((Boolean) request.getSession().getAttribute("showNames")).booleanValue());
            }
            if (request.getSession().getAttribute("showPersonalInfo") != null) {
                setShowPersonalInfo(((Boolean) request.getSession().getAttribute("showPersonalInfo")).booleanValue());
            }
            if (request.getSession().getAttribute("selectedHighlightDisease") != null) {
                setHighlightDisease((String) request.getSession().getAttribute("selectedHighlightDisease"));
                setSelectedHighlightDisease((String) request.getSession().getAttribute("selectedHighlightDisease"));
            }
        }
    }

    /**
     * Sets report options into request.
     */
    public void setRequestAttributes() {
        request.getSession().setAttribute("showChart", isShowChart());
        request.getSession().setAttribute("showDiagram", isShowDiagram());
        request.getSession().setAttribute("showNames", isShowNames());
        request.getSession().setAttribute("showPersonalInfo", isShowPersonalInfo());
        request.getSession().setAttribute("selectedHighlightDisease", getSelectedHighlightDisease());
    }

    /**
     * @param relatives
     */
    private void addToRelativeReports(Set<Relative> relatives) {
        for (Relative myrel : relatives) {
            RelativeReport rr = new RelativeReport(myrel);
            this.getRelativeReports().add(rr);
            for (Disease d : rr.getLegendList()) {
                getInternalLegendList().put(d.getGeneratedAbbreviation(), d);
            }
        }
    }

    /**
     * Method invokes the change report page using Submodal.
     * 
     * @return path String
     */
    public String changeReport() {
        return "changeReport";
    }

    /**
     * Submit report options modification.
     * 
     * @return path String
     */
    public String submitReportOptions() {
        // pass down the values to the chart maker and the jsp
        setRequestAttributes();
        return SUBMIT_ACTION;
    }

    /**
     * Loads view report outer page.
     * 
     * @return path String
     */
    public String viewReport() {
        return SUCCESS;
    }

    /**
     * Loads report detail page.
     * 
     * @return path String
     */
    public String viewReportDetail() {
        return SUCCESS;
    }


    /**
     * Retrieves the report pdf.
     * 
     * @return return for report in pdf format
     */
    @SkipValidation
    public String downloadPdf() {
        return "streamPdf";
    }

    /**
     * Calls to get the InputStram for the pdf of the view report information.
     * 
     * @return InputStream with diagram
     * @throws Exception on error.
     */
    @SkipValidation
    @SuppressWarnings("PMD.SignatureDeclareThrowsException")
    public InputStream getPdf() throws Exception {
        // return makeDiagram();
        try {
            RelativeDraw selfDraw = new RelativeDraw(new Relative(this.person), new ActionSupportTextGetter());
            selfDraw.setCodeEnum(RelativeCode.SELF);
            selfDraw.setShowNames(this.isShowNames());
            if (getHighlightDisease() != null) {
                selfDraw.setHighlightDisease(getHighlightDisease());
            }
            RelativePdfWriter pdf = new RelativePdfWriter();
            PdfDataContainer p = new PdfDataContainer();
            p.getAgeRanges().putAll(createIntlAgeRanges());
            p.getLegendLabels().putAll(createIntlLegendLabels());
            p.setRelativeDraw(selfDraw);
            p.getRelativeReports().addAll(getRelativeReports());
            p.getLegendList().addAll(getLegendList());
            return new ByteArrayInputStream(pdf.makeRelativePdf(p));
        } catch (Exception e) {
            LOG.info("exception generating pdf");
            LOG.info(e.getMessage());
            LOG.info(e.getCause().toString());
            LOG.info(e.getStackTrace().toString());
        }
        return new ByteArrayInputStream("hello".getBytes());
    }

    /**
     * Creates internationalized values for legend labels for use in the pdf.
     * These keys are used in relativePdfWriter.makeFamilyHistoryChart - this is too tightly coupled code
     * @return Map of internationalized values
     */
    private Map<String, String> createIntlLegendLabels() {
        Map<String, String> legendValues = new HashMap<String, String>();
        legendValues.put("living", getText("report.table.living"));
        legendValues.put("heartDisease", getText("report.table.heartDisease"));
        legendValues.put("stroke", getText("report.table.stroke"));
        legendValues.put("diabetes", getText("report.table.diabetes"));
        legendValues.put("colonCancer", getText("report.table.colonCancer"));
        legendValues.put("breastCancer", getText("report.table.breastCancer"));
        legendValues.put("ovarianCancer", getText("report.table.ovarianCancer"));
        legendValues.put("additionalDiseases", getText("report.table.additionalDiseases"));
        return legendValues;
    }

    /**
     * Creates internationalized values for age ranges for use in the pdf.
     * @return Map of Age Ranges and internaltionalized values
     */
    private Map<AgeRangeEnum, String> createIntlAgeRanges() {
        Map<AgeRangeEnum, String> ageRangeEnums = new HashMap<AgeRangeEnum, String>();
        for (AgeRangeEnum a : AgeRangeEnum.values()) {
            ageRangeEnums.put(a, getText(a.getResourceKey()));
        }
        return ageRangeEnums;
    }

    /**
     * Retrieves the pedigree diagram.
     * 
     * @return return for pedigree diagram
     */
    @SkipValidation
    public String retrieveImage() {
        return "pedigreeDiagram";
    }

    /**
     * Calls to get the InputStram for the pedigree diagram.
     * 
     * @return InputStream with diagram
     * @throws Exception on error.
     */
    @SkipValidation
    @SuppressWarnings("PMD.SignatureDeclareThrowsException")
    public InputStream getPedigreeImage() throws Exception {
        return makeDiagram();
    }
    
    /**
     * Sets the default pedigree diagram.
     * 
     * @return InputStream
     * @throws FhhWebException on error.
     */
    @SuppressWarnings("PMD.SignatureDeclareThrowsException")
    public InputStream makeDiagram() throws FhhWebException {
        return getDiagramForPerson(this.person, isShowNames(), getHighlightDisease());
    }

    /**
     * @param person - the person for the diagram.
     * @param showNoNames - show names or not.
     * @param highlightDisease - the disease to highlight.
     * @return - the diagram image.
     * @throws FhhWebException - in case of an error.
     */
    public static InputStream getDiagramForPerson(Person person, boolean showNoNames, Disease highlightDisease)
            throws FhhWebException {
        InputStream retval = null;

        try {
            RelativeDraw selfDraw = new RelativeDraw(new Relative(person), new ActionSupportTextGetter());
            selfDraw.setCodeEnum(RelativeCode.SELF);
            selfDraw.setShowNames(showNoNames);
            if (highlightDisease != null) {
                selfDraw.setHighlightDisease(highlightDisease);
            }

            retval = new ByteArrayInputStream(selfDraw.organizeFamilyTree(person));
        } catch (Exception e) {
            throw new FhhWebException(e);
        }

        return retval;
    }
    
    /**
     * @return the person
     */
    public Person getPerson() {
        return person;
    }

    /**
     * @param person the person to set
     */
    public void setPerson(Person person) {
        this.person = person;
    }

    /**
     * @return the relativeBranch
     */
    public RelativeBranch getRelativeBranch() {
        return relativeBranch;
    }

    /**
     * @param relativeBranch the relativeBranch to set
     */
    public void setRelativeBranch(RelativeBranch relativeBranch) {
        this.relativeBranch = relativeBranch;
    }

    /**
     * @return the relativeReports
     */
    public Set<RelativeReport> getRelativeReports() {
        return relativeReports;
    }

    /**
     * @param relativeReports the relativeReports to set
     */
    public void setRelativeReports(Set<RelativeReport> relativeReports) {
        this.relativeReports = relativeReports;
    }

    /**
     * @return the legendList
     */
    public List<Disease> getLegendList() {
        List<Disease> a = new ArrayList<Disease>();
        a.addAll(getInternalLegendList().values());
        return a;
    }

    /**
     * @return the internalLegendList
     */
    public Map<String, Disease> getInternalLegendList() {
        return internalLegendList;
    }

    /**
     * @param internalLegendList the internalLegendList to set
     */
    public void setInternalLegendList(Map<String, Disease> internalLegendList) {
        this.internalLegendList = internalLegendList;
    }

    /**
     * @return the showNames
     */
    public boolean isShowNames() {
        return showNames;
    }

    /**
     * @param showNames the showNames to set
     */
    public void setShowNames(boolean showNames) {
        this.showNames = showNames;
    }

    /**
     * @return the showPersonalInfo
     */
    public boolean isShowPersonalInfo() {
        return showPersonalInfo;
    }

    /**
     * @param showPersonalInfo the showPersonalInfo to set
     */
    public void setShowPersonalInfo(boolean showPersonalInfo) {
        this.showPersonalInfo = showPersonalInfo;
    }

    /**
     * @return the showChart
     */
    public boolean isShowChart() {
        return showChart;
    }

    /**
     * @param showChart the showChart to set
     */
    public void setShowChart(boolean showChart) {
        this.showChart = showChart;
    }

    /**
     * @return the showDiagram
     */
    public boolean isShowDiagram() {
        return showDiagram;
    }

    /**
     * @param showDiagram the showDiagram to set
     */
    public void setShowDiagram(boolean showDiagram) {
        this.showDiagram = showDiagram;
    }

    /**
     * @return the highlightDisease
     */
    public Disease getHighlightDisease() {
        return highlightDisease;
    }

    /**
     * @param highlightDisease the highlightDisease to set
     */
    public void setHighlightDisease(Disease highlightDisease) {
        this.highlightDisease = highlightDisease;
    }

    /**
     * @param selectedHighlightDisease String - sets the Disease from the string.
     */
    // CHECKSTYLE:OFF hides a field
    public void setHighlightDisease(String selectedHighlightDisease) {
        if (!getInternalLegendList().isEmpty()) {
            Disease d = getInternalLegendList().get(selectedHighlightDisease);
            if (d != null) {
                setHighlightDisease(d);
            }
            
        }
    }
    // CHECKSTYLE:ON 

    /**
     * @return the date
     */
    public Date getDate() {
        return new Date();
    }

    /**
     * @return the selectedHighlightDisease
     */
    public String getSelectedHighlightDisease() {
        return selectedHighlightDisease;
    }

    /**
     * @param selectedHighlightDisease the selectedHighlightDisease to set
     */
    public void setSelectedHighlightDisease(String selectedHighlightDisease) {
        this.selectedHighlightDisease = selectedHighlightDisease;
    }

    /**
     * @return ignored param value
     */
    public String getIgnore() {
        return ignore;
    }

    /**
     * @param ignore ignored param value
     */
    public void setIgnore(String ignore) {
        this.ignore = ignore;
    }

}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.filter;

import gov.hhs.fhh.service.HealthVaultContext;
import gov.hhs.fhh.web.Settings;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;

/**
 * A filter to handle redirects to MFHP from MSHV (integration stuff).
 * 
 * @author smatyas
 * 
 */
public class MSHealthVaultFilter implements Filter {

    /**
     * {@inheritDoc}
     * 
     * @see javax.servlet.Filter#destroy()
     */
    public void destroy() {
        // no op
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse,
     *      javax.servlet.FilterChain)
     */
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,
            ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;
        String redirectUrl = getRedirectUrl(httpRequest);
        if (redirectUrl != null) {
            httpResponse.sendRedirect(redirectUrl);
            return;
        }
        chain.doFilter(request, response);
    }

    private String getRedirectUrl(HttpServletRequest httpRequest) throws IOException {
        String targetParam = httpRequest.getParameter("target");
        if ("APPAUTHSUCCESS".equalsIgnoreCase(targetParam)) {
            return getHVContextUrl(httpRequest);
        } else if ("APPAUTHREJECT".equalsIgnoreCase(targetParam)) {
            return getHVContextUrl(httpRequest);
        } else if ("privacy".equalsIgnoreCase(targetParam)) {
            return Settings.INSTANCE.getSetting("mshv.redirect.target.privacy");
        } else if ("serviceagreement".equalsIgnoreCase(targetParam)) {
            return Settings.INSTANCE.getSetting("mshv.redirect.target.serviceagreement");
        } else if ("home".equalsIgnoreCase(targetParam)) {
            StringBuilder returnUrl = new StringBuilder();
            returnUrl.append(Settings.INSTANCE.getSetting(Settings.APPLICATION_BASE_URL));
            returnUrl.append("home.action");
            return returnUrl.toString();
        }
        return null;
    }

    private String getHVContextUrl(HttpServletRequest httpRequest) throws UnsupportedEncodingException {
        StringBuilder returnUrl = null; 
        String actionqsParam = httpRequest.getParameter("actionqs");
        if (HealthVaultContext.LOAD.name().equalsIgnoreCase(actionqsParam)) {
            returnUrl = new StringBuilder();
            returnUrl.append(Settings.INSTANCE.getSetting(Settings.APPLICATION_BASE_URL));
            returnUrl.append(Settings.INSTANCE.getSetting(Settings.LOAD_PEDIGREE));
        } else if (HealthVaultContext.SAVE.name().equalsIgnoreCase(actionqsParam)) {
            returnUrl = new StringBuilder();
            returnUrl.append(Settings.INSTANCE.getSetting(Settings.APPLICATION_BASE_URL));
            returnUrl.append(Settings.INSTANCE.getSetting(Settings.SAVE_PEDIGREE));
        }
        String wctoken = httpRequest.getParameter("wctoken");
        if (returnUrl != null && StringUtils.isNotBlank(wctoken)) {
            returnUrl.append("?");
            returnUrl.append("wctoken");
            returnUrl.append("=");
            returnUrl.append(URLEncoder.encode(wctoken, "UTF-8"));
        }
        return (returnUrl != null) ? returnUrl.toString() : null;
    }

    /**
     * {@inheritDoc}
     * 
     * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
     */
    public void init(FilterConfig arg0) throws ServletException {
        // no op
    }

}

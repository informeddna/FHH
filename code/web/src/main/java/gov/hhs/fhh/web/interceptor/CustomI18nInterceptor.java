/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.interceptor;

import gov.hhs.fhh.service.util.CurrentLanguageHolder;

import java.util.Locale;

import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.AbstractInterceptor;

/**
 * Extension of the standard Struts2 I18nInterceptor that also stores the current language in a ThreadLocal
 * ({@link CurrentLanguageHolder}).
 * @author Steve Lustbader
 */
public class CustomI18nInterceptor extends AbstractInterceptor {
    
    private static final long serialVersionUID = 1L;


    /**
     * Supported I18N.
     * @author smatyas
     *
     */
    public enum SupportedI18N {
        /**
         * Spanish.
         */
        ES("es"),
        
        /**
         * PORTUGUES.
         */
        PT("pt"),
        /**
         * ITALIAN.
         */
        IT("it"),
        /**
         * ENGLISH.
         */
        EN("en");
        
        private final String language;

        /**
         * default constructor.
         */
        private SupportedI18N(String language) {
            this.language = language;
        }

        /**
         * @return the language
         */
        public String getLanguage() {
            return language;
        }
    }
    

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("PMD.SignatureDeclareThrowsException")
    public String intercept(ActionInvocation invocation) throws Exception {
        // We should only except 'en' and 'es' as locales, otherwise a phishing vulnerability exists.
        Locale locale = invocation.getInvocationContext().getLocale();
        try {
            SupportedI18N.valueOf(locale.getLanguage().toUpperCase());
            CurrentLanguageHolder.setCurrentLanguage(locale.getLanguage());
        } catch (IllegalArgumentException e) {
            locale = Locale.ENGLISH;
            invocation.getInvocationContext().setLocale(locale);
            CurrentLanguageHolder.setCurrentLanguage(locale.getLanguage());
        }
        return invocation.invoke();
    }

}

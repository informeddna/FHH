/**
 *
 * Family Health History Portal
 * END USER AGREEMENT
 *
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably
 * grants to the user a non-exclusive, royalty-free right to use, display,
 * reproduce, and distribute this Family Health History portal software
 * (the "software") and prepare, use, display, reproduce and distribute
 * derivative works thereof for any commercial or non-commercial purpose by any
 * party, subject only to the following limitations and disclaimers, which
 * are hereby acknowledged by the user.
 *
 * User agrees that it will not degrade the standards-based format of the software
 * by materially altering the program architecture or data structure in a way
 * that would render the data generated by the altered software incompatible
 * with the original software. The intention of this clause is to ensure the
 * long-term interoperability of family history information gathered by different
 * versions of the tool.
 *
 * User agrees that this END USER AGREEMENT will be provided to any party to
 * whom user distributes the software, and that it will apply to the distributee.
 *
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS
 * trademarks without permission from HHS, and will not imply endorsement of
 * its product by HHS or the Surgeon General.
 *
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED,
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE,
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT,
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 *
 */
package gov.hhs.fhh.web.action;

import gov.hhs.fhh.data.util.FormatUtils;
import gov.hhs.fhh.data.util.PedigreeFactory;
import gov.hhs.fhh.data.util.PersonUtils;
import gov.hhs.fhh.service.util.RiskClient;
import gov.hhs.fhh.web.util.PersonActionUtils;
import gov.nih.nci.drc.model.diabetes.DiabetesCritereon;
import gov.nih.nci.drc.model.diabetes.HypertensionCritereon;
import gov.nih.nci.drc.model.diabetes.NuclearFamilyDiabetesRiskCritereon;
import gov.nih.nci.drc.util.FileLanguageCode;

import java.io.ByteArrayInputStream;

import org.apache.commons.lang.xwork.StringUtils;

import com.fiveamsolutions.hl7.model.Pedigree;
import com.fiveamsolutions.hl7.model.mfhp.Gender;
import com.fiveamsolutions.hl7.model.mfhp.WeightUnit;
import com.opensymphony.xwork2.Preparable;

/**
 * @author bpickeral
 *
 */
public class DiabetesRiskAction extends AbstractRiskAction implements Preparable {
    private static final long serialVersionUID = 316273314L;

    private boolean gestationalDiabetes;
    private boolean nuclearFamilyDiabetes;
    private boolean hypertension;

    /**
     * {@inheritDoc}
     */
    public void prepare() {
        setPerson(getPersonFromSession());
        if (getPerson() != null) {
            setupDateOfBirth();
            setReadOnlyRisks();
            setupHeight();
        }
    }

    private void setReadOnlyRisks() {
        final Pedigree pedigree = PedigreeFactory.getInstance().createPedigree(getPerson());
        setGestationalDiabetes(new DiabetesCritereon().getRiskFactor(pedigree) > 0);
        setNuclearFamilyDiabetes(new NuclearFamilyDiabetesRiskCritereon().getRiskFactor(pedigree) > 0);
        setHypertension(new HypertensionCritereon().getRiskFactor(pedigree) > 0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected FileLanguageCode getFileLanguageCode() {
        // Multilingual pdfs not currently supported for DRC
        return FileLanguageCode.EN;
    }

    /**
     * Method invokes the Diabetes risk page.
     *
     * @return path String
     */
    public String diabetesAdditionalInformation() {
        return SUCCESS;
    }

    /**
     * Method invokes the add person page using Submodal.
     *
     * @return path String
     */
    public String diabetesRisk() {

        validateSubmitFields();
        if (this.getFieldErrors().size() > 0) {
            return INPUT;
        }
        getPerson().setDateOfBirth(FormatUtils.convertStringToDate(getDateOfBirthString()));
        getPerson().setHeight(PersonActionUtils.getInstance().getHeight(getHeightUnit1(), getHeightUnit2(),
                getHeightMetric()));
        storeWeight();
        RiskClient.getInstance().calculateDiabetesRisk(getPerson(), getBuilder());
        setRiskHTML(new String(RiskClient.getInstance().getRiskFile(getBuilder().getMessage(),
                getFileLanguageCode())));
        return SUCCESS;
    }

    private void validateSubmitFields() {
        checkDateOfBirth(getDateOfBirthString());
        validateRequiredObject("person.gender", "person.gender", getPerson().getGender());
        validateRequiredObject("weightString", "person.weight", getWeightString());
        validateHeight();
        validateIntegerField("weightString", "person.weight", getWeightString());
        validateIntegerField("heightUnit1", "person.height.Unit1", getHeightUnit1(), false);
        validateIntegerField("heightUnit2", "person.height.Unit2", getHeightUnit2(), false);
        validateIntegerField("heightMetric", "person.height.Metric", getHeightMetric());
    }

    private void validateHeight() {
        if (StringUtils.isEmpty(getHeightUnit1()) && StringUtils.isEmpty(getHeightUnit2())
                && StringUtils.isEmpty(getHeightMetric())) {
            addFieldError("heightUnit1", getText("person.height") + " " + getText("errors.required.field"));
        }
    }

    /**
     * Downloads diabetes risk assessment.
     *
     * @return path String
     */
    public String downloadDiabetesRisk() {
        RiskClient.getInstance().calculateDiabetesRisk(getPerson(), getBuilder());
        setRiskFile(new ByteArrayInputStream(RiskClient.getInstance().getRiskFile(getBuilder().getPatient(),
                getFileLanguageCode())));
        setFileName(PersonUtils.getFileNameForPerson(getPerson(), "Diabetes_Risk.pdf"));
        return "downloadDiabetesRiskFile";
    }

    /**
     * Download physician risk letter.
     *
     * @return path String
     */
    public String downloadDiabetesLetter() {
        RiskClient.getInstance().calculateDiabetesRisk(getPerson(), getBuilder());
        setRiskFile(new ByteArrayInputStream(RiskClient.getInstance().getRiskFile(getBuilder().getPhysician(),
                getFileLanguageCode())));
        setFileName(PersonUtils.getFileNameForPerson(getPerson(), "Diabetes_Risk_Physician_Letter.pdf"));
        return "downloadDiabetesRiskFile";
    }

    /**
     * @return the gender enums
     */
    @Override
    public Gender[] getGenderEnums() {
        return Gender.values();
    }

    /**
     * @return the weight unit enums
     */
    @Override
    public WeightUnit[] getWeightUnitEnums() {
        return WeightUnit.values();
    }

    /**
     * @return the gestationalDiabetes
     */
    public boolean isGestationalDiabetes() {
        return gestationalDiabetes;
    }

    /**
     * @param gestationalDiabetes the gestationalDiabetes to set
     */
    public void setGestationalDiabetes(boolean gestationalDiabetes) {
        this.gestationalDiabetes = gestationalDiabetes;
    }

    /**
     * @return the nuclearFamilyDiabetes
     */
    public boolean isNuclearFamilyDiabetes() {
        return nuclearFamilyDiabetes;
    }

    /**
     * @param nuclearFamilyDiabetes the nuclearFamilyDiabetes to set
     */
    public void setNuclearFamilyDiabetes(boolean nuclearFamilyDiabetes) {
        this.nuclearFamilyDiabetes = nuclearFamilyDiabetes;
    }

    /**
     * @return the hypertension
     */
    public boolean isHypertension() {
        return hypertension;
    }

    /**
     * @param hypertension the hypertension to set
     */
    public void setHypertension(boolean hypertension) {
        this.hypertension = hypertension;
    }

}

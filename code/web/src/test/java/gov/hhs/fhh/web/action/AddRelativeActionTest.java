/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.action;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.DiseaseBean;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.data.util.DiseaseUtils;
import gov.hhs.fhh.data.util.FhhDataUtils;
import gov.hhs.fhh.data.util.PersonUtils;
import gov.hhs.fhh.service.PersonServiceLocal;
import gov.hhs.fhh.service.locator.FhhRegistry;
import gov.hhs.fhh.service.util.FhhUtils;
import gov.hhs.fhh.web.test.AbstractFhhWebTest;
import gov.hhs.fhh.web.test.MockServiceLocator;
import gov.hhs.fhh.web.test.PersonServiceStub;
import gov.hhs.fhh.web.util.FhhHttpSessionUtil;
import gov.hhs.fhh.web.util.RelativeToRelateTo;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

import org.junit.Assert;
import org.junit.Test;

import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;
import com.fiveamsolutions.hl7.model.mfhp.Gender;

/**
 * @author bpickeral
 *
 */
public class AddRelativeActionTest extends AbstractFhhWebTest {
    private final AddRelativeAction action = new AddRelativeAction();
    private final String SUCCESS = "success";
    private final String INPUT = "input";
    private final String SUBMIT_ACTION = "submit";
    private final String SPECIFIERS_ACTION = "xmlRelationshipSpecifiers";
    private final String PARENTS_ACTION = "xmlParents";
    private final boolean TRUE = true;
    private final String MIN_HEX = "80000000";
    private final DiseaseBean DUMMY_DISEASE = new DiseaseBean();
    private final DiseaseBean DUMMY_DISEASE2 = new DiseaseBean();
    private final String DUMMY_DISEASE_VALUE = "current";
    private final String DUMMY_NAME = "name";
    private final String LIVING_RELATIVE_DOB_STR = "09/07/1968";
    private final GregorianCalendar LIVING_RELATIVE_DOB = new GregorianCalendar(1968, 8, 7, 0, 0, 0);
    private final Integer LIVING_RELATIVE2_YEAR = 1968;
    private final RelativeCode DUMMY_CODE = RelativeCode.MAUNT;
    private final Integer FIFTY = 50;
    private static final String DUMMY_DISEASE_ORG_TEXT = "User entered disease";
    private static final String OTHER_DISEASE = "Other Disease type";
    private static final String SELECTED_PARENT_KEY = "selectedParentIndex";
    private static final String RELATIONSHIP_KEY = "relationshipSpecifier";

    @Test
    public void testPrepare() {
        DUMMY_DISEASE.setCode(DiseaseUtils.BREAST_CANCER_CODE);
        DUMMY_DISEASE2.setCode(DiseaseUtils.COLON_CANCER_CODE);

        Person p = new Person();
        
        action.prepare();
        assertNull(action.getRelative());

        FhhHttpSessionUtil.getSession().setAttribute(MIN_HEX, p);
        FhhHttpSessionUtil.getSession().setAttribute(FhhHttpSessionUtil.ROOT_KEY, MIN_HEX);
        action.prepare();
        assertEquals(p, action.getPerson());

        // Load Deceased Relative
        Relative deceasedRelative = new Relative();
        deceasedRelative.setCauseOfDeath(DUMMY_DISEASE);
        deceasedRelative.setAgeAtDeath(AgeRangeEnum.FORTIES);
        deceasedRelative.setCodeEnum(RelativeCode.AUNT);
        p.getRelatives().add(deceasedRelative);
        action.setRelativeId(deceasedRelative.getUuid().toString());
        assertEquals(deceasedRelative.getUuid().toString(), action.getRelativeId());

        action.prepare();
        assertEquals(DUMMY_DISEASE, action.getCauseOfDeath());
        assertFalse(action.isCodSubTypesExist());
        assertEquals(Gender.FEMALE, deceasedRelative.getGender());
        assertNull(action.getSelectedCODSubType());
        assertEquals(DiseaseUtils.generateDiseaaseTableId(DUMMY_DISEASE, AgeRangeEnum.FORTIES), action.getLastAddedCOD());

        // Load Deceased Relative sub disease
        Relative deceasedRelative2 = new Relative();
        DUMMY_DISEASE2.setParent(DUMMY_DISEASE);
        deceasedRelative2.setCauseOfDeath(DUMMY_DISEASE2);
        deceasedRelative2.setAgeAtDeath(AgeRangeEnum.FORTIES);
        deceasedRelative2.setCodeEnum(RelativeCode.MCOUSN);
        p.getRelatives().add(deceasedRelative2);
        action.setRelativeId(deceasedRelative2.getUuid().toString());

        action.prepare();
        assertEquals(DUMMY_DISEASE, action.getCauseOfDeath());
        assertEquals(DUMMY_DISEASE2, action.getSelectedCODSubType());
        assertNull(deceasedRelative2.getGender());
        assertEquals(DiseaseUtils.generateDiseaaseTableId(DUMMY_DISEASE2, AgeRangeEnum.FORTIES), action.getLastAddedCOD());
        assertTrue(action.isCodSubTypesExist());

        // Load Deceased Relative with "Other" as cause of death
        DUMMY_DISEASE.setOriginalText(DUMMY_DISEASE_ORG_TEXT);
        DUMMY_DISEASE.setCode(null);
        Relative deceasedRelativeOther = new Relative();
        deceasedRelativeOther.setCauseOfDeath(DUMMY_DISEASE);
        deceasedRelativeOther.setAgeAtDeath(AgeRangeEnum.ADOLESCENCE);
        deceasedRelativeOther.setCodeEnum(RelativeCode.MUNCLE);
        p.getRelatives().add(deceasedRelativeOther);
        action.setRelativeId(deceasedRelativeOther.getUuid().toString());

        action.prepare();
        assertEquals(DUMMY_DISEASE, action.getCauseOfDeath());
        assertEquals(DUMMY_DISEASE_ORG_TEXT, action.getOtherCOD());
        assertEquals(Gender.MALE, deceasedRelativeOther.getGender());
        assertEquals(DiseaseUtils.generateDiseaaseTableId(DUMMY_DISEASE, AgeRangeEnum.ADOLESCENCE), action.getLastAddedCOD());
        assertFalse(action.isCodSubTypesExist());

        // Load living relative with DOB set
        Relative livingRelative = new Relative();
        livingRelative.setBirthTime(LIVING_RELATIVE_DOB_STR);
        livingRelative.setCodeEnum(RelativeCode.MUNCLE);
        p.getRelatives().add(livingRelative);
        action.setRelativeId(livingRelative.getUuid().toString());

        action.prepare();
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy", Locale.US);
        assertEquals(format.format(LIVING_RELATIVE_DOB.getTime()), action.getDateOfBirthString());

        // Load living relative with birth year set
        Relative livingRelative2 = new Relative();
        livingRelative2.setBirthTime(LIVING_RELATIVE2_YEAR.toString());
        livingRelative2.setCodeEnum(RelativeCode.MUNCLE);
        livingRelative2.setGender(Gender.FEMALE);
        p.getRelatives().add(livingRelative2);
        action.setRelativeId(livingRelative2.getUuid().toString());

        action.prepare();
        GregorianCalendar calendar = new GregorianCalendar();
        assertEquals(Integer.valueOf(action.getRelativeAge()).intValue(), (calendar.get(Calendar.YEAR)
                - LIVING_RELATIVE2_YEAR));
        assertEquals(Gender.FEMALE, livingRelative2.getGender());
    }

    @Test
    public void testSubmitRelative() {
        FhhRegistry.getInstance().setServiceLocator(new MockServiceLocator() {
            @Override
            public PersonServiceLocal getPersonService() {
                return new PersonServiceStub() {
                    @Override
                    public List<Disease> getDiseaseByName(String diseaseName) {
                        return new ArrayList<Disease>();
                    }
                };
            } 
        });
        FhhDataUtils.getInstance().setServiceLocator(FhhRegistry.getInstance().getServiceLocator());

        // Test for disease with app display not null
        DUMMY_DISEASE.setCode(DiseaseUtils.BREAST_CANCER_CODE);
        DUMMY_DISEASE2.setCode(DiseaseUtils.COLON_CANCER_CODE);
        DUMMY_DISEASE2.setDisplayName("");

        // Test adding living relative with age set
        action.setPerson(new Person());
        FhhUtils.addRequiredRelativesToTree(action.getPerson());
        action.setRelative(new Relative());
        action.getRelative().setGender(Gender.MALE);
        action.setSelectedCode(DUMMY_CODE.name());
        action.setRelativeAge(String.valueOf(FIFTY));
        assertEquals(DUMMY_CODE.name(), action.getSelectedCode());
        assertEquals(FIFTY.toString(), action.getRelativeAge());
        // Test unmatched condition should be set to false after submit
        action.getRelative().setUnmatchedCondition(true);

        assertEquals(SUBMIT_ACTION, action.submitRelative());
        Relative currRelative = action.getPerson().getRelatives().get(6);
        assertEquals(DUMMY_CODE, currRelative.getCodeEnum());
        GregorianCalendar calendar = new GregorianCalendar();
        assertEquals(currRelative.getBirthTime(),
                Integer.toString(calendar.get(Calendar.YEAR) - Integer.valueOf(FIFTY)));
        assertEquals(RelativeCode.MAUNT, action.getSelectedCodeEnum());
        // Assert unmatched condition should be set to false after submit
        assertFalse(action.getRelative().isUnmatchedCondition());
        
        // Test adding living relative with DOB set
        action.setRelative(new Relative());
        action.getRelative().setGender(Gender.MALE);
        action.setDateOfBirthString(LIVING_RELATIVE_DOB_STR);
        // Estimated age should be overwritten
        action.getRelative().setEstimatedAgeRange(AgeRangeEnum.FIFTIES);
        action.setRelativeAge(String.valueOf(FIFTY));
        assertEquals(SUBMIT_ACTION, action.submitRelative());

        currRelative = action.getPerson().getRelatives().get(7);
        assertEquals(LIVING_RELATIVE_DOB_STR, currRelative.getBirthTime());
        assertNull(action.getRelative().getEstimatedAgeRange());
        
        // Test adding living relative with estimated age set
        action.setRelative(new Relative());
        action.getRelative().setGender(Gender.MALE);
        action.getRelative().setEstimatedAgeRange(AgeRangeEnum.FIFTIES);
        action.setDateOfBirthString(null);
        action.setRelativeAge(null);
        assertEquals(SUBMIT_ACTION, action.submitRelative());

        currRelative = action.getPerson().getRelatives().get(8);
        assertEquals(AgeRangeEnum.FIFTIES, currRelative.getEstimatedAgeRange());

        // Test adding deceased relative
        action.setRelative(new Relative());
        action.getRelative().setGender(Gender.MALE);
        action.setDateOfBirthString(null);
        action.setCauseOfDeath(DUMMY_DISEASE);
        action.setRelativeAge(null);
        assertEquals(DUMMY_DISEASE, action.getCauseOfDeath());

        assertEquals(SUBMIT_ACTION, action.submitRelative());
        currRelative = action.getPerson().getRelatives().get(9);
        assertNull(currRelative.getBirthTime());
        assertEquals(DUMMY_DISEASE, currRelative.getCauseOfDeath());

        // Test adding a deceased relative with Other COD
        action.setRelative(new Relative());
        action.getRelative().setGender(Gender.MALE);
        DUMMY_DISEASE.setDisplayName(OTHER_DISEASE);
        DUMMY_DISEASE.setCode(null);
        action.setCauseOfDeath(DUMMY_DISEASE);
        action.setOtherCOD(DUMMY_DISEASE_ORG_TEXT);
        assertEquals(DUMMY_DISEASE_ORG_TEXT, action.getOtherCOD());

        assertEquals(SUBMIT_ACTION, action.submitRelative());
        assertTrue(FhhHttpSessionUtil.getUserEnteredDiseases().containsKey(DUMMY_DISEASE_ORG_TEXT));
        currRelative = action.getPerson().getRelatives().get(10);
        assertEquals(currRelative.getCauseOfDeath().getOriginalText(), DUMMY_DISEASE_ORG_TEXT);

        // Test adding a deceased relative with COD sub type
        action.setRelative(new Relative());
        action.getRelative().setGender(Gender.MALE);
        action.setCauseOfDeath(DUMMY_DISEASE);
        action.setSelectedCODSubType(DUMMY_DISEASE2);
        action.setCodSubTypesExist(TRUE);
        assertEquals(DUMMY_DISEASE, action.getCauseOfDeath());
        assertEquals(DUMMY_DISEASE2, action.getSelectedCODSubType());
        assertTrue(action.isCodSubTypesExist());

        assertEquals(SUBMIT_ACTION, action.submitRelative());
        currRelative = action.getPerson().getRelatives().get(11);
        assertEquals(DUMMY_DISEASE2, currRelative.getCauseOfDeath());

        // Test edit relative
        action.setRelativeId(action.getRelative().getUuid().toString());
        assertEquals(SUBMIT_ACTION, action.submitRelative());
        assertEquals(12, action.getPerson().getRelatives().size());
    }
    
    @Test
    public void testSubmitRelativeValidation() {
        DUMMY_DISEASE.setCode(DUMMY_DISEASE_VALUE);
        
        // Test adding a deceased relative with invalid DOB
        action.setRelative(new Relative());
        action.setPerson(new Person());
        action.setSelectedCode(DUMMY_CODE.name());
        action.getRelative().setGender(Gender.MALE);
        action.setDateOfBirthString("invalid");
        
        assertEquals(INPUT, action.submitRelative());
        assertEquals(1, action.getFieldErrors().size());
        
        // Test adding a deceased relative with no sub type selected
        action.clearErrorsAndMessages();
        action.setRelative(new Relative());
        action.setPerson(new Person());
        action.setCauseOfDeath(DUMMY_DISEASE);
        action.getRelative().setGender(Gender.MALE);
        action.setDateOfBirthString(null);
        action.setCodSubTypesExist(TRUE);
        
        assertEquals(INPUT, action.submitRelative());
        assertEquals(1, action.getFieldErrors().size());
    }

    @Test
    public void testSetRelativeParent() {
        Person p = new Person();
        action.setPerson(p);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(0).setCodeEnum(RelativeCode.MAUNT);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(1).setCodeEnum(RelativeCode.NSIS);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(2).setCodeEnum(RelativeCode.HSIS);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(3).setCodeEnum(RelativeCode.DAU);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(4).setCodeEnum(RelativeCode.NMTH);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(5).setCodeEnum(RelativeCode.MUNCLE);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(6).setCodeEnum(RelativeCode.NBRO);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(7).setCodeEnum(RelativeCode.HBRO);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(8).setCodeEnum(RelativeCode.SON);

        // Test setting relative parent
        testSetRelativeForCode(p, 0, true);
        testSetRelativeForCode(p, 1, true);
        testSetRelativeForCode(p, 2, true);
        testSetRelativeForCode(p, 3, true);
        testSetRelativeForCode(p, 4, true);
        testSetRelativeForCode(p, 5, false);
        testSetRelativeForCode(p, 6, false);
        testSetRelativeForCode(p, 7, false);
        testSetRelativeForCode(p, 8, false);

        action.setSelectedParentIndex(null);
    }
    /**
     * Helper method for testSetRelativeParent.
     * @param p Person object
     * @param i relative index
     * @param maternal true if mother should be set, otherwise father
     */
    private void testSetRelativeForCode(Person p, int i, boolean maternal) {
        Relative rel = new Relative();
        rel.setGender(Gender.MALE);
        action.setRelative(rel);
        action.setSelectedParentIndex(p.getRelatives().get(i).getUuid().toString());
        assertEquals(SUBMIT_ACTION, action.submitRelative());
        if (maternal) {
            assertEquals(p.getRelatives().get(i), rel.getMother());
        } else {
            assertEquals(p.getRelatives().get(i), rel.getFather());
        }

    }

    @Test
    public void testAddPerson() {
        // Test setting Maternal/Paternal specifier when entering add
        // person method from selecting a code
        Person p = new Person();
        action.setPerson(p);
        action.setSelectedCode(RelativeCode.NMTH.toString());
        assertEquals(SUCCESS, action.addPerson());
        assertEquals(RelativeCode.NMTH.toString(), action.getSelectedCode());

        action.setSelectedCode(RelativeCode.GRMTH.toString());
        action.setRelationshipSpecifier(RelativeCode.NMTH.toString());
        assertEquals(SUCCESS, action.addPerson());
        assertEquals(RelativeCode.MGRMTH.toString(), action.getSelectedCode());
        assertEquals(RelativeCode.NMTH.toString(), action.getRelationshipSpecifier());

        action.setSelectedCode(RelativeCode.GRMTH.toString());
        action.setRelationshipSpecifier(RelativeCode.NFTH.toString());
        assertEquals(SUCCESS, action.addPerson());
        assertEquals(RelativeCode.PGRMTH.toString(), action.getSelectedCode());

        // Test setting Cousin's parent when entering add
        // person method from selecting a code
        p = new Person();
        action.setPerson(p);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(0).setCodeEnum(RelativeCode.MAUNT);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(1).setCodeEnum(RelativeCode.MUNCLE);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(2).setCodeEnum(RelativeCode.PAUNT);
        
        action.setSelectedCode(RelativeCode.COUSN.toString());
        action.setSelectedParentIndex(p.getRelatives().get(0).getUuid().toString());
        assertNotNull(action.getPerson().getRelative(UUID.fromString(action.getSelectedParentIndex())));
        assertEquals(p.getRelatives().get(0).getUuid().toString(), action.getSelectedParentIndex());
        assertEquals(SUCCESS, action.addPerson());
        assertEquals(RelativeCode.MCOUSN.toString(), action.getSelectedCode());

        action.setSelectedCode(RelativeCode.COUSN.toString());
        action.setSelectedParentIndex(p.getRelatives().get(1).getUuid().toString());
        assertEquals(SUCCESS, action.addPerson());
        assertEquals(RelativeCode.MCOUSN.toString(), action.getSelectedCode());

        action.setSelectedCode(RelativeCode.COUSN.toString());
        action.setSelectedParentIndex(p.getRelatives().get(2).getUuid().toString());
        assertEquals(SUCCESS, action.addPerson());
        assertEquals(RelativeCode.PCOUSN.toString(), action.getSelectedCode());
    }
    @Test
    public void testAddPersonErrors() {
        Person p = new Person();
        action.setPerson(p);
        p.getRelatives().add(new Relative());
        p.getRelatives().get(0).setCodeEnum(RelativeCode.MAUNT);
        p.getRelatives().add(new Relative());
        
        // Test add person when parent is not selected
        action.setSelectedCode(RelativeCode.COUSN.toString());
        assertEquals(INPUT, action.addPerson());
        assertTrue(action.getFieldErrors().containsKey(SELECTED_PARENT_KEY));
        
        action.getFieldErrors().clear();
        
        // Test add person when maternal/paternal code is not specified
        action.setSelectedCode(RelativeCode.AUNT.toString());
        assertEquals(INPUT, action.addPerson());
        assertTrue(action.getFieldErrors().containsKey(RELATIONSHIP_KEY));
    }
    
    @Test
    public void testGetAndSetCurrentCODValue() {
        action.setCurrentCODValue(DUMMY_DISEASE_VALUE);
        assertEquals(DUMMY_DISEASE_VALUE, action.getCurrentCODValue());
    }

    @Test
    public void testRetrieveCODSubTypes() {
        assertEquals("xmlCODSubTypes", action.retrieveCODSubTypes());
    }

    @Test
    public void testGetCODSubTypesAsXml() throws Exception{
        assertNotNull(action.getCODSubTypesAsXml());

        List<Disease> diseaseList = new ArrayList<Disease>();
        diseaseList.add(DUMMY_DISEASE);
        action.setCodSubTypes(diseaseList);
        assertNotNull(action.getCODSubTypesAsXml());
    }

    @Test
    public void testGetAndSetCodSubTypes() {
        List<Disease> subTypes = new ArrayList<Disease>();
        subTypes.add(DUMMY_DISEASE);
        action.setCodSubTypes(subTypes);
        assertEquals(DUMMY_DISEASE, action.getCodSubTypes().get(0));
    }

    @Test
    public void testGetRelativeCodes() {
        Relative relative = new Relative();;
        //Test case where no relatives exist in the tree
        Person p = new Person();
        action.setPerson(p);

        List<RelativeCode> relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.AUNT));
        assertTrue(relativeList.contains(RelativeCode.UNCLE));
        assertTrue(relativeList.contains(RelativeCode.DAU));
        assertTrue(relativeList.contains(RelativeCode.SON));
        assertTrue(relativeList.contains(RelativeCode.NBRO));
        assertTrue(relativeList.contains(RelativeCode.NSIS));
        assertTrue(relativeList.contains(RelativeCode.NMTH));
        assertTrue(relativeList.contains(RelativeCode.NFTH));

        assertFalse(relativeList.contains(RelativeCode.HBRO));
        assertFalse(relativeList.contains(RelativeCode.HSIS));
        assertFalse(relativeList.contains(RelativeCode.COUSN));
        assertFalse(relativeList.contains(RelativeCode.NIECE));
        assertFalse(relativeList.contains(RelativeCode.NEPHEW));
        assertFalse(relativeList.contains(RelativeCode.GRNSON));
        assertFalse(relativeList.contains(RelativeCode.GRNDAU));


        // Test case where maunt exists, also test for when 2 relatives of the same
        // type exist (branch coverage)
        relative.setCodeEnum(RelativeCode.MAUNT);
        p.getRelatives().add(relative);
        relative = new Relative();
        relative.setCodeEnum(RelativeCode.MAUNT);
        p.getRelatives().add(relative);
        action.setExistingRelativeCodes(FhhUtils.getExistingCodes(p.getRelatives()));
        assertEquals(1, action.getExistingRelativeCodes().size());

        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.COUSN));

        // Test case where paunt exists
        addAndTestSingleCode(p, RelativeCode.PAUNT);
        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.COUSN));

        // Test case where muncle exists
        addAndTestSingleCode(p, RelativeCode.MUNCLE);
        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.COUSN));

        // Test case where puncle exists
        addAndTestSingleCode(p, RelativeCode.PUNCLE);
        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.COUSN));

        // Test case where nbro exists
        addAndTestSingleCode(p, RelativeCode.NBRO);
        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.NIECE));
        assertTrue(relativeList.contains(RelativeCode.NEPHEW));

        // Test case where nsis exists
        addAndTestSingleCode(p, RelativeCode.NSIS);
        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.NIECE));
        assertTrue(relativeList.contains(RelativeCode.NEPHEW));

        // Test case where hbro exists
        addAndTestSingleCode(p, RelativeCode.HBRO);
        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.NIECE));
        assertTrue(relativeList.contains(RelativeCode.NEPHEW));

        // Test case where hsis exists
        addAndTestSingleCode(p, RelativeCode.HSIS);
        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.NIECE));
        assertTrue(relativeList.contains(RelativeCode.NEPHEW));

        // Test case where son exists
        addAndTestSingleCode(p, RelativeCode.SON);
        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.GRNDAU));
        assertTrue(relativeList.contains(RelativeCode.GRNSON));

        // Test case where dau exists
        addAndTestSingleCode(p, RelativeCode.DAU);
        relativeList = action.getRelativeCodes();
        assertTrue(relativeList.contains(RelativeCode.GRNDAU));
        assertTrue(relativeList.contains(RelativeCode.GRNSON));

        // Test case where nmth exists
        addAndTestSingleCode(p, RelativeCode.NMTH);
        relativeList = action.getRelativeCodes();
        assertFalse(relativeList.contains(RelativeCode.NMTH));
        assertTrue(relativeList.contains(RelativeCode.HBRO));
        assertTrue(relativeList.contains(RelativeCode.HSIS));

        // Test case where nfth exists
        addAndTestSingleCode(p, RelativeCode.NFTH);
        relativeList = action.getRelativeCodes();
        assertFalse(relativeList.contains(RelativeCode.NFTH));
        assertTrue(relativeList.contains(RelativeCode.HBRO));
        assertTrue(relativeList.contains(RelativeCode.HSIS));
    }

    /**
     * Helper method to clean relatives, add a new relative and call
     * setExistingRelativeCodes.
     * @param p person to add relative
     * @param code RelativeCode of relative to add
     */
    private void addAndTestSingleCode(Person p, RelativeCode code) {
        Relative relative = new Relative();
        p.getRelatives().clear();
        relative.setCodeEnum(code);
        p.getRelatives().add(relative);
        action.setExistingRelativeCodes(FhhUtils.getExistingCodes(p.getRelatives()));
    }

    @Test
    public void testRetrieveRelationshipSpecifiers() {
        // Test with RelativeCode that is not a specifier
        action.setSelectedCodeValue(RelativeCode.NMTH.toString());
        assertEquals(RelativeCode.NMTH.toString(), action.getSelectedCodeValue());
        action.retrieveRelationshipSpecifiers();
        assertTrue(action.getRelationshipSpecifiers().isEmpty());

        // Test Relative Codes that are specifiers
        action.setSelectedCodeValue(RelativeCode.GRFTH.toString());
        assertEquals(SPECIFIERS_ACTION, action.retrieveRelationshipSpecifiers());
        assertEquals(RelativeCode.NMTH, action.getRelationshipSpecifiers().get(0));
        assertEquals(RelativeCode.NFTH, action.getRelationshipSpecifiers().get(1));

        action.setSelectedCodeValue(RelativeCode.GRMTH.toString());
        assertEquals(SPECIFIERS_ACTION, action.retrieveRelationshipSpecifiers());
        assertEquals(RelativeCode.NMTH, action.getRelationshipSpecifiers().get(0));
        assertEquals(RelativeCode.NFTH, action.getRelationshipSpecifiers().get(1));

        action.setSelectedCodeValue(RelativeCode.AUNT.toString());
        assertEquals(SPECIFIERS_ACTION, action.retrieveRelationshipSpecifiers());
        assertEquals(RelativeCode.NMTH, action.getRelationshipSpecifiers().get(0));
        assertEquals(RelativeCode.NFTH, action.getRelationshipSpecifiers().get(1));

        action.setSelectedCodeValue(RelativeCode.UNCLE.toString());
        assertEquals(SPECIFIERS_ACTION, action.retrieveRelationshipSpecifiers());
        assertEquals(RelativeCode.NMTH, action.getRelationshipSpecifiers().get(0));
        assertEquals(RelativeCode.NFTH, action.getRelationshipSpecifiers().get(1));

        action.setSelectedCodeValue(RelativeCode.COUSN.toString());
        assertEquals(SPECIFIERS_ACTION, action.retrieveRelationshipSpecifiers());
        assertTrue(action.getRelationshipSpecifiers().isEmpty());
    }

    @Test
    public void testRetrieveParents() {
        Person p = new Person();
        action.setPerson(p);

        // Test for empty relative list
        assertEquals(PARENTS_ACTION, action.retrieveParents());
        List<Relative> parents = action.getParents();
        assertTrue(parents.isEmpty());

        Relative maunt = addRelativeToPerson(p, RelativeCode.MAUNT);
        Relative paunt = addRelativeToPerson(p, RelativeCode.PAUNT);
        Relative muncle = addRelativeToPerson(p, RelativeCode.MUNCLE);
        Relative puncle = addRelativeToPerson(p, RelativeCode.PUNCLE);

        Relative nbro = addRelativeToPerson(p, RelativeCode.NBRO);
        Relative nsis = addRelativeToPerson(p, RelativeCode.NSIS);
        Relative hbro = addRelativeToPerson(p, RelativeCode.HBRO);
        Relative hsis = addRelativeToPerson(p, RelativeCode.HSIS);

        Relative son = addRelativeToPerson(p, RelativeCode.SON);
        Relative dau = addRelativeToPerson(p, RelativeCode.DAU);

        Relative nmth = addRelativeToPerson(p, RelativeCode.NMTH);
        Relative nfth = addRelativeToPerson(p, RelativeCode.NFTH);

        action.setSelectedCodeValue(RelativeCode.COUSN.toString());
        assertEquals(PARENTS_ACTION, action.retrieveParents());
        parents = action.getParents();
        assertTrue(parents.contains(maunt));
        assertTrue(parents.contains(paunt));
        assertTrue(parents.contains(muncle));
        assertTrue(parents.contains(puncle));
        assertEquals(4, parents.size());

        action.setSelectedCodeValue(RelativeCode.NIECE.toString());
        assertEquals(PARENTS_ACTION, action.retrieveParents());
        parents = action.getParents();
        assertTrue(parents.contains(nbro));
        assertTrue(parents.contains(nsis));
        assertTrue(parents.contains(hbro));
        assertTrue(parents.contains(hsis));
        assertEquals(4, parents.size());

        action.setSelectedCodeValue(RelativeCode.NEPHEW.toString());
        assertEquals(PARENTS_ACTION, action.retrieveParents());
        parents = action.getParents();
        assertTrue(parents.contains(nbro));
        assertTrue(parents.contains(nsis));
        assertTrue(parents.contains(hbro));
        assertTrue(parents.contains(hsis));
        assertEquals(4, parents.size());

        action.setSelectedCodeValue(RelativeCode.GRNSON.toString());
        assertEquals(PARENTS_ACTION, action.retrieveParents());
        parents = action.getParents();
        assertTrue(parents.contains(son));
        assertTrue(parents.contains(dau));
        assertEquals(2, parents.size());

        action.setSelectedCodeValue(RelativeCode.GRNDAU.toString());
        assertEquals(PARENTS_ACTION, action.retrieveParents());
        parents = action.getParents();
        assertTrue(parents.contains(son));
        assertTrue(parents.contains(dau));
        assertEquals(2, parents.size());

        action.setSelectedCodeValue(RelativeCode.HBRO.toString());
        assertEquals(PARENTS_ACTION, action.retrieveParents());
        parents = action.getParents();
        assertTrue(parents.contains(nmth));
        assertTrue(parents.contains(nfth));
        assertEquals(2, parents.size());

        action.setSelectedCodeValue(RelativeCode.HSIS.toString());
        assertEquals(PARENTS_ACTION, action.retrieveParents());
        parents = action.getParents();
        assertTrue(parents.contains(nmth));
        assertTrue(parents.contains(nfth));
        assertEquals(2, parents.size());
    }

    @Test
    public void testGetRelationshipSpecifiersAsXml() throws Exception{
        assertNotNull(action.getRelationshipSpecifiersAsXml());

        List<RelativeCode> codeList = new ArrayList<RelativeCode>();
        codeList.add(RelativeCode.NMTH);
        action.setRelationshipSpecifiers(codeList);
        assertNotNull(action.getRelationshipSpecifiersAsXml());
    }

    @Test
    public void testGetParentsAsXml() throws Exception{
        assertNotNull(action.getParentsAsXml());

        List<Relative> parents = new ArrayList<Relative>();
        parents.add(new Relative());
        parents.get(0).setName(DUMMY_NAME);
        parents.add(new Relative());
        parents.get(1).setCodeEnum(RelativeCode.NMTH);
        action.setParents(parents);
        assertEquals(2, action.getParents().size());
        assertNotNull(action.getParentsAsXml());
    }
    
    
    @Test
    public void testCreatingUserEnteredDiseaseAndSettingOnAnotherRelative() {
        FhhRegistry.getInstance().setServiceLocator(new MockServiceLocator() {
            @Override
            public PersonServiceLocal getPersonService() {
                return new PersonServiceStub() {
                    @Override
                    public List<Disease> getDiseaseByName(String diseaseName) {
                        return new ArrayList<Disease>();
                    }
                };
            } 
        });
        FhhDataUtils.getInstance().setServiceLocator(FhhRegistry.getInstance().getServiceLocator());

        action.setPerson(new Person());
        action.setRelative(new Relative());
        action.getRelative().setGender(Gender.MALE);
        action.setSelectedCode(RelativeCode.NMTH.toString());
        DUMMY_DISEASE.setDisplayName(OTHER_DISEASE);
        DUMMY_DISEASE.setCode(null);
        action.setCauseOfDeath(DUMMY_DISEASE);
        action.setOtherCOD(DUMMY_DISEASE_ORG_TEXT);
        assertEquals(DUMMY_DISEASE_ORG_TEXT, action.getOtherCOD());

        assertEquals(SUBMIT_ACTION, action.submitRelative());
        
        int beforeSize = FhhHttpSessionUtil.getUserEnteredDiseases().size();
        assertTrue(FhhHttpSessionUtil.getUserEnteredDiseases().containsKey(DUMMY_DISEASE_ORG_TEXT));
   
    
        action.setRelative(new Relative());
        action.getRelative().setGender(Gender.MALE);
        action.setSelectedCode(RelativeCode.NMTH.toString());
        DUMMY_DISEASE.setDisplayName(OTHER_DISEASE);
        DUMMY_DISEASE.setCode(null);
        action.setCauseOfDeath(DUMMY_DISEASE);
        action.setOtherCOD(DUMMY_DISEASE_ORG_TEXT);
        
     
        assertEquals(SUBMIT_ACTION, action.submitRelative());
        assertTrue(FhhHttpSessionUtil.getUserEnteredDiseases().containsKey(DUMMY_DISEASE_ORG_TEXT));
        
        assertEquals(beforeSize, FhhHttpSessionUtil.getUserEnteredDiseases().size());
    
    }
    
    @Test
    public void testOtherCODRequired() {
        action.setPerson(new Person());
        action.setRelative(new Relative());
        action.getRelative().setGender(Gender.MALE);
        action.setSelectedCode(RelativeCode.NMTH.toString());
        DUMMY_DISEASE.setDisplayName(OTHER_DISEASE);
        DUMMY_DISEASE.setCode(null);
        action.setCauseOfDeath(DUMMY_DISEASE);
        action.setOtherCOD(DUMMY_DISEASE_ORG_TEXT);
        assertEquals(DUMMY_DISEASE_ORG_TEXT, action.getOtherCOD());

        assertEquals(SUBMIT_ACTION, action.submitRelative());
        
  
        action.getFieldErrors().clear();
        action.setRelative(new Relative());
        action.setSelectedCode(RelativeCode.NMTH.toString());
        DUMMY_DISEASE.setDisplayName(OTHER_DISEASE);
        DUMMY_DISEASE.setCode(null);
        action.setCauseOfDeath(DUMMY_DISEASE);
        action.setOtherCOD("");
        
     
        assertEquals(INPUT, action.submitRelative());
      
        assertTrue(action.getFieldErrors().containsKey("otherCOD"));
        
        
    }
    
    
    @Test
    public void testRelateUnrelatedRelativePgrfthMale(){
        Person p = new Person();
        FhhUtils.addRequiredRelativesToTree(p);
        Relative unrelatedRelative = new Relative();
        unrelatedRelative.setCodeEnum(RelativeCode.UNKNWN);
        p.getUnrelatedRelatives().add(unrelatedRelative);

        action.setPerson(p);
        action.setRelative(unrelatedRelative);
        action.getRelative().setGender(Gender.MALE);
        action.setSelectedCode(DUMMY_CODE.name());
        action.setRelativeAge(String.valueOf(FIFTY));
        action.setRelativeToSetAsParentUuid(p.getRelativeOfType(RelativeCode.PGRFTH).getUuid().toString());

        List<RelativeToRelateTo> potentialParents = action.getRelativesToRelateTo();
        //if its an unknown person all default relatives and yourself can be parents, so 7
        Assert.assertEquals(7, potentialParents.size());
        
        assertEquals(SUBMIT_ACTION, action.submitRelative());
        Assert.assertTrue(p.getRelatives().contains(unrelatedRelative));
        Assert.assertEquals(RelativeCode.PUNCLE, unrelatedRelative.getCodeEnum());
        Assert.assertFalse(p.getUnrelatedRelatives().contains(unrelatedRelative));
    }
    
    @Test
    public void testRelateUnrelatedRelativePgrfthFemale(){
        Person p = new Person();
        FhhUtils.addRequiredRelativesToTree(p);
        Relative unrelatedRelative = new Relative();
        unrelatedRelative.setCodeEnum(RelativeCode.AUNT);
        p.getUnrelatedRelatives().add(unrelatedRelative);

        action.setPerson(p);
        action.setRelative(unrelatedRelative);
        action.getRelative().setGender(Gender.FEMALE);
        action.setSelectedCode(DUMMY_CODE.name());
        action.setRelativeAge(String.valueOf(FIFTY));
        action.setRelativeToSetAsParentUuid(p.getRelativeOfType(RelativeCode.PGRFTH).getUuid().toString());
        
        List<RelativeToRelateTo> potentialParents = action.getRelativesToRelateTo();
        //if its an aunt all grandparents are potential parens, so 4
        Assert.assertEquals(4, potentialParents.size());
        for (RelativeToRelateTo relativeToRelateTo : potentialParents) {
            Assert.assertTrue(RelativeCode.AUNT.getPossibleParents().contains(
                    ((Relative) relativeToRelateTo.getRelative()).getCodeEnum()));
        }

        assertEquals(SUBMIT_ACTION, action.submitRelative());
        Assert.assertTrue(p.getRelatives().contains(unrelatedRelative));
        Assert.assertEquals(RelativeCode.PAUNT, unrelatedRelative.getCodeEnum());
        Assert.assertFalse(p.getUnrelatedRelatives().contains(unrelatedRelative));
    }
    
    @Test
    public void testRelateUnrelatedRelativePgrmthFemale(){
        Person p = new Person();
        FhhUtils.addRequiredRelativesToTree(p);
        Relative unrelatedRelative = new Relative();
        unrelatedRelative.setCodeEnum(RelativeCode.AUNT);
        p.getUnrelatedRelatives().add(unrelatedRelative);

        action.setPerson(p);
        action.setRelative(unrelatedRelative);
        action.getRelative().setGender(Gender.FEMALE);
        action.setSelectedCode(DUMMY_CODE.name());
        action.setRelativeAge(String.valueOf(FIFTY));
        action.setRelativeToSetAsParentUuid(p.getRelativeOfType(RelativeCode.PGRMTH).getUuid().toString());

        List<RelativeToRelateTo> potentialParents = action.getRelativesToRelateTo();
        //if its an aunt all grandparents are potential parens, so 4
        Assert.assertEquals(4, potentialParents.size());
        for (RelativeToRelateTo relativeToRelateTo : potentialParents) {
            Assert.assertTrue(RelativeCode.AUNT.getPossibleParents().contains(
                    ((Relative) relativeToRelateTo.getRelative()).getCodeEnum()));
        }
        
        assertEquals(SUBMIT_ACTION, action.submitRelative());
        Assert.assertTrue(p.getRelatives().contains(unrelatedRelative));
        Assert.assertEquals(RelativeCode.PAUNT, unrelatedRelative.getCodeEnum());
        Assert.assertFalse(p.getUnrelatedRelatives().contains(unrelatedRelative));
    }
    
    @Test
    public void testRelateUnrelatedRelativeMgrfthFemale(){
        Person p = new Person();
        FhhUtils.addRequiredRelativesToTree(p);
        Relative unrelatedRelative = new Relative();
        unrelatedRelative.setCodeEnum(RelativeCode.AUNT);
        p.getUnrelatedRelatives().add(unrelatedRelative);

        action.setPerson(p);
        action.setRelative(unrelatedRelative);
        action.getRelative().setGender(Gender.FEMALE);
        action.setSelectedCode(DUMMY_CODE.name());
        action.setRelativeAge(String.valueOf(FIFTY));
        action.setRelativeToSetAsParentUuid(p.getRelativeOfType(RelativeCode.MGRFTH).getUuid().toString());

        List<RelativeToRelateTo> potentialParents = action.getRelativesToRelateTo();
        //if its an aunt all grandparents are potential parens, so 4
        Assert.assertEquals(4, potentialParents.size());
        for (RelativeToRelateTo relativeToRelateTo : potentialParents) {
            Assert.assertTrue(RelativeCode.AUNT.getPossibleParents().contains(
                    ((Relative) relativeToRelateTo.getRelative()).getCodeEnum()));
        }
        
        
        assertEquals(SUBMIT_ACTION, action.submitRelative());
        Assert.assertTrue(p.getRelatives().contains(unrelatedRelative));
        Assert.assertEquals(RelativeCode.MAUNT, unrelatedRelative.getCodeEnum());
        Assert.assertFalse(p.getUnrelatedRelatives().contains(unrelatedRelative));
    }
    
    @Test
    public void testRelateUnrelatedRelativePuncleFemale(){
        Person p = new Person();
        FhhUtils.addRequiredRelativesToTree(p);
        Relative unrelatedRelative = new Relative();
        unrelatedRelative.setCodeEnum(RelativeCode.COUSN);
        p.getUnrelatedRelatives().add(unrelatedRelative);

        PersonUtils.addRelative(p, RelativeCode.PUNCLE);
        action.setPerson(p);
        action.setRelative(unrelatedRelative);
        action.getRelative().setGender(Gender.FEMALE);
        action.setSelectedCode(DUMMY_CODE.name());
        action.setRelativeAge(String.valueOf(FIFTY));
        action.setRelativeToSetAsParentUuid(p.getRelativeOfType(RelativeCode.PUNCLE).getUuid().toString());

        List<RelativeToRelateTo> potentialParents = action.getRelativesToRelateTo();
        //if its a causin all aunts and uncles are potenstial parents, so 1
        Assert.assertEquals(1, potentialParents.size());
        for (RelativeToRelateTo relativeToRelateTo : potentialParents) {
            Assert.assertTrue(RelativeCode.COUSN.getPossibleParents().contains(
                    ((Relative) relativeToRelateTo.getRelative()).getCodeEnum()));
        }
        
        assertEquals(SUBMIT_ACTION, action.submitRelative());
        Assert.assertTrue(p.getRelatives().contains(unrelatedRelative));
        Assert.assertEquals(RelativeCode.PCOUSN, unrelatedRelative.getCodeEnum());
        Assert.assertFalse(p.getUnrelatedRelatives().contains(unrelatedRelative));
    }
    
    @Test
    public void testRelateUnrelatedRelativeMauntFemale(){
        Person p = new Person();
        FhhUtils.addRequiredRelativesToTree(p);
        Relative unrelatedRelative = new Relative();
        unrelatedRelative.setCodeEnum(RelativeCode.COUSN);
        p.getUnrelatedRelatives().add(unrelatedRelative);

        PersonUtils.addRelative(p, RelativeCode.MAUNT);
        action.setPerson(p);
        action.setRelative(unrelatedRelative);
        action.getRelative().setGender(Gender.FEMALE);
        action.setSelectedCode(DUMMY_CODE.name());
        action.setRelativeAge(String.valueOf(FIFTY));
        action.setRelativeToSetAsParentUuid(p.getRelativeOfType(RelativeCode.MAUNT).getUuid().toString());

        List<RelativeToRelateTo> potentialParents = action.getRelativesToRelateTo();
        //if its a causin all aunts and uncles are potenstial parents, so 1
        Assert.assertEquals(1, potentialParents.size());
        for (RelativeToRelateTo relativeToRelateTo : potentialParents) {
            Assert.assertTrue(RelativeCode.COUSN.getPossibleParents().contains(
                    ((Relative) relativeToRelateTo.getRelative()).getCodeEnum()));
        }
        
        assertEquals(SUBMIT_ACTION, action.submitRelative());
        Assert.assertTrue(p.getRelatives().contains(unrelatedRelative));
        Assert.assertEquals(RelativeCode.MCOUSN, unrelatedRelative.getCodeEnum());
        Assert.assertFalse(p.getUnrelatedRelatives().contains(unrelatedRelative));
    }

    /**
     * Helper function for restRetrieveParents
     * @param p person to add relative to
     * @param code of relative
     */
    private Relative addRelativeToPerson(Person p, RelativeCode code) {
        Relative rel = new Relative();
        rel.setCodeEnum(code);
        p.getRelatives().add(rel);
        return rel;
    }
}

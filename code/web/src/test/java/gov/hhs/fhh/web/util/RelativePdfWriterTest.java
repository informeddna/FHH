/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.web.util;

import gov.hhs.fhh.data.ClinicalObservation;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.data.RelativeReport;
import gov.hhs.fhh.data.AgeRange;

import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.collections.set.ListOrderedSet;
import org.junit.Test;

import com.lowagie.text.BadElementException;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.Image;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;


/**
 * @author lpower
 *
 */
public class RelativePdfWriterTest {

    @Test
    public void testWriter() {
        /*
        Document document = new Document(PageSize.LETTER.rotate());

        try {
            
            // make the person
            
            Person self = makeFamily();
            RelativeDraw selfDraw = new RelativeDraw(new Relative(self));
            selfDraw.setCode(RelativeCode.SELF.toString());
            Set<RelativeReport> relativeReports = new ListOrderedSet();
            List<Relative> relatives = self.getRelatives();
            for (Relative rel : relatives) {
                RelativeReport rr = new RelativeReport(rel);
                relativeReports.add(rr);
            }
            List<Disease> legend = new ArrayList<Disease>();
            legend.add(createDiseaseOne());
            legend.add(createDiseaseTwo());


            RelativePdfWriter p = new RelativePdfWriter();

            PdfDataContainer container = new PdfDataContainer();
            container.setRelativeDraw(selfDraw);
            container.getRelativeReports().addAll(relativeReports);
            container.getLegendList().addAll(legend);
            container.getAgeRanges().putAll(createIntlAgeRanges());
            container.getLegendLabels().putAll(createIntlLegendLabels());
            
            FileOutputStream file = null;
            
            /* uncomment and indicate your local location to output the pdf
            file = new FileOutputStream("/Users/lpower/fhh-dump/test2.pdf");
            file.write(p.makeRelativePdf(container));
            

        } catch (IOException ioe) {
            System.err.println(ioe.getMessage());
            
        } catch (Exception e) {
            //System.err.println(e.getMessage());
        }
        
        document.close();
         */
    }
    
    /**
     * @return Person populated with relative collection
     */
    private Person makeFamily()  {
        Person self = RelativeRelatedTestUtil.assignGender(RelativeRelatedTestUtil.createPersonName("self"), "female");
        List<Relative> rels = new ArrayList<Relative>();
        rels.add(RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.MGRFTH));
        rels.add(RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.MGRMTH));
        rels.add(RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.PGRFTH));
        rels.add(RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.PGRMTH));
        rels.add(RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.NMTH));
        rels.add(RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.NFTH));
        Relative sis = createDiseasedSister();
        rels.add(sis);

        rels.addAll(rels.size(), RelativeRelatedTestUtil.createAuntsUnclesCousins());
        self.setRelatives(rels);
        
        return self;
        
    }

    /**
     * @return Relative of type NSIS with two diseases
     */
    private Relative createDiseasedSister() {
        Relative sis = RelativeRelatedTestUtil.createRelative(new Person(), RelativeCode.NSIS);
        sis.setName("annie");
        ClinicalObservation ci = new ClinicalObservation();
        Disease d = createDiseaseOne();
        ci.setDisease(d);
        ci.setAgeRange(AgeRange.TWENTIES);
        sis.getObservations().add(ci);
        ClinicalObservation ci2 = new ClinicalObservation();
        Disease d2 = createDiseaseTwo();
        ci2.setDisease(d2);
        ci2.setAgeRange(AgeRange.TWENTIES);
        sis.getObservations().add(ci2);
        return sis;
    }

    /**
     * @return a disease for a relative and/or the legend
     */
    private Disease createDiseaseTwo() {
        Disease d2 = new Disease();
        d2.setDisplayName("Diabetes");
        d2.setCode("code");
        d2.setAbbreviation("DIA1");
        d2.setDisplayName("Diabetes");
        return d2;
    }

    /**
     * @return a disease for a relative and/or the legend
     */
    private Disease createDiseaseOne() {
        Disease d = new Disease();
        d.setOriginalText("My special disease");
        return d;
    }
    
    /**
     * Mocks creation of internationalized values for legend labels for use in the pdf
     * @return Map of internationalized values
     */
    private Map<String, String> createIntlLegendLabels() {
        // make a little common disease legend container
        Map<String, String> legendValues = new HashMap<String, String>();
        legendValues.put("living", "Still Living?");
        legendValues.put("heartDisease", "Heart Disease");
        legendValues.put("stroke", "Stroke");
        legendValues.put("diabetes", "Diabetes");
        legendValues.put("colonCancer", "Colon Cancer");
        legendValues.put("breastCancer", "Breast Cancer");
        legendValues.put("ovarianCancer", "Ovarian Cancer");
        legendValues.put("additionalDiseases", "Additional Diseases");
        return legendValues;
    }

    /**
     * Mocks creation of internationalized values for age ranges for use in the pdf
     * @return Map of Age Ranges and internaltionalized values
     */
    private Map<AgeRange, String> createIntlAgeRanges() {
        // make a little age range container
        Map<AgeRange, String> ageRanges = new HashMap<AgeRange, String>();
        for (AgeRange a: AgeRange.values()) {
            ageRanges.put(a, a.getResourceKey());
        }
        return ageRanges;
    } 

}

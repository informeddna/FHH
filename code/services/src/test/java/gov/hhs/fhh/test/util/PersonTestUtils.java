/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.test.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import gov.hhs.fhh.data.AgeRange;
import gov.hhs.fhh.data.Gender;
import gov.hhs.fhh.data.HeightUnit;
import gov.hhs.fhh.data.LivingStatus;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.data.TwinStatus;
import gov.hhs.fhh.data.WeightUnit;
import gov.hhs.fhh.data.util.FormatUtils;
import gov.hhs.fhh.data.util.htmimport.HTMImportUtils;
import gov.hhs.fhh.data.util.htmimport.InputNode;

import java.util.List;

/**
 * @author bpickeral
 *
 */
public class PersonTestUtils {
    private static final String HTM_DUMMY_VALUE = "dummy value";
    private static final String HTM_SELF_NAME = "self name";
    
    private static final String HTM_YES = "Yes";
    private static final String HTM_NO = "No";
    private static final String HTM_BLANK = "";
    private static final String HTM_ADD_DISEASES = "additionalDisease1/At age 30-39,additionalDisease2/,";
    private static final String HTM_ADD_DISEASE1 = "additionalDisease1";
    private static final String HTM_ADD_DISEASE2 = "additionalDisease2";
    private static final String HTM_FAM_ADD_DISEASE1 = "Family additionalDisease1";
    private static final String HTM_FAM_ADD_DISEASE2 = "Family additionalDisease2";
    private static final String HTM_NEW_COD = "New COD";
    private static final String HTM_FAM_ADD_DISEASES = HTM_FAM_ADD_DISEASE1 + ',' + HTM_FAM_ADD_DISEASE2;

    private static final String LABEL_NAME = "Name";
    private static final String LABEL_STILL_LIVING = "StillLiving";
    private static final String LABEL_PARENT = "Parent";
    private static final String LABEL_GENDER = "Gender";
    private static final String LABEL_ADD_DISEASES = "AdditionalDiseases";
    private static final String LABEL_AOD = "AgeAtDeath";
    private static final String LABEL_TWIN = "IsTwin";
    private static final String LABEL_COD = "CauseOfDeath";
    private static final String LABEL_CORONARY = "Coronary";
    private static final String LABEL_STROKE = "Stroke";
    private static final String LABEL_DIABETES = "Diabetes";
    private static final String LABEL_COLON_CANCER = "ColonCancer";
    private static final String LABEL_BREAST_CANCER = "BreastCancer";
    private static final String LABEL_OVARIAN_CANCER = "OvarianCancer";
    private static final String LABEL_ONSET = "Onset";
    private static final String LABEL_WEIGHT = "Weight";
    private static final String LABEL_HEIGHT = "Height";
    private static final String LABEL_AGE = "Age";
    private static final String LABEL_ADD_CONDITION1 = "Addit1";
    private static final String LABEL_ADD_CONDITION2 = "Addit2";
    private static final String LABEL_FAM_ADD_DISEASE = "additionalDisease";
    
    private static final String SELF_WEIGHT = "190";
    private static final String SELF_HEIGHT = "72";
    private static final String SELF_AGE = "55";
    
    private static final String RELATIVE_PER_TYPE = "2";
    private static final int NUM_VARIABLE_RELATIVES = 14;
    
    public static void checkAttributes(Person p, boolean isTwin) {
        assertEquals(HTM_SELF_NAME, p.getName());
        assertEquals(Gender.MALE, p.getGender());
        assertTrue(p.isUnmatchedCondition());
        if (isTwin) {
            assertEquals(TwinStatus.IDENTICAL, p.getTwinStatus());
        } else {
            assertEquals(TwinStatus.NO, p.getTwinStatus());
        }
    }
    
    public static void checkSelfAttributes(Person p, boolean isTwin) {
        assertEquals(p.getWeight().getValue(), Integer.valueOf(SELF_WEIGHT));
        assertEquals(p.getWeight().getUnit(), WeightUnit.US);
        assertEquals(p.getHeight().getValue(), Integer.valueOf(SELF_HEIGHT));
        assertEquals(p.getHeight().getUnit(), HeightUnit.US);
        assertEquals(FormatUtils.format(p.getDateOfBirth()), 
                FormatUtils.format(FormatUtils.convertAgeToDOB(Integer.valueOf(SELF_AGE))));
        checkAttributes(p, isTwin);
    }
    
    public static void checkObservations(Person p) {
        assertEquals(10, p.getObservations().size());
        assertEquals(AgeRange.INFANCY, p.getObservations().get(0).getAgeRange());
        assertEquals(AgeRange.ADOLESCENCE, p.getObservations().get(1).getAgeRange());
        assertEquals(AgeRange.TWENTIES, p.getObservations().get(2).getAgeRange());
        assertEquals(AgeRange.THIRTIES, p.getObservations().get(3).getAgeRange());
        assertEquals(AgeRange.SIXTIES, p.getObservations().get(4).getAgeRange());
        assertEquals(AgeRange.UNKNOWN, p.getObservations().get(5).getAgeRange());
        
        assertEquals(AgeRange.THIRTIES, p.getObservations().get(6).getAgeRange());
        assertEquals(HTM_ADD_DISEASE1, p.getObservations().get(6).getDisease().getOriginalText());
        assertTrue(p.getObservations().get(6).isUnmatchedCondition());
        assertEquals(AgeRange.UNKNOWN, p.getObservations().get(7).getAgeRange());
        assertEquals(HTM_ADD_DISEASE2, p.getObservations().get(7).getDisease().getOriginalText());
        assertTrue(p.getObservations().get(7).isUnmatchedCondition());
        
        assertEquals(AgeRange.SIXTIES, p.getObservations().get(8).getAgeRange());
        assertEquals(HTM_FAM_ADD_DISEASE1, p.getObservations().get(8).getDisease().getOriginalText());
        assertTrue(p.getObservations().get(8).isUnmatchedCondition());
        assertEquals(AgeRange.UNKNOWN, p.getObservations().get(9).getAgeRange());
        assertEquals(HTM_FAM_ADD_DISEASE2, p.getObservations().get(9).getDisease().getOriginalText());
        assertTrue(p.getObservations().get(9).isUnmatchedCondition());
    }
    public static void checkRelativeAttributes(Relative relative, int i) {
        if (i % 8 < 2) {
            assertNull(relative.getLivingStatus());
        } else if (i % 8 < 4) {
            assertTrue(LivingStatus.YES.toString().equals(relative.getLivingStatus()));
        } else if (i % 8 < 6) {
            assertTrue(LivingStatus.NO.toString().equals(relative.getLivingStatus()));
            assertTrue(AgeRange.FIFTIES.equals(relative.getAgeAtDeath()));
            assertEquals(HTM_NEW_COD, relative.getCauseOfDeath().getOriginalText());
        } else if (i % 8 < 8) {
            assertTrue(LivingStatus.UNKNOWN.toString().equals(relative.getLivingStatus()));
        }
    }
    
    public static void checkBlankAttributes(Person p) {
        assertNull(p.getName());
        assertNull(p.getGender());
        assertNull(p.getTwinStatus());
        assertNull(p.getDateOfBirth());
        
        assertEquals(0, p.getObservations().size());
    }
    
    public static void checkRelativeBlankAttributes(Relative r) {
        assertNull(r.getAgeAtDeath());
        assertNull(r.getCauseOfDeath());
        assertNull(r.getLivingStatus());
    }
    
    public static void addAttributeNodes(String prependingId, List<InputNode> inputNodes, boolean isTwin,
            LivingStatus livingStatus) {
        inputNodes.add(createInputNode(prependingId + LABEL_NAME, HTM_SELF_NAME, HTM_DUMMY_VALUE));
        if (livingStatus != null) {
            inputNodes.add(createInputNode(prependingId + LABEL_STILL_LIVING, livingStatus.getHtmValue(), 
                    HTM_DUMMY_VALUE)); 
        } else {
            inputNodes.add(createInputNode(prependingId + LABEL_STILL_LIVING, HTM_BLANK, 
                    HTM_DUMMY_VALUE)); 
        }
        
        inputNodes.add(createInputNode(prependingId + LABEL_GENDER, Gender.MALE.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_DISEASES, HTM_ADD_DISEASES, 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_PARENT, HTMImportUtils.CALCULATED, HTM_DUMMY_VALUE));
        if (livingStatus != null && LivingStatus.NO.equals(livingStatus)) {
            inputNodes.add(createInputNode(prependingId + LABEL_AOD, "50", HTM_DUMMY_VALUE));
        } else {
            inputNodes.add(createInputNode(prependingId + LABEL_AOD, HTM_DUMMY_VALUE, HTM_DUMMY_VALUE));
        }
        
        if (isTwin) {
            inputNodes.add(createInputNode(prependingId + LABEL_TWIN, HTM_YES, HTM_DUMMY_VALUE));
        } else {
            inputNodes.add(createInputNode(prependingId + LABEL_TWIN, HTM_NO, HTM_DUMMY_VALUE));
        }
        
        if (livingStatus != null && LivingStatus.NO.equals(livingStatus)) {
            inputNodes.add(createInputNode(prependingId + LABEL_COD, HTM_NEW_COD, HTM_DUMMY_VALUE));
        } else {
            inputNodes.add(createInputNode(prependingId + LABEL_COD, HTM_DUMMY_VALUE, HTM_DUMMY_VALUE));
        }
        
        inputNodes.add(createInputNode(prependingId + LABEL_CORONARY, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_CORONARY + LABEL_ONSET, AgeRange.INFANCY.getHtmValue(), 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STROKE, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STROKE + LABEL_ONSET, AgeRange.ADOLESCENCE.getHtmValue(), 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_DIABETES, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_DIABETES + LABEL_ONSET, AgeRange.TWENTIES.getHtmValue(), 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COLON_CANCER, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COLON_CANCER + LABEL_ONSET, 
                AgeRange.THIRTIES.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_BREAST_CANCER, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_BREAST_CANCER + LABEL_ONSET, 
                AgeRange.SIXTIES.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_OVARIAN_CANCER, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_OVARIAN_CANCER + LABEL_ONSET, 
                HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_CONDITION1, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_CONDITION1 + LABEL_ONSET, 
                AgeRange.SIXTIES.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_CONDITION2, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_CONDITION2 + LABEL_ONSET, HTM_BLANK, 
                HTM_DUMMY_VALUE));
    }
    
    public static void addAttributesForVariableRelatives(String prependingId, String prependingId2, 
            List<InputNode> inputNodes, String parent, LivingStatus livingStatus) {
        inputNodes.add(createInputNode(prependingId + LABEL_NAME, HTM_SELF_NAME, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_NAME, HTM_SELF_NAME, HTM_DUMMY_VALUE));
        if (livingStatus != null) {
            inputNodes.add(createInputNode(prependingId + LABEL_STILL_LIVING, livingStatus.getHtmValue(), 
                    HTM_DUMMY_VALUE));
            inputNodes.add(createInputNode(prependingId2 + LABEL_STILL_LIVING, livingStatus.getHtmValue(), 
                    HTM_DUMMY_VALUE));
        } else {
            inputNodes.add(createInputNode(prependingId + LABEL_STILL_LIVING, HTM_BLANK, 
                    HTM_DUMMY_VALUE));
            inputNodes.add(createInputNode(prependingId2 + LABEL_STILL_LIVING, HTM_BLANK, 
                    HTM_DUMMY_VALUE));
        }
        
        inputNodes.add(createInputNode(prependingId + LABEL_GENDER, Gender.MALE.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_GENDER, Gender.MALE.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_DISEASES, HTM_ADD_DISEASES, 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_ADD_DISEASES, HTM_ADD_DISEASES, 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_PARENT, parent, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_PARENT, parent, HTM_DUMMY_VALUE));
        // The different age range values are tested in AgeRangeTest
        if (livingStatus != null && LivingStatus.NO.equals(livingStatus)) {
            inputNodes.add(createInputNode(prependingId + LABEL_AOD, "50", HTM_DUMMY_VALUE));
            inputNodes.add(createInputNode(prependingId2 + LABEL_AOD, "50", HTM_DUMMY_VALUE));
        } else {
            inputNodes.add(createInputNode(prependingId + LABEL_AOD, HTM_BLANK, HTM_DUMMY_VALUE));
            inputNodes.add(createInputNode(prependingId2 + LABEL_AOD, HTM_BLANK, HTM_DUMMY_VALUE));
        }
        
        inputNodes.add(createInputNode(prependingId + LABEL_TWIN, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_TWIN, HTM_NO, HTM_DUMMY_VALUE));
        if (livingStatus != null && LivingStatus.NO.equals(livingStatus)) {
            inputNodes.add(createInputNode(prependingId + LABEL_COD, HTM_NEW_COD, HTM_DUMMY_VALUE));
            inputNodes.add(createInputNode(prependingId2 + LABEL_COD, HTM_NEW_COD, HTM_DUMMY_VALUE));
        } else {
            inputNodes.add(createInputNode(prependingId + LABEL_COD, HTM_DUMMY_VALUE, HTM_DUMMY_VALUE));
            inputNodes.add(createInputNode(prependingId2 + LABEL_COD, HTM_DUMMY_VALUE, HTM_DUMMY_VALUE));
        }
        
        inputNodes.add(createInputNode(prependingId + LABEL_CORONARY, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_CORONARY + LABEL_ONSET, AgeRange.INFANCY.getHtmValue(), 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_CORONARY, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_CORONARY + LABEL_ONSET, AgeRange.INFANCY.getHtmValue(), 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STROKE, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STROKE + LABEL_ONSET, AgeRange.ADOLESCENCE.getHtmValue(), 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_STROKE, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_STROKE + LABEL_ONSET, AgeRange.ADOLESCENCE.getHtmValue(), 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_DIABETES, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_DIABETES + LABEL_ONSET, AgeRange.TWENTIES.getHtmValue(), 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_DIABETES, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_DIABETES + LABEL_ONSET, AgeRange.TWENTIES.getHtmValue(), 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COLON_CANCER, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COLON_CANCER + LABEL_ONSET, 
                AgeRange.THIRTIES.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_COLON_CANCER, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_COLON_CANCER + LABEL_ONSET, 
                AgeRange.THIRTIES.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_BREAST_CANCER, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_BREAST_CANCER + LABEL_ONSET, 
                AgeRange.SIXTIES.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_BREAST_CANCER, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_BREAST_CANCER + LABEL_ONSET, 
                AgeRange.SIXTIES.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_OVARIAN_CANCER, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_OVARIAN_CANCER + LABEL_ONSET, 
                HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_OVARIAN_CANCER, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_OVARIAN_CANCER + LABEL_ONSET, 
                HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_CONDITION1, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_CONDITION1 + LABEL_ONSET, 
                AgeRange.SIXTIES.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_ADD_CONDITION1, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_ADD_CONDITION1 + LABEL_ONSET, 
                AgeRange.SIXTIES.getHtmValue(), HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_CONDITION2, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_CONDITION2 + LABEL_ONSET, HTM_BLANK, 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_ADD_CONDITION2, HTM_YES, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_ADD_CONDITION2 + LABEL_ONSET, HTM_BLANK, 
                HTM_DUMMY_VALUE));
    }
    
    public static void addBlankAttributeNodes(String prependingId, List<InputNode> inputNodes) {
        inputNodes.add(createInputNode(prependingId + LABEL_NAME, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STILL_LIVING, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_GENDER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_DISEASES, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_PARENT, HTMImportUtils.CALCULATED, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_AOD, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_TWIN, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COD, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_CORONARY, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_CORONARY + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STROKE, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STROKE + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_DIABETES, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_DIABETES + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COLON_CANCER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COLON_CANCER + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_BREAST_CANCER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_BREAST_CANCER + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_OVARIAN_CANCER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_OVARIAN_CANCER + LABEL_ONSET, HTM_BLANK, 
                HTM_DUMMY_VALUE));
    }
    
    public static void addBlankAttributeForVariableRelatives(String prependingId, String prependingId2, 
            List<InputNode> inputNodes, String parent) {
        inputNodes.add(createInputNode(prependingId + LABEL_NAME, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_NAME, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STILL_LIVING, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_STILL_LIVING, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_GENDER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_GENDER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_ADD_DISEASES, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_ADD_DISEASES, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_PARENT, parent, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_PARENT, parent, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_AOD, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_AOD, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_TWIN, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_TWIN, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COD, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_COD, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_CORONARY, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_CORONARY + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_CORONARY, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_CORONARY + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STROKE, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_STROKE + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_STROKE, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_STROKE + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_DIABETES, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_DIABETES + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_DIABETES, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_DIABETES + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COLON_CANCER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_COLON_CANCER + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_COLON_CANCER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_COLON_CANCER + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_BREAST_CANCER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_BREAST_CANCER + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_BREAST_CANCER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_BREAST_CANCER + LABEL_ONSET, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_OVARIAN_CANCER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId + LABEL_OVARIAN_CANCER + LABEL_ONSET, HTM_BLANK, 
                HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_OVARIAN_CANCER, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(prependingId2 + LABEL_OVARIAN_CANCER + LABEL_ONSET, HTM_BLANK, 
                HTM_DUMMY_VALUE));
    }
    
    public static void addSelfAttributeNodes(List<InputNode> inputNodes) {
        inputNodes.add(createInputNode(RelativeCode.SELF.getHtmValue() + LABEL_WEIGHT, SELF_WEIGHT, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(RelativeCode.SELF.getHtmValue() + LABEL_HEIGHT, SELF_HEIGHT, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(RelativeCode.SELF.getHtmValue() + LABEL_AGE, SELF_AGE, HTM_DUMMY_VALUE));
    }
    
    public static void addBlankSelfAttributeNodes(List<InputNode> inputNodes) {
        inputNodes.add(createInputNode(RelativeCode.SELF.getHtmValue() + LABEL_WEIGHT, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(RelativeCode.SELF.getHtmValue() + LABEL_HEIGHT, HTM_BLANK, HTM_DUMMY_VALUE));
        inputNodes.add(createInputNode(RelativeCode.SELF.getHtmValue() + LABEL_AGE, HTM_BLANK, HTM_DUMMY_VALUE));
    }
    
    public static void addRelativeCountNodes(List<InputNode> inputNodes) {
        // Add Counts for the 14 types of relatives (node name should not matter)
        for (int i=0; i < NUM_VARIABLE_RELATIVES; i++) {
            inputNodes.add(createInputNode(HTM_DUMMY_VALUE, RELATIVE_PER_TYPE, HTM_DUMMY_VALUE));
        }
    }
    
    public static InputNode createInputNode(String name, String value, String type) {
        InputNode node = new InputNode();
        node.setName(name);
        node.setValue(value);
        node.setType(type);
        return node;
    }
    
    public static void checkInputNode(InputNode node) {
        assertEquals(RelativeCode.SELF.getHtmValue() + LABEL_NAME, node.getName());
        assertEquals(HTM_SELF_NAME, node.getValue());
        assertEquals(HTM_DUMMY_VALUE, node.getType());
    }
    
    public static void addFamilyAddConditions(List<InputNode> inputNodes) {
        inputNodes.add(createInputNode(LABEL_FAM_ADD_DISEASE, HTM_FAM_ADD_DISEASES, 
                HTM_DUMMY_VALUE));
    }
    
    public static void addBlankFamilyAddConditions(List<InputNode> inputNodes) {
        inputNodes.add(createInputNode(LABEL_FAM_ADD_DISEASE, HTM_BLANK, 
                HTM_DUMMY_VALUE));
    }
}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data.castor;

import static org.junit.Assert.*;

import java.util.UUID;

import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.xml.PatientPerson;

import org.junit.Test;


/**
 * @author smatyas
 *
 */
public class UUIDFieldHandlerTest {
    private final UUIDFieldHandler handler = new UUIDFieldHandler();
    
    @Test
    public void getValueForUnsupportedType() {
        assertNull(handler.getValue(new Long(1L)));
    }
    @Test
    public void getValueForSupportedType1() {
        PatientPerson pp = new PatientPerson();
        UUID expected = UUID.randomUUID();
        pp.setId(expected);
        assertEquals(expected.toString(), handler.getValue(pp));
    }
    @Test
    public void getValueForSupportedType2() {
        Relative r = new Relative();
        UUID expected = UUID.randomUUID();
        r.setUuid(expected);
        assertEquals(expected.toString(), handler.getValue(r));
    }
    
    @Test 
    public void resetValueForUnsupportedType() {
        Long l = new Long(1L);
        Long tmp = l;
        handler.resetValue(l);
        assertEquals(tmp, l);
    }
    @Test 
    public void resetValueForSupportedType1() {
        PatientPerson pp = new PatientPerson();
        UUID expected = UUID.randomUUID();
        pp.setId(expected);
        handler.resetValue(pp);
        assertNull(pp.getId());
    }
    @Test 
    public void resetValueForSupportedType2() {
        Relative r = new Relative();
        UUID expected = UUID.randomUUID();
        r.setUuid(expected);
        handler.resetValue(r);
        assertNull(r.getUuid());
    }
    @Test 
    public void setValueForUnsupportedType() {
        Long l = new Long(1L);
        Long tmp = l;
        handler.setValue(l, l);
        assertEquals(tmp, l);
    }
    @Test 
    public void setValueForSupportedType11() {
        PatientPerson pp = new PatientPerson();
        UUID expected = UUID.randomUUID();
        handler.setValue(pp, expected.toString());
        assertEquals(expected, pp.getId());
    }
    @Test 
    public void setValueForSupportedType12() {
        PatientPerson pp = new PatientPerson();
        Long id = Long.valueOf(1L);
        UUID expected = UUIDFieldHandler.createUuidFromId(id);
        handler.setValue(pp, id.toString());
        assertEquals(expected, pp.getId());
    }
    @Test 
    public void setValueForSupportedType21() {
        Relative r = new Relative();
        UUID expected = UUID.randomUUID();
        handler.setValue(r, expected.toString());
        assertEquals(expected, r.getUuid());
    }
    @Test 
    public void setValueForSupportedType22() {
        Relative r = new Relative();
        Long id = Long.valueOf(1L);
        UUID expected = UUIDFieldHandler.createUuidFromId(id);
        handler.setValue(r, id.toString());
        assertEquals(expected, r.getUuid());
    }
}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.service;

import gov.hhs.fhh.data.AbstractCodeable;
import gov.hhs.fhh.data.Codeable;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Ethnicity;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Race;
import gov.hhs.fhh.data.util.DiseaseUtils;
import gov.hhs.fhh.service.ImportException;
import gov.hhs.fhh.service.PersonServiceBean;
import gov.hhs.fhh.service.PersonServiceLocal;
import gov.hhs.mfhp.model.Code;
import gov.hhs.mfhp.model.CodeStatus;
import gov.hhs.mfhp.model.CodeSystem;
import gov.hhs.mfhp.model.DisplayName;
import gov.hhs.mfhp.model.Observation;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.bouncycastle.asn1.ess.OtherSigningCertificate;

import com.fiveamsolutions.nci.commons.data.persistent.PersistentObject;

/**
 * @author bpickeral
 * 
 */
public class PersonServiceStub implements PersonServiceLocal {

    /**
     * {@inheritDoc}
     */
    public List<Race> getRaces() {
        List<Race> races = new ArrayList<Race>();
        for (int i = 0; i < 3; i++) {
            races.add((Race) setupAC(i, new Race()));
        }
        return races;
    }

    /**
     * {@inheritDoc}
     */
    public List<Race> getAsianRaces() {
        List<Race> races = new ArrayList<Race>();
        for (int i = 0; i < 3; i++) {
            races.add((Race) setupAC(i, new Race()));
        }
        return races;
    }

    /**
     * {@inheritDoc}
     */
    public List<Race> getHawaiianRaces() {
        List<Race> races = new ArrayList<Race>();
        for (int i = 0; i < 3; i++) {
            races.add((Race) setupAC(i, new Race()));
        }
        return races;
    }

    /**
     * {@inheritDoc}
     */
    public List<Ethnicity> getEthnicities() {
        List<Ethnicity> ethnicities = new ArrayList<Ethnicity>();
        for (int i = 0; i < 3; i++) {
            ethnicities.add((Ethnicity) setupAC(i, new Ethnicity()));
        }
        return ethnicities;
    }

    /**
     * {@inheritDoc}
     */
    public List<Ethnicity> getHispanicEthnicities() {
        List<Ethnicity> ethnicities = new ArrayList<Ethnicity>();
        for (int i = 0; i < 3; i++) {
            ethnicities.add((Ethnicity) setupAC(i, new Ethnicity()));
        }
        return ethnicities;
    }

    private Disease createObservation(int i) {
        Observation o = new Observation();
        Code c = new Code();
        c.setCodeName("CODE-" + i);
        c.setStatus(CodeStatus.ACTIVE);
        CodeSystem codeSystem = new CodeSystem();
        codeSystem.setCommonName("CODE_SYS" + i);
        codeSystem.setName("CODE_SYS" + i);
        c.setCodeSystem(codeSystem);
        o.getCodes().add(c);
        DisplayName displayName = new DisplayName();
        displayName.setLanguage("en");
        displayName.setText("DisplayName" + i);
        o.getDisplayNames().add(displayName);
        return o;
    }

    private Disease createObservation(String code, String text) {
        Observation o = new Observation();
        o.setId(0L);
        Code c = new Code();
        c.setCodeName(code);
        c.setStatus(CodeStatus.ACTIVE);
        CodeSystem codeSystem = new CodeSystem();
        codeSystem.setCommonName("SNOMED_CT");
        codeSystem.setName("SNOMED_CT");
        c.setCodeSystem(codeSystem);
        o.getCodes().add(c);
        DisplayName displayName = new DisplayName();
        displayName.setLanguage("en");
        displayName.setText(text);
        o.getDisplayNames().add(displayName);
        o.setName(text);
        return o;
    }

    /**
     * {@inheritDoc}
     */
    public List<Disease> getDiseases() {
        List<Disease> diseases = new ArrayList<Disease>();
        for (int i = 0; i < 3; i++) {
            diseases.add(createObservation(i));
        }
        return diseases;
    }

    /**
     * {@inheritDoc}
     */
    public List<Disease> getDiseaseSubTypes(Long disease) {
        List<Disease> diseases = new ArrayList<Disease>();
        for (int i = 0; i < 3; i++) {
            diseases.add(createObservation(i));
        }
        return diseases;
    }

    /**
     * {@inheritDoc}
     */
    public List<Disease> getAllDiseases() {
        List<Disease> diseases = new ArrayList<Disease>();
        diseases.add(createObservation("38341003", "Hypertension"));
        diseases.add(createObservation(DiseaseUtils.STROKE_CODE, "Stroke"));
        diseases.add(createObservation("44054006", "Type 2 Diabetes"));
        diseases.add(createObservation(DiseaseUtils.DIABETES_CODE, "Diabetes"));
        diseases.add(createObservation(DiseaseUtils.COLON_CANCER_CODE, "Colon Cancer"));
        diseases.add(createObservation(DiseaseUtils.BREAST_CANCER_CODE, "Breast Cancer"));
        diseases.add(createObservation(DiseaseUtils.OVARIAN_CANCER_CODE, "Ovarian Cancer"));
        diseases.add(createObservation(DiseaseUtils.HEART_DISEASE_CODE, "Heart Disease"));
        diseases.add(createObservation("55822004", "Mystery Disease"));
        return diseases;
    }

    private Codeable setupAC(int i, AbstractCodeable codeable, String code) {
        return setupAC(i, codeable, code, "CODE_SYS" + i);
    }

    private Codeable setupAC(int i, AbstractCodeable codeable, String code, String codeSystemName) {
        codeable.setCode(code);
        codeable.setCodeSystemName(codeSystemName);
        codeable.addDisplayString("en", "DisplayName" + i, null);
        codeable.setAppDisplay("AppDisplay" + i);
        return codeable;
    }

    /**
     * @param i gender code
     */
    private Codeable setupAC(int i, AbstractCodeable codeable) {
        return setupAC(i, codeable, "Code" + i);
    }

    /**
     * {@inheritDoc}
     */
    public <T extends PersistentObject> T getPersistentObject(Class<T> toClass, Long id) {
        return null;
    }

    /**
     * {@inheritDoc}
     */
    public List<Disease> getDiseaseByName(String diseaseName) {
        List<Disease> diseases = new ArrayList<Disease>();
        diseases.add(createObservation(diseaseName, diseaseName));
        return diseases;
    }

    public List<Ethnicity> getEthnicityByCodeAndCodeSystem(String code, String codeSystem) {
        List<Ethnicity> retval = new ArrayList<Ethnicity>();
        List<Ethnicity> ethnicities = new ArrayList<Ethnicity>();
        for (int i = 0; i < 3; i++) {
            ethnicities.add((Ethnicity) setupAC(i, new Ethnicity(), "Code" + i, "HL7"));
        }

        for (Ethnicity ethnicity : ethnicities) {
            if (ethnicity.getCode().equals(code) && ethnicity.getCodeSystemName().equals(codeSystem)) {
                retval.add(ethnicity);
            }
        }

        return retval;
    }

    public List<Race> getRaceByCodeAndCodeSystem(String code, String codeSystem) {
        List<Race> retval = new ArrayList<Race>();
        List<Race> races = new ArrayList<Race>();
        for (int i = 0; i < 3; i++) {
            races.add((Race) setupAC(i, new Race(), "Code" + i, "HL7"));
        }

        for (Race race : races) {
            if (race.getCode().equals(code) && race.getCodeSystemName().equals(codeSystem)) {
                retval.add(race);
            }
        }

        return retval;
    }

    /* (non-Javadoc)
     * @see gov.hhs.fhh.service.PersonServiceLocal#importFile(java.io.File)
     */
    public Person importFile(File file) throws ImportException {
        return null;
    }
    
    public void deepPopulateRaceEthnicityIds(Person result) {
        final PersonServiceLocal bean = this;
        
        //to ensure no db calls are made
        new PersonServiceBean() {
            @Override
            public List<Ethnicity> getEthnicityByCodeAndCodeSystem(String code, String codeSystem) {
                return bean.getEthnicityByCodeAndCodeSystem(code, codeSystem);
            }

            public java.util.List<Race> getRaceByCodeAndCodeSystem(String code, String codeSystem) {
                return bean.getRaceByCodeAndCodeSystem(code, codeSystem);
            };
        }.deepPopulateRaceEthnicityIds(result);
    }

    public Disease getOtherDisease() {
        Observation other = new Observation();
        other.setId(16L);
        other.setName("Other disease type");
        other.setCodes(new HashSet<Code>());
        Set<DisplayName> displayNames = new HashSet<DisplayName>();
        DisplayName otherDisplayname = new DisplayName();
        otherDisplayname.setLanguage("en");
        otherDisplayname.setText("Other - Add New");
        displayNames.add(otherDisplayname);
        other.setDisplayNames(displayNames);
        return other;
    }

    public boolean isDiabetes(Observation o) {
        return false;
    }

    public Disease getDiabetesType() {
        return null;
    }

    public boolean isHeartDisease(Observation o) {
        return false;
    }

    public Disease getHeartDiseaseType() {
        return null;
    }

    public Disease getStrokeBrainAttack() {
        return null;
    }

    public boolean isStrokeOrBrainAttack(Observation o) {
        return false;
    }

    public boolean isColorectalCancer(Observation o) {
        return false;
    }

    public List<Observation> getColorectalCancers() {
        return null;
    }

    public List<Observation> getDiseaseByCode(String codeName) {
        // TODO Auto-generated method stub
        return null;
    }

    public boolean isBreastCancer(Observation o) {
        // TODO Auto-generated method stub
        return false;
    }

    public boolean isOvarianCancer(Observation o) {
        // TODO Auto-generated method stub
        return false;
    }

    public boolean isOtherPseudoType(Observation o) {
        // TODO Auto-generated method stub
        return getOtherDisease().equals(o);
    }

    public Disease getNoDisease() {
        return createObservation("160245001", "no current problems or disability");
    }
}

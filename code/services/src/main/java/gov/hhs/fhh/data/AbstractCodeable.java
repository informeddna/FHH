/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (ÒHHSÓ) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the ÒsoftwareÓ) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data;

import gov.hhs.fhh.service.util.CurrentLanguageHolder;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import javax.persistence.Transient;

import org.hibernate.annotations.ForeignKey;
import org.hibernate.validator.Length;

import com.fiveamsolutions.nci.commons.data.persistent.PersistentObject;

/**
 * @author lpower
 *
 */
@MappedSuperclass
public abstract class AbstractCodeable implements PersistentObject {
    private static final long serialVersionUID = 1L;
    static final int NAME_LENGTH = 255;
    static final int CODE_LENGTH = 50;

    private Long id;
    private String code;
    private String codeSystemName;
    private String originalText;
    private String codeSystem;
    private String codeSystemVersion;

    // mapping language code -> translated display strings
    private Map<String, DisplayString> displayStrings = new HashMap<String, DisplayString>();

    /**
     * Default constructor.
     */
    public AbstractCodeable() {
        //default constructor
    }

    /**
     * Copy constructor.
     * @param c the codeable object to copy from.
     */
    public AbstractCodeable(AbstractCodeable c) {
        this.id = c.id;
        this.code = c.getCode();
        this.codeSystem = c.getCodeSystem();
        this.codeSystemName = c.getCodeSystemName();
        this.codeSystemVersion = c.getCodeSystemVersion();
        this.originalText = c.getOriginalText();

        for (Entry<String, DisplayString> entry : c.getDisplayStrings().entrySet()) {
            this.displayStrings.put(entry.getKey(), new DisplayString(entry.getValue()));
        }
    }

    /**
     * @return the id
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @ForeignKey(name = "codeable_fk")
    public Long getId() {
        return this.id;
    }

    /**
     * @param id the id to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * @return the code
     */
    @Length(max = CODE_LENGTH)
    public String getCode() {
        return code;
    }


    /**
     * @param code the code to set
     */
    public void setCode(String code) {
        this.code = code;
    }

    /**
     * @return the codeSystemName
     */
    @Length(max = NAME_LENGTH)
    public String getCodeSystemName() {
        return codeSystemName;
    }

    /**
     * @param codeSystemName the codeSystemName to set
     */
    public void setCodeSystemName(String codeSystemName) {
        this.codeSystemName = codeSystemName;
    }

    /**
     * @return the displayName
     */
    @Transient
    public String getDisplayName() {
        String language = CurrentLanguageHolder.getCurrentLanguage();
        DisplayString ds = displayStrings.get(language.toLowerCase(Locale.getDefault()));
        if (ds == null) {
            ds = displayStrings.get(CurrentLanguageHolder.DEFAULT_LANGUAGE);
        }
        return ds != null ? ds.getDisplayName() : null;
    }

    /**
     * @param displayName the displayName to set
     */
    public void setDisplayName(String displayName) {
        String language = CurrentLanguageHolder.getCurrentLanguage();
        DisplayString ds = displayStrings.get(language.toLowerCase(Locale.getDefault()));

        if (ds == null) {
            ds = new DisplayString();
            ds.setLanguage(language);
        }
        ds.setDisplayName(displayName);
        displayStrings.put(language, ds);
    }

    /**
     * @return the originalText
     */
    @Length(max = NAME_LENGTH)
    public String getOriginalText() {
        return originalText;
    }

    /**
     * @param originalText the originalText to set
     */
    public void setOriginalText(String originalText) {
        this.originalText = originalText;
    }

    /**
     * @return the codeSystem
     */
    public String getCodeSystem() {
        return codeSystem;
    }

    /**
     * @param codeSystem the codeSystem to set
     */
    public void setCodeSystem(String codeSystem) {
        this.codeSystem = codeSystem;
    }

    /**
     * @return the codeSystemVersion
     */
    public String getCodeSystemVersion() {
        return codeSystemVersion;
    }

    /**
     * @param codeSystemVersion the codeSystemVersion to set
     */
    public void setCodeSystemVersion(String codeSystemVersion) {
        this.codeSystemVersion = codeSystemVersion;
    }

    /**
     * (Used in drop-downs/lists).
     * @return the appDisplay
     */
    @Transient
    public String getAppDisplay() {
        String language = CurrentLanguageHolder.getCurrentLanguage();
        DisplayString ds = displayStrings.get(language.toLowerCase(Locale.getDefault()));
        if (ds == null) {
            ds = displayStrings.get(CurrentLanguageHolder.DEFAULT_LANGUAGE);
        }
        
        return ds != null ? ds.getAppDisplay() : null;
    }

    /**
     * @param appDisplay the appDisplay to set
     */
    public void setAppDisplay(String appDisplay) {
        String language = CurrentLanguageHolder.getCurrentLanguage();
        DisplayString ds = displayStrings.get(language.toLowerCase(Locale.getDefault()));

        if (ds == null) {
            ds = new DisplayString();
            ds.setLanguage(language);
        }
        ds.setAppDisplay(appDisplay);
        displayStrings.put(language, ds);
    }

    /**
     * @return the displayStrings
     */
    @Transient
    public Map<String, DisplayString> getDisplayStrings() {
        return displayStrings;
    }

    /**
     * @param displayStrings the displayStrings to set
     */
    @SuppressWarnings("unused")
    private void setDisplayStrings(Map<String, DisplayString> displayStrings) {
        this.displayStrings = displayStrings;
    }

    /**
     * Add a new DisplayString for this object.
     * @param language language to set
     * @param displayName displayName to set
     * @param appDisplay appDisplay to set
     */
    public void addDisplayString(String language, String displayName, String appDisplay) {
        DisplayString ds = new DisplayString(language, displayName, appDisplay);
        this.displayStrings.put(language, ds);
    }
    
    /**
     * @return true if the id is not null
     */
    protected boolean hasId() {
        return id != null;
    }

}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.model.mfhp.castor;

import gov.hhs.fhh.xml.PatientPerson;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.apache.log4j.Logger;
import org.exolab.castor.mapping.FieldHandler;

/**
 * @author bpickeral
 * 
 */
public class DateFieldHandler implements FieldHandler {
    private static final Logger LOG = Logger.getLogger(DateFieldHandler.class);
   
    /**
     * Creates a new DateFieldHandler instance.
     */
    public DateFieldHandler() {
        super();
    }

    /**
     * Returns the value of the field from the object.
     *
     * @param object The object
     * @return The value of the field
     */
    public Object getValue(Object object) {
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy", Locale.US);
        PatientPerson person = (PatientPerson) object;
        Date value = person.getDateOfBirth();
        if (value == null) {
            return null;
        }
        
        Date date = (Date) value;
        return format.format(date);
    }

    /**
     * Sets the value of the field on the object.
     *
     * @param object The object
     * @param value The new value
     */
    public void setValue(Object object, Object value) {
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy", Locale.US);
        PatientPerson person = (PatientPerson) object;
        Date date = null;
        try {
            date = format.parse((String) value);
        } catch (Exception e) {
            LOG.error(e);
        }
        person.setDateOfBirth(date);

    }


    /**
     * Creates a new instance of the object described by this field.
     *
     * @param parent The object for which the field is created
     * @return A new instance of the field's value
     */
    public Object newInstance(Object parent) {
        return null;
    }


    /**
     * Sets the value of the field to a default value.
     *
     * Reference fields are set to null, primitive fields are set to
     * their default value, collection fields are emptied of all
     * elements.
     *
     * @param object The object
     */
    public void resetValue(Object object) {
        ((PatientPerson) object).setDateOfBirth(null);
    }
    
    /**
     * Empty Method.
     * @deprecated No longer supported
     * @param object The object
     */
    public void checkValidity(Object object) {
        //Do Nothing
    }
}

/**
 *
 * Family Health History Portal
 * END USER AGREEMENT
 *
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably
 * grants to the user a non-exclusive, royalty-free right to use, display,
 * reproduce, and distribute this Family Health History portal software
 * (the "software") and prepare, use, display, reproduce and distribute
 * derivative works thereof for any commercial or non-commercial purpose by any
 * party, subject only to the following limitations and disclaimers, which
 * are hereby acknowledged by the user.
 *
 * User agrees that it will not degrade the standards-based format of the software
 * by materially altering the program architecture or data structure in a way
 * that would render the data generated by the altered software incompatible
 * with the original software. The intention of this clause is to ensure the
 * long-term interoperability of family history information gathered by different
 * versions of the tool.
 *
 * User agrees that this END USER AGREEMENT will be provided to any party to
 * whom user distributes the software, and that it will apply to the distributee.
 *
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS
 * trademarks without permission from HHS, and will not imply endorsement of
 * its product by HHS or the Surgeon General.
 *
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED,
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE,
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT,
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 *
 */
package gov.hhs.fhh.data.util;

import gov.hhs.fhh.data.ClinicalObservation;
import gov.hhs.fhh.data.Disease;
import gov.hhs.fhh.data.Ethnicity;
import gov.hhs.fhh.data.Race;
import gov.hhs.fhh.model.mfhp.LivingStatus;

import java.util.Calendar;

import com.fiveamsolutions.hl7.model.CauseOfDeath;
import com.fiveamsolutions.hl7.model.Demographics;
import com.fiveamsolutions.hl7.model.Person;
import com.fiveamsolutions.hl7.model.Relative;
import com.fiveamsolutions.hl7.model.age.Age;
import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;
import com.fiveamsolutions.hl7.model.age.DateBasedExactAge;
import com.fiveamsolutions.hl7.model.age.DayBasedEstimateAgeRange;
import com.fiveamsolutions.hl7.model.age.ValueBasedEstimateAgeRange;
import com.fiveamsolutions.hl7.model.age.YearBasedEstimateAge;
import com.fiveamsolutions.hl7.model.condition.Condition;
import com.fiveamsolutions.hl7.model.condition.MfhpTrackedCondition;
import com.fiveamsolutions.hl7.model.mfhp.MfhpCauseOfDeath;
import com.fiveamsolutions.hl7.model.mfhp.MfhpDiagnosis;
import com.fiveamsolutions.hl7.model.mfhp.MfhpUnknownAge;
import com.fiveamsolutions.hl7.model.mfhp.MfhpUserEnteredCondition;
import com.fiveamsolutions.hl7.model.mfhp.ProbandDemographics;
import com.fiveamsolutions.hl7.model.mfhp.ethnicity.MfhpTrackedEthnicity;
import com.fiveamsolutions.hl7.model.race.MfhpTrackedRace;
import com.fiveamsolutions.hl7.model.snomed.SNOMEDCode;

/**
 * @author bpickeral
 *
 */
public final class PedigreeConversionUtils {

    /**
     * Creates Demographics and Conditions for a Pedigree relative from a data relative.
     *
     * @param dataRelative data.Relative object
     * @param pedigreeRelative hl7-commons object
     */
    public static void createDemographicsAndConditions(gov.hhs.fhh.data.Relative dataRelative,
            Relative pedigreeRelative) {
        pedigreeRelative.setDemographics(createRelativeDemographics(dataRelative));
        addConditions(pedigreeRelative, dataRelative);
        if (LivingStatus.UNKNOWN.toString().equals(dataRelative.getLivingStatus())) {
            pedigreeRelative.setAge(new MfhpUnknownAge());
        } else {
            storeBirthTime(dataRelative, pedigreeRelative);
            storeEstimatedAgeRange(dataRelative, pedigreeRelative);
        }
    }

    /**
     * Creates a cause of death from a data relative.
     *
     * @param dataRelative the data.Relative object
     * @return CauseOfDeath object (hl7-commons)
     */
    public static CauseOfDeath createCauseOfDeath(gov.hhs.fhh.data.Relative dataRelative) {
        MfhpCauseOfDeath cod = new MfhpCauseOfDeath();
        Age age = null;
        Condition condition = null;
        Disease disease = dataRelative.getCauseOfDeath();
        if (disease != null) {
            // a user enterred disease isOther returns true only when displayname is set to OTHER or is empty, so we
            // must use the app display in this case.
            String name = getUserEnterredDiseaseName(disease);
            if (disease.isOther()) {
                condition = new MfhpUserEnteredCondition(name);
            } else {
                condition = new MfhpTrackedCondition();

                SNOMEDCode code = new SNOMEDCode(disease.getCode(), name, disease.getCodeSystemName());
                ((MfhpTrackedCondition) condition).addCode(code);
            }
        }

        if (dataRelative.getAgeAtDeath() != null) {
            if (dataRelative.getAgeAtDeath().isDayBased()) {
                age = new DayBasedEstimateAgeRange(dataRelative.getAgeAtDeath().getLowValue(), dataRelative
                        .getAgeAtDeath().getHighValue());
            } else if (dataRelative.getAgeAtDeath().isYearBased()) {
                age = new ValueBasedEstimateAgeRange(dataRelative.getAgeAtDeath().getLowValue(), dataRelative
                        .getAgeAtDeath().getHighValue());
            }

        }
        cod.setAgeAtDeath(age);
        cod.setCondition(condition);
        return cod;
    }


    private static String getUserEnterredDiseaseName(Disease disease) {
        String name = disease.getDisplayName();
        if (name == null) {
            name = disease.getAppDisplay();
        }
        return name;
    }


    /**
     * Adds all ClinicalObservations of a mfhp Person as Conditions to a Pedigree Person.
     *
     * @param pedigreePerson AbstractPerson to put Conditions into
     * @param dataPerson containing ClinicalObservations
     */
    public static void addConditions(Person pedigreePerson, gov.hhs.fhh.data.Person dataPerson) {
        for (ClinicalObservation currObservation : dataPerson.getObservations()) {
            Age age = null;

            if (currObservation.getAgeRange().isDayBased()) {
                age = new DayBasedEstimateAgeRange(currObservation.getAgeRange().getLowValue(), currObservation
                        .getAgeRange().getHighValue());
            } else if (currObservation.getAgeRange().isYearBased()) {
                age = new ValueBasedEstimateAgeRange(currObservation.getAgeRange().getLowValue(), currObservation
                        .getAgeRange().getHighValue());
            }

            if (currObservation.getDisease().isOther()) {
                MfhpUserEnteredCondition condition = new MfhpUserEnteredCondition(currObservation.getDisease()
                        .getOriginalText());
                pedigreePerson.addDiagnosis(new MfhpDiagnosis(pedigreePerson, age, condition));
            } else {
                String text = null;
                MfhpTrackedCondition condition = new MfhpTrackedCondition();
                text = currObservation.getDisease().getDisplayName();
                SNOMEDCode code = new SNOMEDCode(currObservation.getDisease().getCode(), text, currObservation
                        .getDisease().getCodeSystemName());
                (condition).addCode(code);
                pedigreePerson.addDiagnosis(new MfhpDiagnosis(pedigreePerson, age, condition));
            }

        }
    }

    /**
     * <code>ProbandDemographics</code> object from the attributes of Person.
     *
     * @param person containing attributes
     * @return Demographics
     */
    public static Demographics createProbandDemographics(gov.hhs.fhh.data.Person person) {
        ProbandDemographics demographics = new ProbandDemographics();
        demographics.setName(person.getName());
        demographics.setWeight(person.getWeight());
        demographics.setHeight(person.getHeight());
        demographics.setWaistCircumference(person.getWaistCircumference());
        demographics.setAdopted(person.isAdopted());
        demographics.setTwinStatus(person.getTwinStatus());
        addRaces(demographics, person);
        addEthnicities(demographics, person);
        return demographics;
    }

    private static void addRaces(ProbandDemographics demographics, gov.hhs.fhh.data.Person person) {
        for (Race currRace : person.getRaces()) {
            MfhpTrackedRace hl7Race = new MfhpTrackedRace();
            SNOMEDCode code = new SNOMEDCode(currRace.getCode(), currRace.getDisplayName(), currRace
                    .getCodeSystemName());
            hl7Race.addCode(code);
            demographics.addRace(hl7Race);
        }
    }

    private static void addEthnicities(ProbandDemographics demographics, gov.hhs.fhh.data.Person person) {
        for (Ethnicity currEthnicity : person.getEthnicities()) {
            MfhpTrackedEthnicity hl7Ethnicity = new MfhpTrackedEthnicity();
            SNOMEDCode code = new SNOMEDCode(currEthnicity.getCode(), currEthnicity.getDisplayName(), currEthnicity
                    .getCodeSystemName());
            hl7Ethnicity.addCode(code);
            demographics.addEthnicity(hl7Ethnicity);
        }
    }

    /**
     * Creates a <code>RelativeDemographics</code> object from the attributes of Person.
     *
     * @param dataRelative containing attributes
     * @return Demographics
     */
    public static Demographics createRelativeDemographics(gov.hhs.fhh.data.Relative dataRelative) {
        ProbandDemographics demographics = new ProbandDemographics();
        demographics.setName(dataRelative.getName());
        demographics.setTwinStatus(dataRelative.getTwinStatus());
        demographics.setAdopted(dataRelative.isAdopted());
        demographics.setHeight(dataRelative.getHeight());
        demographics.setWeight(dataRelative.getWeight());
        demographics.setWaistCircumference(dataRelative.getWaistCircumference());
        addRaces(demographics, dataRelative);
        addEthnicities(demographics, dataRelative);
        return demographics;
    }

    private static void storeBirthTime(gov.hhs.fhh.data.Relative dataRelative, Relative pedigreeRelative) {
        if (dataRelative.getBirthTime() != null) {
            if (FormatUtils.checkDateFormat(dataRelative.getBirthTime())) {
                String dateOfBirthString = dataRelative.getBirthTime();
                Calendar cal = Calendar.getInstance();
                cal.setTime(FormatUtils.convertStringToDate(dateOfBirthString));
                pedigreeRelative.setAge(new DateBasedExactAge(cal));
            } else {
                Integer birthYear = Integer.valueOf(dataRelative.getBirthTime());
                pedigreeRelative.setAge(new YearBasedEstimateAge(birthYear));
            }
        }
    }

    private static void storeEstimatedAgeRange(gov.hhs.fhh.data.Relative dataRelative,
            Relative pedigreeRelative) {
        if (dataRelative.getEstimatedAgeRange() != null) {
            AgeRangeEnum ageRangeEnum = dataRelative.getEstimatedAgeRange();
            if (ageRangeEnum.isDayBased()) {
                pedigreeRelative.setAge(new DayBasedEstimateAgeRange(ageRangeEnum.getLowValue(), ageRangeEnum
                        .getHighValue()));
            } else if (ageRangeEnum.isYearBased()) {
                pedigreeRelative.setAge(new ValueBasedEstimateAgeRange(ageRangeEnum.getLowValue(), ageRangeEnum
                        .getHighValue()));
            }
        }
    }
}

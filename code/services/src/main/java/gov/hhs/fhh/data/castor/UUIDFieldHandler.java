/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data.castor;

import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.xml.PatientPerson;

import java.util.UUID;

import org.exolab.castor.mapping.FieldHandler;

/**
 * Custom field handler to be backwards compatible as well as forward compatible with UUIDs.
 * 
 * @author smatyas
 * 
 */
public class UUIDFieldHandler implements FieldHandler {

    /**
     * {@inheritDoc}
     */
    public void checkValidity(Object object) {
        // do nothing
    }

    /**
     * {@inheritDoc}
     */
    public Object getValue(Object object) {
        String id = null;
        if (object instanceof PatientPerson) {
            PatientPerson person = (PatientPerson) object;
            id = (person.getId() == null) ? null : person.getId().toString();
        } else if (object instanceof Relative) {
            Relative relative = (Relative) object;
            id = (relative.getUuid() == null) ? null : relative.getUuid().toString();
        }
        return id;
    }

    /**
     * {@inheritDoc}
     */
    public Object newInstance(Object parent) {
        return null;
    }

    /**
     * {@inheritDoc}
     */
    public void resetValue(Object object) {
        if (object instanceof PatientPerson) {
            PatientPerson person = (PatientPerson) object;
            person.setId(null);
        } else if (object instanceof Relative) {
            Relative relative = (Relative) object;
            relative.setUuid(null);
        }
    }

    /**
     * {@inheritDoc}
     */
    public void setValue(Object object, Object value) {
        if (value instanceof String) {
            String id = (String) value;
            if (object instanceof PatientPerson) {
                PatientPerson person = (PatientPerson) object;
                if (UUIDFieldHandler.isValidUUID(id)) {
                    person.setId(UUID.fromString(id));
                } else {
                    person.setId(UUIDFieldHandler.createUuidFromId(Long.valueOf(id)));
                }
            } else if (object instanceof Relative) {
                Relative relative = (Relative) object;
                if (UUIDFieldHandler.isValidUUID(id)) {
                    relative.setUuid(UUID.fromString(id));
                } else {
                    relative.setUuid(UUIDFieldHandler.createUuidFromId(Long.valueOf(id)));
                }
            }
        }
    }

    /**
     * @param value to inspect
     * @return true if valid, false otherwise
     */
    static boolean isValidUUID(String value) {
        try {
            UUID.fromString(value);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * @param id long to create as UUID
     * @return UUID from id param
     */
    static UUID createUuidFromId(long id) {
        String index = Long.toString(id);
        String customUuid = String.format("%s-%s-%s-%s-%s", index, index, index, index, index);
        return UUID.fromString(customUuid);
    }

}

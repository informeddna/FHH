/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services (“HHS”) hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the “software”) and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data.util;

import gov.hhs.fhh.data.HeightUnit;
import gov.hhs.fhh.data.Person;
import gov.hhs.fhh.data.Relative;
import gov.hhs.fhh.data.RelativeCode;
import gov.hhs.fhh.data.WeightUnit;

import java.text.DecimalFormat;
import java.util.List;

import org.apache.commons.lang.StringUtils;

/**
 * @author bpickeral
 *
 */
public final class PersonUtils {
    
    /**
     * 1 inch = 2.54 centimeters.         
     */
    static final double INCH_TO_CMS = 2.54;

    /**
     * 1 centimeter = 0.393700787 inches.
     */
    static final double CM_TO_INCHES = 0.393700787;
    
    /**
     * Integer to multiply by when converting kilograms to pounds.
     */
    public static final double LB_TO_KG_CONVERSION = 703.0;

    
    /**
     * Gets the occurrence of the relative within its relative type.  An htmName of sister2 will return 2.
     * @param htmName String to parse
     * @param code RelativeCode containing the <code>htmValue</code>
     * @return int occurrence of the relative within its relative type
     */
    public static int getParentNum(String htmName, RelativeCode code) {
        // Mother and father nodes don't contain a number, return 1 since they are always
        // the first relative of their relative type.
        if (RelativeCode.NMTH.equals(code) || RelativeCode.NFTH.equals(code)) {
            return 1;
        }
        return Integer.valueOf(StringUtils.substring(htmName, code.getHtmValue().length()));
    }
    
    /**
     * Used in the HTM import to determine the maternal/paternal specifier for a cousin by
     *  using the <code>RelativeCode</code> of the cousin's parent.
     * @param code RelativeCode of the aunt/uncle (cousin's parent)
     * @return true if maternal, otherwise false
     */
    public static boolean isMothersSibling(RelativeCode code) {
        if (RelativeCode.MAUNT.equals(code)
                || RelativeCode.MUNCLE.equals(code)) {
            return true;
        }
        return false;
    }
    
    /**
     * Assigns an id to each relative.
     * @param relatives <code>Relative</code> objects to assign ids
     */
    public static void setRelativeIds(List<Relative>  relatives) {
        int i = 0;
        for (Relative currRelative : relatives) {
            currRelative.setId((long) i);
            i++;
        }
    }

    /**
     * @param p Person to add Relative
     * @param relativeCode type of relative
     * @return new relative
     */
    public static Relative addRelative(Person p, RelativeCode relativeCode) {
        Relative newRelative = new Relative();
        newRelative.setCode(relativeCode.toString());
        p.getRelatives().add(newRelative);
        return newRelative;
    }

    /**
     * @param p Person to add Relatives
     * @param numRelatives number to add
     * @param relativeCode to set
     */
    public static void addRelatives(Person p, Integer numRelatives, RelativeCode relativeCode) {
        if (numRelatives != null) {
            for (int i = 0; i < numRelatives; i++) {
                addRelative(p, relativeCode);
            }
        }
    }
    
    /**
     * Get unit for height and weight - need inches and lbs OR meters and kg
     *   formula for inches and lbs.
     *   BMI = (weight in lbs * 703)/(height in inches)(height in inches).
     *   BMI = (weight in kg)/(height in meters).
     * @param p <code>Person</code> Object used to calculate BMI
     * @return the bmi
     */
    public static String calculateBmi(final Person p) {
        double bmi;
        if (p.getHeight().getValue() != null && p.getWeight().getValue() != null) {
            if (WeightUnit.US.equals(p.getWeight().getUnit())) {
                bmi = calculateUSBmi(p);
            } else {
                bmi = calculateMetricBmi(p);
            }
            DecimalFormat format = new DecimalFormat("0.0");
            return format.format(bmi);
        }
        return null;
    }
    
    static double calculateMetricBmi(final Person p) {
        return p.getWeight().getValue() / getMetricHeightSquared(p);
    }
    
    /**
     * Converts the Height of Centimeters and raises it by a power of 2.
     * @param p person
     * @return (height in cm)^2
     */
     static double getMetricHeightSquared(final Person p) {
        final Integer v = p.getHeight().getValue();
        double metricHeight = v.doubleValue();
        double sqr = 0;
        if (v != null) {
            // do the conversion if the unit isn't metric
            if (HeightUnit.US.equals(p.getHeight().getUnit())) {
                metricHeight = v * INCH_TO_CMS;
            } 
            
            sqr = Math.pow(metricHeight, 2.0);
        }
        return sqr;
    }

    static double calculateUSBmi(final Person p) {
        return p.getWeight().getValue() * LB_TO_KG_CONVERSION / getUSHeightSquared(p);
    }

    /**
     * Converts the Height of the person to inches and raises it to a power of 2.
     * @param p
     * @return (height in inches)^2
     */
    static double getUSHeightSquared(final Person p) {
        final Integer v = p.getHeight().getValue();
        double usHeight = v.doubleValue();
        double sqr = 0;
        if (v != null) {
            
            //do the conversion if the unit isn't US
            if (HeightUnit.METRIC.equals(p.getHeight().getUnit())) {
                usHeight = v * CM_TO_INCHES;
            } 
            
            sqr = Math.pow(usHeight, 2.0);
            
        }
        return sqr;
    }
}

/**
 * 
 * Family Health History Portal 
 * END USER AGREEMENT
 * 
 * The U.S. Department of Health & Human Services ("HHS") hereby irrevocably 
 * grants to the user a non-exclusive, royalty-free right to use, display, 
 * reproduce, and distribute this Family Health History portal software 
 * (the "software") and prepare, use, display, reproduce and distribute 
 * derivative works thereof for any commercial or non-commercial purpose by any 
 * party, subject only to the following limitations and disclaimers, which 
 * are hereby acknowledged by the user.  
 * 
 * User agrees that it will not degrade the standards-based format of the software 
 * by materially altering the program architecture or data structure in a way 
 * that would render the data generated by the altered software incompatible 
 * with the original software. The intention of this clause is to ensure the 
 * long-term interoperability of family history information gathered by different 
 * versions of the tool.
 * 
 * User agrees that this END USER AGREEMENT will be provided to any party to 
 * whom user distributes the software, and that it will apply to the distributee.
 * 
 * User agrees that it will not use the HHS or Surgeon General logo or any HHS 
 * trademarks without permission from HHS, and will not imply endorsement of 
 * its product by HHS or the Surgeon General.
 * 
 * THIS SOFTWARE IS PROVIDED TO USER WITH NO WARRANTIES, EXPRESS OR IMPLIED, 
 * INCLUDING ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, 
 * OR THAT THE USE OF THE SOFWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT, 
 * TRADEMARK OR OTHER PROPRIETARY RIGHTS.
 * 
 */
package gov.hhs.fhh.data;

import gov.hhs.fhh.model.mfhp.castor.ValueNode;

import java.io.Serializable;

import com.fiveamsolutions.hl7.model.age.AgeRangeEnum;
import com.fiveamsolutions.hl7.model.age.CodeNode;
import com.fiveamsolutions.hl7.model.age.DataEstimatedAgeNode;

/**
 * @author bpickeral
 * 
 */
public class ClinicalObservation implements Serializable {
    /**
     * Cause Of Death Code displayed in the XML.
     */
    public static final String COD_CODE = "419620001";

    /**
     * COD Code System Name displayed in the XML.
     */
    public static final String COD_CODE_SYSTEM_NAME = "SNOMED_CT";

    /**
     * COD Display Name displayed in the XML.
     */
    public static final String COD_DISPLAY_NAME = "death";

    private static final long serialVersionUID = 1456L;
    private AgeRangeEnum ageRangeEnum;
    private Disease disease;
    // Only used when importing/exporting using Castor, otherwise cause of death
    // is stored in Relative
    private boolean causeOfDeath;
    private CodeNode code;
    private ValueNode valueNode;
    private boolean unmatchedCondition = false;

    /**
     * Default constructor.
     */
    public ClinicalObservation() {
        // default constructor
    }

    /**
     * Copy constructor.
     * 
     * @param c the Disease object to copy from.
     */
    public ClinicalObservation(ClinicalObservation c) {
        this.ageRangeEnum = c.getAgeRange();
        this.disease = c.getDisease();
    }

    /**
     * @return the DataEstimatedAgeNode
     */
    public DataEstimatedAgeNode getDataEstimatedAgeNode() {
        return getAgeRange() != null ? getAgeRange().getAsDataEstimatedAgeNode() : null;
    }

    /**
     * Sets the ageRangeEnum based on the dataEstimatedAgeNode passed in.
     * 
     * @param dataEstimatedAgeNode the dataEstimatedAgeNode to get the lowValue from.
     */
    public void setDataEstimatedAgeNode(DataEstimatedAgeNode dataEstimatedAgeNode) {
        setAgeRange(AgeRangeEnum.fromDataEstimatedAgeNode(dataEstimatedAgeNode));
    }

    /**
     * Used only by Castor to display the code for the cause of death node.
     * 
     * @return the CodeNode if the observation is the cause of death
     */
    public CodeNode getCODCodeNode() {
        CodeNode codeNode = null;
        if (this.isCauseOfDeath()) {
            codeNode = new CodeNode(COD_CODE, COD_CODE_SYSTEM_NAME, COD_DISPLAY_NAME);
        }
        return codeNode;
    }

    /**
     * If the code node for cause of death is being parsed, set causeOfDeath. Only used when importing/exporting.
     * 
     * @param codeNode the codeNode to get the from.
     */
    public void setCODCodeNode(CodeNode codeNode) {
        setCauseOfDeath(true);
    }

    /**
     * @return the disease
     */
    public Disease getDisease() {
        return disease;
    }

    /**
     * @param disease the disease to set
     */
    public void setDisease(Disease disease) {
        this.disease = disease;
    }

    /**
     * @return the causeOfDeath
     */
    public boolean isCauseOfDeath() {
        return causeOfDeath;
    }

    /**
     * @param causeOfDeath the causeOfDeath to set
     */
    public void setCauseOfDeath(boolean causeOfDeath) {
        this.causeOfDeath = causeOfDeath;
    }

    /**
     * @return the code
     */
    public CodeNode getCode() {
        return code;
    }

    /**
     * @param code the code to set
     */
    public void setCode(CodeNode code) {
        this.code = code;
    }

    /**
     * @return the valueNode
     */
    public ValueNode getValueNode() {
        return valueNode;
    }

    /**
     * @param valueNode the valueNode to set
     */
    public void setValueNode(ValueNode valueNode) {
        this.valueNode = valueNode;
    }

    /**
     * @return the ageRangeEnum
     */
    public AgeRangeEnum getAgeRange() {
        return ageRangeEnum;
    }

    /**
     * @param ageRangeEnumParam the ageRangeEnum to set.
     */
    public void setAgeRange(AgeRangeEnum ageRangeEnumParam) {
        this.ageRangeEnum = ageRangeEnumParam;
    }

    /**
     * @return the unmatchedCondition
     */
    public boolean isUnmatchedCondition() {
        return unmatchedCondition;
    }

    /**
     * @param unmatchedCondition the unmatchedCondition to set
     */
    public void setUnmatchedCondition(boolean unmatchedCondition) {
        this.unmatchedCondition = unmatchedCondition;
    }
}
